/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.delphi.userprofile.model;

import aQute.bnd.annotation.ProviderType;

import com.delphi.userprofile.service.persistence.AdminTasksPK;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the AdminTasks service. Represents a row in the &quot;Delphi_AdminTasks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.delphi.userprofile.model.impl.AdminTasksModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.delphi.userprofile.model.impl.AdminTasksImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AdminTasks
 * @see com.delphi.userprofile.model.impl.AdminTasksImpl
 * @see com.delphi.userprofile.model.impl.AdminTasksModelImpl
 * @generated
 */
@ProviderType
public interface AdminTasksModel extends BaseModel<AdminTasks>, ShardedModel,
	StagedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a admin tasks model instance should use the {@link AdminTasks} interface instead.
	 */

	/**
	 * Returns the primary key of this admin tasks.
	 *
	 * @return the primary key of this admin tasks
	 */
	public AdminTasksPK getPrimaryKey();

	/**
	 * Sets the primary key of this admin tasks.
	 *
	 * @param primaryKey the primary key of this admin tasks
	 */
	public void setPrimaryKey(AdminTasksPK primaryKey);

	/**
	 * Returns the uuid of this admin tasks.
	 *
	 * @return the uuid of this admin tasks
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this admin tasks.
	 *
	 * @param uuid the uuid of this admin tasks
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the admin task ID of this admin tasks.
	 *
	 * @return the admin task ID of this admin tasks
	 */
	public long getAdminTaskId();

	/**
	 * Sets the admin task ID of this admin tasks.
	 *
	 * @param adminTaskId the admin task ID of this admin tasks
	 */
	public void setAdminTaskId(long adminTaskId);

	/**
	 * Returns the user ID of this admin tasks.
	 *
	 * @return the user ID of this admin tasks
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this admin tasks.
	 *
	 * @param userId the user ID of this admin tasks
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this admin tasks.
	 *
	 * @return the user uuid of this admin tasks
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this admin tasks.
	 *
	 * @param userUuid the user uuid of this admin tasks
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the system alert of this admin tasks.
	 *
	 * @return the system alert of this admin tasks
	 */
	public boolean getSystemAlert();

	/**
	 * Returns <code>true</code> if this admin tasks is system alert.
	 *
	 * @return <code>true</code> if this admin tasks is system alert; <code>false</code> otherwise
	 */
	public boolean isSystemAlert();

	/**
	 * Sets whether this admin tasks is system alert.
	 *
	 * @param systemAlert the system alert of this admin tasks
	 */
	public void setSystemAlert(boolean systemAlert);

	/**
	 * Returns the message text of this admin tasks.
	 *
	 * @return the message text of this admin tasks
	 */
	@AutoEscape
	public String getMessageText();

	/**
	 * Sets the message text of this admin tasks.
	 *
	 * @param messageText the message text of this admin tasks
	 */
	public void setMessageText(String messageText);

	/**
	 * Returns the post on port banner of this admin tasks.
	 *
	 * @return the post on port banner of this admin tasks
	 */
	public boolean getPostOnPortBanner();

	/**
	 * Returns <code>true</code> if this admin tasks is post on port banner.
	 *
	 * @return <code>true</code> if this admin tasks is post on port banner; <code>false</code> otherwise
	 */
	public boolean isPostOnPortBanner();

	/**
	 * Sets whether this admin tasks is post on port banner.
	 *
	 * @param postOnPortBanner the post on port banner of this admin tasks
	 */
	public void setPostOnPortBanner(boolean postOnPortBanner);

	/**
	 * Returns the site alert of this admin tasks.
	 *
	 * @return the site alert of this admin tasks
	 */
	public boolean getSiteAlert();

	/**
	 * Returns <code>true</code> if this admin tasks is site alert.
	 *
	 * @return <code>true</code> if this admin tasks is site alert; <code>false</code> otherwise
	 */
	public boolean isSiteAlert();

	/**
	 * Sets whether this admin tasks is site alert.
	 *
	 * @param siteAlert the site alert of this admin tasks
	 */
	public void setSiteAlert(boolean siteAlert);

	/**
	 * Returns the site name of this admin tasks.
	 *
	 * @return the site name of this admin tasks
	 */
	@AutoEscape
	public String getSiteName();

	/**
	 * Sets the site name of this admin tasks.
	 *
	 * @param siteName the site name of this admin tasks
	 */
	public void setSiteName(String siteName);

	/**
	 * Returns the company ID of this admin tasks.
	 *
	 * @return the company ID of this admin tasks
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this admin tasks.
	 *
	 * @param companyId the company ID of this admin tasks
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the created by ID of this admin tasks.
	 *
	 * @return the created by ID of this admin tasks
	 */
	public long getCreatedById();

	/**
	 * Sets the created by ID of this admin tasks.
	 *
	 * @param createdById the created by ID of this admin tasks
	 */
	public void setCreatedById(long createdById);

	/**
	 * Returns the create date of this admin tasks.
	 *
	 * @return the create date of this admin tasks
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this admin tasks.
	 *
	 * @param createDate the create date of this admin tasks
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this admin tasks.
	 *
	 * @return the modified date of this admin tasks
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this admin tasks.
	 *
	 * @param modifiedDate the modified date of this admin tasks
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(AdminTasks adminTasks);

	@Override
	public int hashCode();

	@Override
	public CacheModel<AdminTasks> toCacheModel();

	@Override
	public AdminTasks toEscapedModel();

	@Override
	public AdminTasks toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}