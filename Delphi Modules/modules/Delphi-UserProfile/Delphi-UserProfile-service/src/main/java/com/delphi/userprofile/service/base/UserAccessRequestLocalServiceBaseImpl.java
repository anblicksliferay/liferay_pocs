/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.delphi.userprofile.service.base;

import aQute.bnd.annotation.ProviderType;

import com.delphi.userprofile.model.UserAccessRequest;
import com.delphi.userprofile.service.UserAccessRequestLocalService;
import com.delphi.userprofile.service.persistence.AdminTasksPersistence;
import com.delphi.userprofile.service.persistence.UserAccessRequestPersistence;
import com.delphi.userprofile.service.persistence.UserProfilePersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user access request local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.delphi.userprofile.service.impl.UserAccessRequestLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.delphi.userprofile.service.impl.UserAccessRequestLocalServiceImpl
 * @see com.delphi.userprofile.service.UserAccessRequestLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class UserAccessRequestLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserAccessRequestLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.delphi.userprofile.service.UserAccessRequestLocalServiceUtil} to access the user access request local service.
	 */

	/**
	 * Adds the user access request to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userAccessRequest the user access request
	 * @return the user access request that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserAccessRequest addUserAccessRequest(
		UserAccessRequest userAccessRequest) {
		userAccessRequest.setNew(true);

		return userAccessRequestPersistence.update(userAccessRequest);
	}

	/**
	 * Creates a new user access request with the primary key. Does not add the user access request to the database.
	 *
	 * @param requestId the primary key for the new user access request
	 * @return the new user access request
	 */
	@Override
	public UserAccessRequest createUserAccessRequest(long requestId) {
		return userAccessRequestPersistence.create(requestId);
	}

	/**
	 * Deletes the user access request with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param requestId the primary key of the user access request
	 * @return the user access request that was removed
	 * @throws PortalException if a user access request with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserAccessRequest deleteUserAccessRequest(long requestId)
		throws PortalException {
		return userAccessRequestPersistence.remove(requestId);
	}

	/**
	 * Deletes the user access request from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userAccessRequest the user access request
	 * @return the user access request that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserAccessRequest deleteUserAccessRequest(
		UserAccessRequest userAccessRequest) {
		return userAccessRequestPersistence.remove(userAccessRequest);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserAccessRequest.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return userAccessRequestPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.delphi.userprofile.model.impl.UserAccessRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return userAccessRequestPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.delphi.userprofile.model.impl.UserAccessRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return userAccessRequestPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return userAccessRequestPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return userAccessRequestPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserAccessRequest fetchUserAccessRequest(long requestId) {
		return userAccessRequestPersistence.fetchByPrimaryKey(requestId);
	}

	/**
	 * Returns the user access request with the matching UUID and company.
	 *
	 * @param uuid the user access request's UUID
	 * @param companyId the primary key of the company
	 * @return the matching user access request, or <code>null</code> if a matching user access request could not be found
	 */
	@Override
	public UserAccessRequest fetchUserAccessRequestByUuidAndCompanyId(
		String uuid, long companyId) {
		return userAccessRequestPersistence.fetchByUuid_C_First(uuid,
			companyId, null);
	}

	/**
	 * Returns the user access request with the primary key.
	 *
	 * @param requestId the primary key of the user access request
	 * @return the user access request
	 * @throws PortalException if a user access request with the primary key could not be found
	 */
	@Override
	public UserAccessRequest getUserAccessRequest(long requestId)
		throws PortalException {
		return userAccessRequestPersistence.findByPrimaryKey(requestId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(userAccessRequestLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserAccessRequest.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("requestId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(userAccessRequestLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(UserAccessRequest.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("requestId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(userAccessRequestLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserAccessRequest.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("requestId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<UserAccessRequest>() {
				@Override
				public void performAction(UserAccessRequest userAccessRequest)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						userAccessRequest);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(UserAccessRequest.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return userAccessRequestLocalService.deleteUserAccessRequest((UserAccessRequest)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return userAccessRequestPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the user access request with the matching UUID and company.
	 *
	 * @param uuid the user access request's UUID
	 * @param companyId the primary key of the company
	 * @return the matching user access request
	 * @throws PortalException if a matching user access request could not be found
	 */
	@Override
	public UserAccessRequest getUserAccessRequestByUuidAndCompanyId(
		String uuid, long companyId) throws PortalException {
		return userAccessRequestPersistence.findByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns a range of all the user access requests.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.delphi.userprofile.model.impl.UserAccessRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user access requests
	 * @param end the upper bound of the range of user access requests (not inclusive)
	 * @return the range of user access requests
	 */
	@Override
	public List<UserAccessRequest> getUserAccessRequests(int start, int end) {
		return userAccessRequestPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user access requests.
	 *
	 * @return the number of user access requests
	 */
	@Override
	public int getUserAccessRequestsCount() {
		return userAccessRequestPersistence.countAll();
	}

	/**
	 * Updates the user access request in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userAccessRequest the user access request
	 * @return the user access request that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserAccessRequest updateUserAccessRequest(
		UserAccessRequest userAccessRequest) {
		return userAccessRequestPersistence.update(userAccessRequest);
	}

	/**
	 * Returns the admin tasks local service.
	 *
	 * @return the admin tasks local service
	 */
	public com.delphi.userprofile.service.AdminTasksLocalService getAdminTasksLocalService() {
		return adminTasksLocalService;
	}

	/**
	 * Sets the admin tasks local service.
	 *
	 * @param adminTasksLocalService the admin tasks local service
	 */
	public void setAdminTasksLocalService(
		com.delphi.userprofile.service.AdminTasksLocalService adminTasksLocalService) {
		this.adminTasksLocalService = adminTasksLocalService;
	}

	/**
	 * Returns the admin tasks persistence.
	 *
	 * @return the admin tasks persistence
	 */
	public AdminTasksPersistence getAdminTasksPersistence() {
		return adminTasksPersistence;
	}

	/**
	 * Sets the admin tasks persistence.
	 *
	 * @param adminTasksPersistence the admin tasks persistence
	 */
	public void setAdminTasksPersistence(
		AdminTasksPersistence adminTasksPersistence) {
		this.adminTasksPersistence = adminTasksPersistence;
	}

	/**
	 * Returns the user access request local service.
	 *
	 * @return the user access request local service
	 */
	public UserAccessRequestLocalService getUserAccessRequestLocalService() {
		return userAccessRequestLocalService;
	}

	/**
	 * Sets the user access request local service.
	 *
	 * @param userAccessRequestLocalService the user access request local service
	 */
	public void setUserAccessRequestLocalService(
		UserAccessRequestLocalService userAccessRequestLocalService) {
		this.userAccessRequestLocalService = userAccessRequestLocalService;
	}

	/**
	 * Returns the user access request persistence.
	 *
	 * @return the user access request persistence
	 */
	public UserAccessRequestPersistence getUserAccessRequestPersistence() {
		return userAccessRequestPersistence;
	}

	/**
	 * Sets the user access request persistence.
	 *
	 * @param userAccessRequestPersistence the user access request persistence
	 */
	public void setUserAccessRequestPersistence(
		UserAccessRequestPersistence userAccessRequestPersistence) {
		this.userAccessRequestPersistence = userAccessRequestPersistence;
	}

	/**
	 * Returns the user profile local service.
	 *
	 * @return the user profile local service
	 */
	public com.delphi.userprofile.service.UserProfileLocalService getUserProfileLocalService() {
		return userProfileLocalService;
	}

	/**
	 * Sets the user profile local service.
	 *
	 * @param userProfileLocalService the user profile local service
	 */
	public void setUserProfileLocalService(
		com.delphi.userprofile.service.UserProfileLocalService userProfileLocalService) {
		this.userProfileLocalService = userProfileLocalService;
	}

	/**
	 * Returns the user profile persistence.
	 *
	 * @return the user profile persistence
	 */
	public UserProfilePersistence getUserProfilePersistence() {
		return userProfilePersistence;
	}

	/**
	 * Sets the user profile persistence.
	 *
	 * @param userProfilePersistence the user profile persistence
	 */
	public void setUserProfilePersistence(
		UserProfilePersistence userProfilePersistence) {
		this.userProfilePersistence = userProfilePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.delphi.userprofile.model.UserAccessRequest",
			userAccessRequestLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.delphi.userprofile.model.UserAccessRequest");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return UserAccessRequestLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return UserAccessRequest.class;
	}

	protected String getModelClassName() {
		return UserAccessRequest.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = userAccessRequestPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.delphi.userprofile.service.AdminTasksLocalService.class)
	protected com.delphi.userprofile.service.AdminTasksLocalService adminTasksLocalService;
	@BeanReference(type = AdminTasksPersistence.class)
	protected AdminTasksPersistence adminTasksPersistence;
	@BeanReference(type = UserAccessRequestLocalService.class)
	protected UserAccessRequestLocalService userAccessRequestLocalService;
	@BeanReference(type = UserAccessRequestPersistence.class)
	protected UserAccessRequestPersistence userAccessRequestPersistence;
	@BeanReference(type = com.delphi.userprofile.service.UserProfileLocalService.class)
	protected com.delphi.userprofile.service.UserProfileLocalService userProfileLocalService;
	@BeanReference(type = UserProfilePersistence.class)
	protected UserProfilePersistence userProfilePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}