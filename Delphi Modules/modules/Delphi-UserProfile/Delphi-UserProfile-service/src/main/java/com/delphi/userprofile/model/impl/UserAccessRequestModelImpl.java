/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.delphi.userprofile.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.delphi.userprofile.model.UserAccessRequest;
import com.delphi.userprofile.model.UserAccessRequestModel;
import com.delphi.userprofile.model.UserAccessRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserAccessRequest service. Represents a row in the &quot;Delphi_UserAccessRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserAccessRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserAccessRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserAccessRequestImpl
 * @see UserAccessRequest
 * @see UserAccessRequestModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserAccessRequestModelImpl extends BaseModelImpl<UserAccessRequest>
	implements UserAccessRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user access request model instance should use the {@link UserAccessRequest} interface instead.
	 */
	public static final String TABLE_NAME = "Delphi_UserAccessRequest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "requestId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdById", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "portletAccess", Types.VARCHAR },
			{ "requestType", Types.VARCHAR },
			{ "responseType", Types.VARCHAR },
			{ "responseComment", Types.VARCHAR },
			{ "responseUser", Types.BIGINT },
			{ "activeState", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdById", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("portletAccess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("activeState", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table Delphi_UserAccessRequest (uuid_ VARCHAR(75) null,requestId LONG not null primary key,userId LONG,companyId LONG,createdById LONG,createDate DATE null,modifiedDate DATE null,portletAccess VARCHAR(75) null,requestType VARCHAR(75) null,responseType VARCHAR(75) null,responseComment VARCHAR(75) null,responseUser LONG,activeState INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Delphi_UserAccessRequest";
	public static final String ORDER_BY_JPQL = " ORDER BY userAccessRequest.requestId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Delphi_UserAccessRequest.requestId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.delphi.userprofile.model.UserAccessRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.delphi.userprofile.model.UserAccessRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.delphi.userprofile.model.UserAccessRequest"),
			true);
	public static final long ACTIVESTATE_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long REQUESTID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserAccessRequest toModel(UserAccessRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserAccessRequest model = new UserAccessRequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setRequestId(soapModel.getRequestId());
		model.setUserId(soapModel.getUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreatedById(soapModel.getCreatedById());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPortletAccess(soapModel.getPortletAccess());
		model.setRequestType(soapModel.getRequestType());
		model.setResponseType(soapModel.getResponseType());
		model.setResponseComment(soapModel.getResponseComment());
		model.setResponseUser(soapModel.getResponseUser());
		model.setActiveState(soapModel.getActiveState());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserAccessRequest> toModels(
		UserAccessRequestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserAccessRequest> models = new ArrayList<UserAccessRequest>(soapModels.length);

		for (UserAccessRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.delphi.userprofile.service.util.ServiceProps.get(
				"lock.expiration.time.com.delphi.userprofile.model.UserAccessRequest"));

	public UserAccessRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserAccessRequest.class;
	}

	@Override
	public String getModelClassName() {
		return UserAccessRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("requestId", getRequestId());
		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdById", getCreatedById());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("portletAccess", getPortletAccess());
		attributes.put("requestType", getRequestType());
		attributes.put("responseType", getResponseType());
		attributes.put("responseComment", getResponseComment());
		attributes.put("responseUser", getResponseUser());
		attributes.put("activeState", getActiveState());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long requestId = (Long)attributes.get("requestId");

		if (requestId != null) {
			setRequestId(requestId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdById = (Long)attributes.get("createdById");

		if (createdById != null) {
			setCreatedById(createdById);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String portletAccess = (String)attributes.get("portletAccess");

		if (portletAccess != null) {
			setPortletAccess(portletAccess);
		}

		String requestType = (String)attributes.get("requestType");

		if (requestType != null) {
			setRequestType(requestType);
		}

		String responseType = (String)attributes.get("responseType");

		if (responseType != null) {
			setResponseType(responseType);
		}

		String responseComment = (String)attributes.get("responseComment");

		if (responseComment != null) {
			setResponseComment(responseComment);
		}

		Long responseUser = (Long)attributes.get("responseUser");

		if (responseUser != null) {
			setResponseUser(responseUser);
		}

		Integer activeState = (Integer)attributes.get("activeState");

		if (activeState != null) {
			setActiveState(activeState);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRequestId() {
		return _requestId;
	}

	@Override
	public void setRequestId(long requestId) {
		_columnBitmask = -1L;

		_requestId = requestId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreatedById() {
		return _createdById;
	}

	@Override
	public void setCreatedById(long createdById) {
		_createdById = createdById;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPortletAccess() {
		if (_portletAccess == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletAccess;
		}
	}

	@Override
	public void setPortletAccess(String portletAccess) {
		_portletAccess = portletAccess;
	}

	@JSON
	@Override
	public String getRequestType() {
		if (_requestType == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestType;
		}
	}

	@Override
	public void setRequestType(String requestType) {
		_requestType = requestType;
	}

	@JSON
	@Override
	public String getResponseType() {
		if (_responseType == null) {
			return StringPool.BLANK;
		}
		else {
			return _responseType;
		}
	}

	@Override
	public void setResponseType(String responseType) {
		_responseType = responseType;
	}

	@JSON
	@Override
	public String getResponseComment() {
		if (_responseComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _responseComment;
		}
	}

	@Override
	public void setResponseComment(String responseComment) {
		_responseComment = responseComment;
	}

	@JSON
	@Override
	public long getResponseUser() {
		return _responseUser;
	}

	@Override
	public void setResponseUser(long responseUser) {
		_responseUser = responseUser;
	}

	@JSON
	@Override
	public int getActiveState() {
		return _activeState;
	}

	@Override
	public void setActiveState(int activeState) {
		_columnBitmask |= ACTIVESTATE_COLUMN_BITMASK;

		if (!_setOriginalActiveState) {
			_setOriginalActiveState = true;

			_originalActiveState = _activeState;
		}

		_activeState = activeState;
	}

	public int getOriginalActiveState() {
		return _originalActiveState;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				UserAccessRequest.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserAccessRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserAccessRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserAccessRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserAccessRequestImpl userAccessRequestImpl = new UserAccessRequestImpl();

		userAccessRequestImpl.setUuid(getUuid());
		userAccessRequestImpl.setRequestId(getRequestId());
		userAccessRequestImpl.setUserId(getUserId());
		userAccessRequestImpl.setCompanyId(getCompanyId());
		userAccessRequestImpl.setCreatedById(getCreatedById());
		userAccessRequestImpl.setCreateDate(getCreateDate());
		userAccessRequestImpl.setModifiedDate(getModifiedDate());
		userAccessRequestImpl.setPortletAccess(getPortletAccess());
		userAccessRequestImpl.setRequestType(getRequestType());
		userAccessRequestImpl.setResponseType(getResponseType());
		userAccessRequestImpl.setResponseComment(getResponseComment());
		userAccessRequestImpl.setResponseUser(getResponseUser());
		userAccessRequestImpl.setActiveState(getActiveState());

		userAccessRequestImpl.resetOriginalValues();

		return userAccessRequestImpl;
	}

	@Override
	public int compareTo(UserAccessRequest userAccessRequest) {
		int value = 0;

		if (getRequestId() < userAccessRequest.getRequestId()) {
			value = -1;
		}
		else if (getRequestId() > userAccessRequest.getRequestId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserAccessRequest)) {
			return false;
		}

		UserAccessRequest userAccessRequest = (UserAccessRequest)obj;

		long primaryKey = userAccessRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserAccessRequestModelImpl userAccessRequestModelImpl = this;

		userAccessRequestModelImpl._originalUuid = userAccessRequestModelImpl._uuid;

		userAccessRequestModelImpl._originalUserId = userAccessRequestModelImpl._userId;

		userAccessRequestModelImpl._setOriginalUserId = false;

		userAccessRequestModelImpl._originalCompanyId = userAccessRequestModelImpl._companyId;

		userAccessRequestModelImpl._setOriginalCompanyId = false;

		userAccessRequestModelImpl._setModifiedDate = false;

		userAccessRequestModelImpl._originalActiveState = userAccessRequestModelImpl._activeState;

		userAccessRequestModelImpl._setOriginalActiveState = false;

		userAccessRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserAccessRequest> toCacheModel() {
		UserAccessRequestCacheModel userAccessRequestCacheModel = new UserAccessRequestCacheModel();

		userAccessRequestCacheModel.uuid = getUuid();

		String uuid = userAccessRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userAccessRequestCacheModel.uuid = null;
		}

		userAccessRequestCacheModel.requestId = getRequestId();

		userAccessRequestCacheModel.userId = getUserId();

		userAccessRequestCacheModel.companyId = getCompanyId();

		userAccessRequestCacheModel.createdById = getCreatedById();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userAccessRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			userAccessRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userAccessRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userAccessRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userAccessRequestCacheModel.portletAccess = getPortletAccess();

		String portletAccess = userAccessRequestCacheModel.portletAccess;

		if ((portletAccess != null) && (portletAccess.length() == 0)) {
			userAccessRequestCacheModel.portletAccess = null;
		}

		userAccessRequestCacheModel.requestType = getRequestType();

		String requestType = userAccessRequestCacheModel.requestType;

		if ((requestType != null) && (requestType.length() == 0)) {
			userAccessRequestCacheModel.requestType = null;
		}

		userAccessRequestCacheModel.responseType = getResponseType();

		String responseType = userAccessRequestCacheModel.responseType;

		if ((responseType != null) && (responseType.length() == 0)) {
			userAccessRequestCacheModel.responseType = null;
		}

		userAccessRequestCacheModel.responseComment = getResponseComment();

		String responseComment = userAccessRequestCacheModel.responseComment;

		if ((responseComment != null) && (responseComment.length() == 0)) {
			userAccessRequestCacheModel.responseComment = null;
		}

		userAccessRequestCacheModel.responseUser = getResponseUser();

		userAccessRequestCacheModel.activeState = getActiveState();

		return userAccessRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", requestId=");
		sb.append(getRequestId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdById=");
		sb.append(getCreatedById());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", portletAccess=");
		sb.append(getPortletAccess());
		sb.append(", requestType=");
		sb.append(getRequestType());
		sb.append(", responseType=");
		sb.append(getResponseType());
		sb.append(", responseComment=");
		sb.append(getResponseComment());
		sb.append(", responseUser=");
		sb.append(getResponseUser());
		sb.append(", activeState=");
		sb.append(getActiveState());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.delphi.userprofile.model.UserAccessRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestId</column-name><column-value><![CDATA[");
		sb.append(getRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdById</column-name><column-value><![CDATA[");
		sb.append(getCreatedById());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletAccess</column-name><column-value><![CDATA[");
		sb.append(getPortletAccess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestType</column-name><column-value><![CDATA[");
		sb.append(getRequestType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responseType</column-name><column-value><![CDATA[");
		sb.append(getResponseType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responseComment</column-name><column-value><![CDATA[");
		sb.append(getResponseComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responseUser</column-name><column-value><![CDATA[");
		sb.append(getResponseUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeState</column-name><column-value><![CDATA[");
		sb.append(getActiveState());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserAccessRequest.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserAccessRequest.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _requestId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdById;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _portletAccess;
	private String _requestType;
	private String _responseType;
	private String _responseComment;
	private long _responseUser;
	private int _activeState;
	private int _originalActiveState;
	private boolean _setOriginalActiveState;
	private long _columnBitmask;
	private UserAccessRequest _escapedModel;
}