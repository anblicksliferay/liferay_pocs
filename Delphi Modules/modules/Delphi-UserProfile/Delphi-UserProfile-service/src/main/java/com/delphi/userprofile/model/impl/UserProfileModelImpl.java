/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.delphi.userprofile.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.delphi.userprofile.model.UserProfile;
import com.delphi.userprofile.model.UserProfileModel;
import com.delphi.userprofile.model.UserProfileSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserProfile service. Represents a row in the &quot;Delphi_UserProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserProfileImpl
 * @see UserProfile
 * @see UserProfileModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserProfileModelImpl extends BaseModelImpl<UserProfile>
	implements UserProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user profile model instance should use the {@link UserProfile} interface instead.
	 */
	public static final String TABLE_NAME = "Delphi_UserProfile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "profileId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdById", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "communicationPreferences", Types.VARCHAR },
			{ "region", Types.VARCHAR },
			{ "site", Types.VARCHAR },
			{ "server", Types.VARCHAR },
			{ "division", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "timezone", Types.VARCHAR },
			{ "workHours", Types.VARCHAR },
			{ "jobrole", Types.VARCHAR },
			{ "interests", Types.VARCHAR },
			{ "portlets", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdById", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("communicationPreferences", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("region", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("site", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("server", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timezone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workHours", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobrole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("interests", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portlets", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Delphi_UserProfile (uuid_ VARCHAR(75) null,profileId LONG not null primary key,userId LONG,companyId LONG,createdById LONG,createDate DATE null,modifiedDate DATE null,communicationPreferences VARCHAR(500) null,region VARCHAR(75) null,site VARCHAR(75) null,server VARCHAR(75) null,division VARCHAR(75) null,language VARCHAR(75) null,timezone VARCHAR(75) null,workHours VARCHAR(500) null,jobrole VARCHAR(500) null,interests VARCHAR(500) null,portlets VARCHAR(500) null)";
	public static final String TABLE_SQL_DROP = "drop table Delphi_UserProfile";
	public static final String ORDER_BY_JPQL = " ORDER BY userProfile.profileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Delphi_UserProfile.profileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.delphi.userprofile.model.UserProfile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.delphi.userprofile.model.UserProfile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.delphi.userprofile.model.UserProfile"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long JOBROLE_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long PROFILEID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserProfile toModel(UserProfileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserProfile model = new UserProfileImpl();

		model.setUuid(soapModel.getUuid());
		model.setProfileId(soapModel.getProfileId());
		model.setUserId(soapModel.getUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreatedById(soapModel.getCreatedById());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCommunicationPreferences(soapModel.getCommunicationPreferences());
		model.setRegion(soapModel.getRegion());
		model.setSite(soapModel.getSite());
		model.setServer(soapModel.getServer());
		model.setDivision(soapModel.getDivision());
		model.setLanguage(soapModel.getLanguage());
		model.setTimezone(soapModel.getTimezone());
		model.setWorkHours(soapModel.getWorkHours());
		model.setJobrole(soapModel.getJobrole());
		model.setInterests(soapModel.getInterests());
		model.setPortlets(soapModel.getPortlets());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserProfile> toModels(UserProfileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserProfile> models = new ArrayList<UserProfile>(soapModels.length);

		for (UserProfileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.delphi.userprofile.service.util.ServiceProps.get(
				"lock.expiration.time.com.delphi.userprofile.model.UserProfile"));

	public UserProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _profileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProfileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _profileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserProfile.class;
	}

	@Override
	public String getModelClassName() {
		return UserProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("profileId", getProfileId());
		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdById", getCreatedById());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("communicationPreferences", getCommunicationPreferences());
		attributes.put("region", getRegion());
		attributes.put("site", getSite());
		attributes.put("server", getServer());
		attributes.put("division", getDivision());
		attributes.put("language", getLanguage());
		attributes.put("timezone", getTimezone());
		attributes.put("workHours", getWorkHours());
		attributes.put("jobrole", getJobrole());
		attributes.put("interests", getInterests());
		attributes.put("portlets", getPortlets());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long profileId = (Long)attributes.get("profileId");

		if (profileId != null) {
			setProfileId(profileId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdById = (Long)attributes.get("createdById");

		if (createdById != null) {
			setCreatedById(createdById);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String communicationPreferences = (String)attributes.get(
				"communicationPreferences");

		if (communicationPreferences != null) {
			setCommunicationPreferences(communicationPreferences);
		}

		String region = (String)attributes.get("region");

		if (region != null) {
			setRegion(region);
		}

		String site = (String)attributes.get("site");

		if (site != null) {
			setSite(site);
		}

		String server = (String)attributes.get("server");

		if (server != null) {
			setServer(server);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		String timezone = (String)attributes.get("timezone");

		if (timezone != null) {
			setTimezone(timezone);
		}

		String workHours = (String)attributes.get("workHours");

		if (workHours != null) {
			setWorkHours(workHours);
		}

		String jobrole = (String)attributes.get("jobrole");

		if (jobrole != null) {
			setJobrole(jobrole);
		}

		String interests = (String)attributes.get("interests");

		if (interests != null) {
			setInterests(interests);
		}

		String portlets = (String)attributes.get("portlets");

		if (portlets != null) {
			setPortlets(portlets);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProfileId() {
		return _profileId;
	}

	@Override
	public void setProfileId(long profileId) {
		_columnBitmask = -1L;

		_profileId = profileId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreatedById() {
		return _createdById;
	}

	@Override
	public void setCreatedById(long createdById) {
		_createdById = createdById;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCommunicationPreferences() {
		if (_communicationPreferences == null) {
			return StringPool.BLANK;
		}
		else {
			return _communicationPreferences;
		}
	}

	@Override
	public void setCommunicationPreferences(String communicationPreferences) {
		_communicationPreferences = communicationPreferences;
	}

	@JSON
	@Override
	public String getRegion() {
		if (_region == null) {
			return StringPool.BLANK;
		}
		else {
			return _region;
		}
	}

	@Override
	public void setRegion(String region) {
		_region = region;
	}

	@JSON
	@Override
	public String getSite() {
		if (_site == null) {
			return StringPool.BLANK;
		}
		else {
			return _site;
		}
	}

	@Override
	public void setSite(String site) {
		_site = site;
	}

	@JSON
	@Override
	public String getServer() {
		if (_server == null) {
			return StringPool.BLANK;
		}
		else {
			return _server;
		}
	}

	@Override
	public void setServer(String server) {
		_server = server;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@JSON
	@Override
	public String getTimezone() {
		if (_timezone == null) {
			return StringPool.BLANK;
		}
		else {
			return _timezone;
		}
	}

	@Override
	public void setTimezone(String timezone) {
		_timezone = timezone;
	}

	@JSON
	@Override
	public String getWorkHours() {
		if (_workHours == null) {
			return StringPool.BLANK;
		}
		else {
			return _workHours;
		}
	}

	@Override
	public void setWorkHours(String workHours) {
		_workHours = workHours;
	}

	@JSON
	@Override
	public String getJobrole() {
		if (_jobrole == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobrole;
		}
	}

	@Override
	public void setJobrole(String jobrole) {
		_columnBitmask |= JOBROLE_COLUMN_BITMASK;

		if (_originalJobrole == null) {
			_originalJobrole = _jobrole;
		}

		_jobrole = jobrole;
	}

	public String getOriginalJobrole() {
		return GetterUtil.getString(_originalJobrole);
	}

	@JSON
	@Override
	public String getInterests() {
		if (_interests == null) {
			return StringPool.BLANK;
		}
		else {
			return _interests;
		}
	}

	@Override
	public void setInterests(String interests) {
		_interests = interests;
	}

	@JSON
	@Override
	public String getPortlets() {
		if (_portlets == null) {
			return StringPool.BLANK;
		}
		else {
			return _portlets;
		}
	}

	@Override
	public void setPortlets(String portlets) {
		_portlets = portlets;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				UserProfile.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserProfile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserProfile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserProfile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserProfileImpl userProfileImpl = new UserProfileImpl();

		userProfileImpl.setUuid(getUuid());
		userProfileImpl.setProfileId(getProfileId());
		userProfileImpl.setUserId(getUserId());
		userProfileImpl.setCompanyId(getCompanyId());
		userProfileImpl.setCreatedById(getCreatedById());
		userProfileImpl.setCreateDate(getCreateDate());
		userProfileImpl.setModifiedDate(getModifiedDate());
		userProfileImpl.setCommunicationPreferences(getCommunicationPreferences());
		userProfileImpl.setRegion(getRegion());
		userProfileImpl.setSite(getSite());
		userProfileImpl.setServer(getServer());
		userProfileImpl.setDivision(getDivision());
		userProfileImpl.setLanguage(getLanguage());
		userProfileImpl.setTimezone(getTimezone());
		userProfileImpl.setWorkHours(getWorkHours());
		userProfileImpl.setJobrole(getJobrole());
		userProfileImpl.setInterests(getInterests());
		userProfileImpl.setPortlets(getPortlets());

		userProfileImpl.resetOriginalValues();

		return userProfileImpl;
	}

	@Override
	public int compareTo(UserProfile userProfile) {
		int value = 0;

		if (getProfileId() < userProfile.getProfileId()) {
			value = -1;
		}
		else if (getProfileId() > userProfile.getProfileId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserProfile)) {
			return false;
		}

		UserProfile userProfile = (UserProfile)obj;

		long primaryKey = userProfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserProfileModelImpl userProfileModelImpl = this;

		userProfileModelImpl._originalUuid = userProfileModelImpl._uuid;

		userProfileModelImpl._originalUserId = userProfileModelImpl._userId;

		userProfileModelImpl._setOriginalUserId = false;

		userProfileModelImpl._originalCompanyId = userProfileModelImpl._companyId;

		userProfileModelImpl._setOriginalCompanyId = false;

		userProfileModelImpl._setModifiedDate = false;

		userProfileModelImpl._originalJobrole = userProfileModelImpl._jobrole;

		userProfileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserProfile> toCacheModel() {
		UserProfileCacheModel userProfileCacheModel = new UserProfileCacheModel();

		userProfileCacheModel.uuid = getUuid();

		String uuid = userProfileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userProfileCacheModel.uuid = null;
		}

		userProfileCacheModel.profileId = getProfileId();

		userProfileCacheModel.userId = getUserId();

		userProfileCacheModel.companyId = getCompanyId();

		userProfileCacheModel.createdById = getCreatedById();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userProfileCacheModel.createDate = createDate.getTime();
		}
		else {
			userProfileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userProfileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userProfileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userProfileCacheModel.communicationPreferences = getCommunicationPreferences();

		String communicationPreferences = userProfileCacheModel.communicationPreferences;

		if ((communicationPreferences != null) &&
				(communicationPreferences.length() == 0)) {
			userProfileCacheModel.communicationPreferences = null;
		}

		userProfileCacheModel.region = getRegion();

		String region = userProfileCacheModel.region;

		if ((region != null) && (region.length() == 0)) {
			userProfileCacheModel.region = null;
		}

		userProfileCacheModel.site = getSite();

		String site = userProfileCacheModel.site;

		if ((site != null) && (site.length() == 0)) {
			userProfileCacheModel.site = null;
		}

		userProfileCacheModel.server = getServer();

		String server = userProfileCacheModel.server;

		if ((server != null) && (server.length() == 0)) {
			userProfileCacheModel.server = null;
		}

		userProfileCacheModel.division = getDivision();

		String division = userProfileCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			userProfileCacheModel.division = null;
		}

		userProfileCacheModel.language = getLanguage();

		String language = userProfileCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			userProfileCacheModel.language = null;
		}

		userProfileCacheModel.timezone = getTimezone();

		String timezone = userProfileCacheModel.timezone;

		if ((timezone != null) && (timezone.length() == 0)) {
			userProfileCacheModel.timezone = null;
		}

		userProfileCacheModel.workHours = getWorkHours();

		String workHours = userProfileCacheModel.workHours;

		if ((workHours != null) && (workHours.length() == 0)) {
			userProfileCacheModel.workHours = null;
		}

		userProfileCacheModel.jobrole = getJobrole();

		String jobrole = userProfileCacheModel.jobrole;

		if ((jobrole != null) && (jobrole.length() == 0)) {
			userProfileCacheModel.jobrole = null;
		}

		userProfileCacheModel.interests = getInterests();

		String interests = userProfileCacheModel.interests;

		if ((interests != null) && (interests.length() == 0)) {
			userProfileCacheModel.interests = null;
		}

		userProfileCacheModel.portlets = getPortlets();

		String portlets = userProfileCacheModel.portlets;

		if ((portlets != null) && (portlets.length() == 0)) {
			userProfileCacheModel.portlets = null;
		}

		return userProfileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", profileId=");
		sb.append(getProfileId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdById=");
		sb.append(getCreatedById());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", communicationPreferences=");
		sb.append(getCommunicationPreferences());
		sb.append(", region=");
		sb.append(getRegion());
		sb.append(", site=");
		sb.append(getSite());
		sb.append(", server=");
		sb.append(getServer());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", timezone=");
		sb.append(getTimezone());
		sb.append(", workHours=");
		sb.append(getWorkHours());
		sb.append(", jobrole=");
		sb.append(getJobrole());
		sb.append(", interests=");
		sb.append(getInterests());
		sb.append(", portlets=");
		sb.append(getPortlets());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.delphi.userprofile.model.UserProfile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileId</column-name><column-value><![CDATA[");
		sb.append(getProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdById</column-name><column-value><![CDATA[");
		sb.append(getCreatedById());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>communicationPreferences</column-name><column-value><![CDATA[");
		sb.append(getCommunicationPreferences());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region</column-name><column-value><![CDATA[");
		sb.append(getRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>site</column-name><column-value><![CDATA[");
		sb.append(getSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>server</column-name><column-value><![CDATA[");
		sb.append(getServer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timezone</column-name><column-value><![CDATA[");
		sb.append(getTimezone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workHours</column-name><column-value><![CDATA[");
		sb.append(getWorkHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobrole</column-name><column-value><![CDATA[");
		sb.append(getJobrole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interests</column-name><column-value><![CDATA[");
		sb.append(getInterests());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portlets</column-name><column-value><![CDATA[");
		sb.append(getPortlets());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserProfile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserProfile.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _profileId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdById;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _communicationPreferences;
	private String _region;
	private String _site;
	private String _server;
	private String _division;
	private String _language;
	private String _timezone;
	private String _workHours;
	private String _jobrole;
	private String _originalJobrole;
	private String _interests;
	private String _portlets;
	private long _columnBitmask;
	private UserProfile _escapedModel;
}