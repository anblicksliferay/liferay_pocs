/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.delphi.userprofile.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.delphi.userprofile.model.AdminTasks;
import com.delphi.userprofile.model.AdminTasksModel;
import com.delphi.userprofile.model.AdminTasksSoap;
import com.delphi.userprofile.service.persistence.AdminTasksPK;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AdminTasks service. Represents a row in the &quot;Delphi_AdminTasks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AdminTasksModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdminTasksImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AdminTasksImpl
 * @see AdminTasks
 * @see AdminTasksModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AdminTasksModelImpl extends BaseModelImpl<AdminTasks>
	implements AdminTasksModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a admin tasks model instance should use the {@link AdminTasks} interface instead.
	 */
	public static final String TABLE_NAME = "Delphi_AdminTasks";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "adminTaskId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "systemAlert", Types.BOOLEAN },
			{ "messageText", Types.VARCHAR },
			{ "postOnPortBanner", Types.BOOLEAN },
			{ "siteAlert", Types.BOOLEAN },
			{ "siteName", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "createdById", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("adminTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("systemAlert", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("messageText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postOnPortBanner", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("siteAlert", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("siteName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdById", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table Delphi_AdminTasks (uuid_ VARCHAR(75) null,adminTaskId LONG not null,userId LONG not null,systemAlert BOOLEAN,messageText VARCHAR(75) null,postOnPortBanner BOOLEAN,siteAlert BOOLEAN,siteName VARCHAR(75) null,companyId LONG,createdById LONG,createDate DATE null,modifiedDate DATE null,primary key (adminTaskId, userId))";
	public static final String TABLE_SQL_DROP = "drop table Delphi_AdminTasks";
	public static final String ORDER_BY_JPQL = " ORDER BY adminTasks.id.adminTaskId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Delphi_AdminTasks.adminTaskId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.delphi.userprofile.model.AdminTasks"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.delphi.userprofile.model.AdminTasks"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.delphi.userprofile.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.delphi.userprofile.model.AdminTasks"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ADMINTASKID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AdminTasks toModel(AdminTasksSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AdminTasks model = new AdminTasksImpl();

		model.setUuid(soapModel.getUuid());
		model.setAdminTaskId(soapModel.getAdminTaskId());
		model.setUserId(soapModel.getUserId());
		model.setSystemAlert(soapModel.getSystemAlert());
		model.setMessageText(soapModel.getMessageText());
		model.setPostOnPortBanner(soapModel.getPostOnPortBanner());
		model.setSiteAlert(soapModel.getSiteAlert());
		model.setSiteName(soapModel.getSiteName());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreatedById(soapModel.getCreatedById());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AdminTasks> toModels(AdminTasksSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AdminTasks> models = new ArrayList<AdminTasks>(soapModels.length);

		for (AdminTasksSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.delphi.userprofile.service.util.ServiceProps.get(
				"lock.expiration.time.com.delphi.userprofile.model.AdminTasks"));

	public AdminTasksModelImpl() {
	}

	@Override
	public AdminTasksPK getPrimaryKey() {
		return new AdminTasksPK(_adminTaskId, _userId);
	}

	@Override
	public void setPrimaryKey(AdminTasksPK primaryKey) {
		setAdminTaskId(primaryKey.adminTaskId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AdminTasksPK(_adminTaskId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AdminTasksPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AdminTasks.class;
	}

	@Override
	public String getModelClassName() {
		return AdminTasks.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("adminTaskId", getAdminTaskId());
		attributes.put("userId", getUserId());
		attributes.put("systemAlert", getSystemAlert());
		attributes.put("messageText", getMessageText());
		attributes.put("postOnPortBanner", getPostOnPortBanner());
		attributes.put("siteAlert", getSiteAlert());
		attributes.put("siteName", getSiteName());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdById", getCreatedById());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long adminTaskId = (Long)attributes.get("adminTaskId");

		if (adminTaskId != null) {
			setAdminTaskId(adminTaskId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Boolean systemAlert = (Boolean)attributes.get("systemAlert");

		if (systemAlert != null) {
			setSystemAlert(systemAlert);
		}

		String messageText = (String)attributes.get("messageText");

		if (messageText != null) {
			setMessageText(messageText);
		}

		Boolean postOnPortBanner = (Boolean)attributes.get("postOnPortBanner");

		if (postOnPortBanner != null) {
			setPostOnPortBanner(postOnPortBanner);
		}

		Boolean siteAlert = (Boolean)attributes.get("siteAlert");

		if (siteAlert != null) {
			setSiteAlert(siteAlert);
		}

		String siteName = (String)attributes.get("siteName");

		if (siteName != null) {
			setSiteName(siteName);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdById = (Long)attributes.get("createdById");

		if (createdById != null) {
			setCreatedById(createdById);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAdminTaskId() {
		return _adminTaskId;
	}

	@Override
	public void setAdminTaskId(long adminTaskId) {
		_columnBitmask = -1L;

		_adminTaskId = adminTaskId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public boolean getSystemAlert() {
		return _systemAlert;
	}

	@JSON
	@Override
	public boolean isSystemAlert() {
		return _systemAlert;
	}

	@Override
	public void setSystemAlert(boolean systemAlert) {
		_systemAlert = systemAlert;
	}

	@JSON
	@Override
	public String getMessageText() {
		if (_messageText == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageText;
		}
	}

	@Override
	public void setMessageText(String messageText) {
		_messageText = messageText;
	}

	@JSON
	@Override
	public boolean getPostOnPortBanner() {
		return _postOnPortBanner;
	}

	@JSON
	@Override
	public boolean isPostOnPortBanner() {
		return _postOnPortBanner;
	}

	@Override
	public void setPostOnPortBanner(boolean postOnPortBanner) {
		_postOnPortBanner = postOnPortBanner;
	}

	@JSON
	@Override
	public boolean getSiteAlert() {
		return _siteAlert;
	}

	@JSON
	@Override
	public boolean isSiteAlert() {
		return _siteAlert;
	}

	@Override
	public void setSiteAlert(boolean siteAlert) {
		_siteAlert = siteAlert;
	}

	@JSON
	@Override
	public String getSiteName() {
		if (_siteName == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteName;
		}
	}

	@Override
	public void setSiteName(String siteName) {
		_siteName = siteName;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreatedById() {
		return _createdById;
	}

	@Override
	public void setCreatedById(long createdById) {
		_createdById = createdById;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				AdminTasks.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AdminTasks toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdminTasks)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdminTasksImpl adminTasksImpl = new AdminTasksImpl();

		adminTasksImpl.setUuid(getUuid());
		adminTasksImpl.setAdminTaskId(getAdminTaskId());
		adminTasksImpl.setUserId(getUserId());
		adminTasksImpl.setSystemAlert(getSystemAlert());
		adminTasksImpl.setMessageText(getMessageText());
		adminTasksImpl.setPostOnPortBanner(getPostOnPortBanner());
		adminTasksImpl.setSiteAlert(getSiteAlert());
		adminTasksImpl.setSiteName(getSiteName());
		adminTasksImpl.setCompanyId(getCompanyId());
		adminTasksImpl.setCreatedById(getCreatedById());
		adminTasksImpl.setCreateDate(getCreateDate());
		adminTasksImpl.setModifiedDate(getModifiedDate());

		adminTasksImpl.resetOriginalValues();

		return adminTasksImpl;
	}

	@Override
	public int compareTo(AdminTasks adminTasks) {
		int value = 0;

		if (getAdminTaskId() < adminTasks.getAdminTaskId()) {
			value = -1;
		}
		else if (getAdminTaskId() > adminTasks.getAdminTaskId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdminTasks)) {
			return false;
		}

		AdminTasks adminTasks = (AdminTasks)obj;

		AdminTasksPK primaryKey = adminTasks.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AdminTasksModelImpl adminTasksModelImpl = this;

		adminTasksModelImpl._originalUuid = adminTasksModelImpl._uuid;

		adminTasksModelImpl._originalCompanyId = adminTasksModelImpl._companyId;

		adminTasksModelImpl._setOriginalCompanyId = false;

		adminTasksModelImpl._setModifiedDate = false;

		adminTasksModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdminTasks> toCacheModel() {
		AdminTasksCacheModel adminTasksCacheModel = new AdminTasksCacheModel();

		adminTasksCacheModel.adminTasksPK = getPrimaryKey();

		adminTasksCacheModel.uuid = getUuid();

		String uuid = adminTasksCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			adminTasksCacheModel.uuid = null;
		}

		adminTasksCacheModel.adminTaskId = getAdminTaskId();

		adminTasksCacheModel.userId = getUserId();

		adminTasksCacheModel.systemAlert = getSystemAlert();

		adminTasksCacheModel.messageText = getMessageText();

		String messageText = adminTasksCacheModel.messageText;

		if ((messageText != null) && (messageText.length() == 0)) {
			adminTasksCacheModel.messageText = null;
		}

		adminTasksCacheModel.postOnPortBanner = getPostOnPortBanner();

		adminTasksCacheModel.siteAlert = getSiteAlert();

		adminTasksCacheModel.siteName = getSiteName();

		String siteName = adminTasksCacheModel.siteName;

		if ((siteName != null) && (siteName.length() == 0)) {
			adminTasksCacheModel.siteName = null;
		}

		adminTasksCacheModel.companyId = getCompanyId();

		adminTasksCacheModel.createdById = getCreatedById();

		Date createDate = getCreateDate();

		if (createDate != null) {
			adminTasksCacheModel.createDate = createDate.getTime();
		}
		else {
			adminTasksCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			adminTasksCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			adminTasksCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return adminTasksCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", adminTaskId=");
		sb.append(getAdminTaskId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", systemAlert=");
		sb.append(getSystemAlert());
		sb.append(", messageText=");
		sb.append(getMessageText());
		sb.append(", postOnPortBanner=");
		sb.append(getPostOnPortBanner());
		sb.append(", siteAlert=");
		sb.append(getSiteAlert());
		sb.append(", siteName=");
		sb.append(getSiteName());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdById=");
		sb.append(getCreatedById());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.delphi.userprofile.model.AdminTasks");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminTaskId</column-name><column-value><![CDATA[");
		sb.append(getAdminTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>systemAlert</column-name><column-value><![CDATA[");
		sb.append(getSystemAlert());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageText</column-name><column-value><![CDATA[");
		sb.append(getMessageText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postOnPortBanner</column-name><column-value><![CDATA[");
		sb.append(getPostOnPortBanner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteAlert</column-name><column-value><![CDATA[");
		sb.append(getSiteAlert());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteName</column-name><column-value><![CDATA[");
		sb.append(getSiteName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdById</column-name><column-value><![CDATA[");
		sb.append(getCreatedById());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AdminTasks.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AdminTasks.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _adminTaskId;
	private long _userId;
	private boolean _systemAlert;
	private String _messageText;
	private boolean _postOnPortBanner;
	private boolean _siteAlert;
	private String _siteName;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdById;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private AdminTasks _escapedModel;
}