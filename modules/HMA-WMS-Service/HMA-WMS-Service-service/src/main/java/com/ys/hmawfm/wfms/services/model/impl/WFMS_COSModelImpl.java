/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ys.hmawfm.wfms.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.ys.hmawfm.wfms.services.model.WFMS_COS;
import com.ys.hmawfm.wfms.services.model.WFMS_COSModel;
import com.ys.hmawfm.wfms.services.model.WFMS_COSSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WFMS_COS service. Represents a row in the &quot;WFMS_COS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WFMS_COSModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WFMS_COSImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WFMS_COSImpl
 * @see WFMS_COS
 * @see WFMS_COSModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WFMS_COSModelImpl extends BaseModelImpl<WFMS_COS>
	implements WFMS_COSModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a WFMS_COS model instance should use the {@link WFMS_COS} interface instead.
	 */
	public static final String TABLE_NAME = "WFMS_COS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cosId", Types.VARCHAR },
			{ "assoicateId", Types.VARCHAR },
			{ "newPositionNumber", Types.VARCHAR },
			{ "action", Types.VARCHAR },
			{ "reasonCODE", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "changeDescription", Types.VARCHAR },
			{ "newJobCode", Types.VARCHAR },
			{ "sameJobCode", Types.VARCHAR },
			{ "sameLeadership", Types.VARCHAR },
			{ "sameDept", Types.VARCHAR },
			{ "sameMgr", Types.VARCHAR },
			{ "routingProcess", Types.VARCHAR },
			{ "notificationTo", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "effectiveDate", Types.VARCHAR },
			{ "teamNumber", Types.VARCHAR },
			{ "shiftCode", Types.VARCHAR },
			{ "mgrAssociateNumber", Types.VARCHAR },
			{ "manpowerCategiry", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "leadershipAssignment", Types.VARCHAR },
			{ "associateDateOfHire", Types.VARCHAR },
			{ "newDivision", Types.VARCHAR },
			{ "newDivisionManager", Types.VARCHAR },
			{ "newDepartmentName", Types.VARCHAR },
			{ "newDepartmentNumber", Types.VARCHAR },
			{ "newDepartmentManager", Types.VARCHAR },
			{ "newManagerName", Types.VARCHAR },
			{ "newManagerTitle", Types.VARCHAR },
			{ "deleteflagStatus", Types.INTEGER },
			{ "RequistionId", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "scopeGroupId", Types.BIGINT },
			{ "createdBy", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "associatename", Types.VARCHAR },
			{ "relatesTo", Types.VARCHAR },
			{ "nextApprover", Types.VARCHAR },
			{ "roleOfApprover", Types.VARCHAR },
			{ "approverList", Types.VARCHAR },
			{ "approverStep", Types.INTEGER },
			{ "workflow", Types.VARCHAR },
			{ "workflowStep", Types.INTEGER },
			{ "workflowId", Types.VARCHAR },
			{ "dummy", Types.VARCHAR },
			{ "refCosId", Types.VARCHAR },
			{ "systemGenerated", Types.INTEGER },
			{ "positionNumber", Types.VARCHAR },
			{ "currentJobCode", Types.VARCHAR },
			{ "currentDivision", Types.VARCHAR },
			{ "currentDivisionManager", Types.VARCHAR },
			{ "currentDepartmentName", Types.VARCHAR },
			{ "currentDepartmentNumber", Types.VARCHAR },
			{ "currentDepartmentManager", Types.VARCHAR },
			{ "currentManagerName", Types.VARCHAR },
			{ "currentManagerTitle", Types.VARCHAR },
			{ "currentTeamNumber", Types.VARCHAR },
			{ "currentShiftCode", Types.VARCHAR },
			{ "currentLeadershipAssignment", Types.VARCHAR },
			{ "currentManpowerRep", Types.VARCHAR },
			{ "currentManagerAssocNumber", Types.VARCHAR },
			{ "sortApprovedList", Types.VARCHAR },
			{ "DuplicateApprovedList", Types.VARCHAR },
			{ "DuplicateApprovedListStartIndex", Types.INTEGER },
			{ "DuplicateApprovedListEndIndex", Types.INTEGER },
			{ "announced", Types.INTEGER },
			{ "currentPositionText", Types.INTEGER },
			{ "DuplicateCounter", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cosId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assoicateId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newPositionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("action", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonCODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("changeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newJobCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sameJobCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sameLeadership", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sameDept", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sameMgr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("routingProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notificationTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("effectiveDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("teamNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shiftCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mgrAssociateNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manpowerCategiry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leadershipAssignment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("associateDateOfHire", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newDivision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newDivisionManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newDepartmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newDepartmentNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newDepartmentManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newManagerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newManagerTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deleteflagStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("RequistionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scopeGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("associatename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("relatesTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nextApprover", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roleOfApprover", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approverList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approverStep", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("workflow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workflowStep", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("workflowId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dummy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("refCosId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("systemGenerated", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("positionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentJobCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentDivision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentDivisionManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentDepartmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentDepartmentNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentDepartmentManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentManagerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentManagerTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentTeamNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentShiftCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentLeadershipAssignment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentManpowerRep", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentManagerAssocNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sortApprovedList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DuplicateApprovedList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DuplicateApprovedListStartIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DuplicateApprovedListEndIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("announced", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("currentPositionText", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DuplicateCounter", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table WFMS_COS (cosId VARCHAR(75) not null primary key,assoicateId VARCHAR(75) null,newPositionNumber VARCHAR(75) null,action VARCHAR(75) null,reasonCODE VARCHAR(75) null,description TEXT null,changeDescription VARCHAR(75) null,newJobCode VARCHAR(75) null,sameJobCode VARCHAR(75) null,sameLeadership VARCHAR(75) null,sameDept VARCHAR(75) null,sameMgr VARCHAR(75) null,routingProcess VARCHAR(255) null,notificationTo VARCHAR(255) null,status VARCHAR(75) null,type_ VARCHAR(75) null,effectiveDate VARCHAR(75) null,teamNumber VARCHAR(75) null,shiftCode VARCHAR(75) null,mgrAssociateNumber VARCHAR(75) null,manpowerCategiry VARCHAR(75) null,comments TEXT null,leadershipAssignment VARCHAR(75) null,associateDateOfHire VARCHAR(75) null,newDivision VARCHAR(75) null,newDivisionManager VARCHAR(75) null,newDepartmentName VARCHAR(75) null,newDepartmentNumber VARCHAR(75) null,newDepartmentManager VARCHAR(75) null,newManagerName VARCHAR(75) null,newManagerTitle VARCHAR(75) null,deleteflagStatus INTEGER,RequistionId VARCHAR(75) null,companyId LONG,scopeGroupId LONG,createdBy VARCHAR(75) null,createDate DATE null,modifiedBy VARCHAR(75) null,modifiedDate DATE null,associatename VARCHAR(75) null,relatesTo VARCHAR(75) null,nextApprover TEXT null,roleOfApprover VARCHAR(75) null,approverList VARCHAR(255) null,approverStep INTEGER,workflow VARCHAR(75) null,workflowStep INTEGER,workflowId VARCHAR(75) null,dummy VARCHAR(75) null,refCosId VARCHAR(75) null,systemGenerated INTEGER,positionNumber VARCHAR(75) null,currentJobCode VARCHAR(75) null,currentDivision VARCHAR(75) null,currentDivisionManager VARCHAR(75) null,currentDepartmentName VARCHAR(75) null,currentDepartmentNumber VARCHAR(75) null,currentDepartmentManager VARCHAR(75) null,currentManagerName VARCHAR(75) null,currentManagerTitle VARCHAR(75) null,currentTeamNumber VARCHAR(75) null,currentShiftCode VARCHAR(75) null,currentLeadershipAssignment VARCHAR(75) null,currentManpowerRep VARCHAR(75) null,currentManagerAssocNumber VARCHAR(75) null,sortApprovedList VARCHAR(1500) null,DuplicateApprovedList VARCHAR(1500) null,DuplicateApprovedListStartIndex INTEGER,DuplicateApprovedListEndIndex INTEGER,announced INTEGER,currentPositionText INTEGER,DuplicateCounter INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table WFMS_COS";
	public static final String ORDER_BY_JPQL = " ORDER BY wfms_cos.cosId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WFMS_COS.cosId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ys.hmawfm.wfms.services.model.WFMS_COS"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ys.hmawfm.wfms.services.model.WFMS_COS"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ys.hmawfm.wfms.services.model.WFMS_COS"),
			true);
	public static final long ACTION_COLUMN_BITMASK = 1L;
	public static final long ASSOICATEID_COLUMN_BITMASK = 2L;
	public static final long COSID_COLUMN_BITMASK = 4L;
	public static final long NEWPOSITIONNUMBER_COLUMN_BITMASK = 8L;
	public static final long NEXTAPPROVER_COLUMN_BITMASK = 16L;
	public static final long POSITIONNUMBER_COLUMN_BITMASK = 32L;
	public static final long ROLEOFAPPROVER_COLUMN_BITMASK = 64L;
	public static final long STATUS_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WFMS_COS toModel(WFMS_COSSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WFMS_COS model = new WFMS_COSImpl();

		model.setCosId(soapModel.getCosId());
		model.setAssoicateId(soapModel.getAssoicateId());
		model.setNewPositionNumber(soapModel.getNewPositionNumber());
		model.setAction(soapModel.getAction());
		model.setReasonCODE(soapModel.getReasonCODE());
		model.setDescription(soapModel.getDescription());
		model.setChangeDescription(soapModel.getChangeDescription());
		model.setNewJobCode(soapModel.getNewJobCode());
		model.setSameJobCode(soapModel.getSameJobCode());
		model.setSameLeadership(soapModel.getSameLeadership());
		model.setSameDept(soapModel.getSameDept());
		model.setSameMgr(soapModel.getSameMgr());
		model.setRoutingProcess(soapModel.getRoutingProcess());
		model.setNotificationTo(soapModel.getNotificationTo());
		model.setStatus(soapModel.getStatus());
		model.setType(soapModel.getType());
		model.setEffectiveDate(soapModel.getEffectiveDate());
		model.setTeamNumber(soapModel.getTeamNumber());
		model.setShiftCode(soapModel.getShiftCode());
		model.setMgrAssociateNumber(soapModel.getMgrAssociateNumber());
		model.setManpowerCategiry(soapModel.getManpowerCategiry());
		model.setComments(soapModel.getComments());
		model.setLeadershipAssignment(soapModel.getLeadershipAssignment());
		model.setAssociateDateOfHire(soapModel.getAssociateDateOfHire());
		model.setNewDivision(soapModel.getNewDivision());
		model.setNewDivisionManager(soapModel.getNewDivisionManager());
		model.setNewDepartmentName(soapModel.getNewDepartmentName());
		model.setNewDepartmentNumber(soapModel.getNewDepartmentNumber());
		model.setNewDepartmentManager(soapModel.getNewDepartmentManager());
		model.setNewManagerName(soapModel.getNewManagerName());
		model.setNewManagerTitle(soapModel.getNewManagerTitle());
		model.setDeleteflagStatus(soapModel.getDeleteflagStatus());
		model.setRequistionId(soapModel.getRequistionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setScopeGroupId(soapModel.getScopeGroupId());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAssociatename(soapModel.getAssociatename());
		model.setRelatesTo(soapModel.getRelatesTo());
		model.setNextApprover(soapModel.getNextApprover());
		model.setRoleOfApprover(soapModel.getRoleOfApprover());
		model.setApproverList(soapModel.getApproverList());
		model.setApproverStep(soapModel.getApproverStep());
		model.setWorkflow(soapModel.getWorkflow());
		model.setWorkflowStep(soapModel.getWorkflowStep());
		model.setWorkflowId(soapModel.getWorkflowId());
		model.setDummy(soapModel.getDummy());
		model.setRefCosId(soapModel.getRefCosId());
		model.setSystemGenerated(soapModel.getSystemGenerated());
		model.setPositionNumber(soapModel.getPositionNumber());
		model.setCurrentJobCode(soapModel.getCurrentJobCode());
		model.setCurrentDivision(soapModel.getCurrentDivision());
		model.setCurrentDivisionManager(soapModel.getCurrentDivisionManager());
		model.setCurrentDepartmentName(soapModel.getCurrentDepartmentName());
		model.setCurrentDepartmentNumber(soapModel.getCurrentDepartmentNumber());
		model.setCurrentDepartmentManager(soapModel.getCurrentDepartmentManager());
		model.setCurrentManagerName(soapModel.getCurrentManagerName());
		model.setCurrentManagerTitle(soapModel.getCurrentManagerTitle());
		model.setCurrentTeamNumber(soapModel.getCurrentTeamNumber());
		model.setCurrentShiftCode(soapModel.getCurrentShiftCode());
		model.setCurrentLeadershipAssignment(soapModel.getCurrentLeadershipAssignment());
		model.setCurrentManpowerRep(soapModel.getCurrentManpowerRep());
		model.setCurrentManagerAssocNumber(soapModel.getCurrentManagerAssocNumber());
		model.setSortApprovedList(soapModel.getSortApprovedList());
		model.setDuplicateApprovedList(soapModel.getDuplicateApprovedList());
		model.setDuplicateApprovedListStartIndex(soapModel.getDuplicateApprovedListStartIndex());
		model.setDuplicateApprovedListEndIndex(soapModel.getDuplicateApprovedListEndIndex());
		model.setAnnounced(soapModel.getAnnounced());
		model.setCurrentPositionText(soapModel.getCurrentPositionText());
		model.setDuplicateCounter(soapModel.getDuplicateCounter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WFMS_COS> toModels(WFMS_COSSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WFMS_COS> models = new ArrayList<WFMS_COS>(soapModels.length);

		for (WFMS_COSSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"lock.expiration.time.com.ys.hmawfm.wfms.services.model.WFMS_COS"));

	public WFMS_COSModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _cosId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCosId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cosId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return WFMS_COS.class;
	}

	@Override
	public String getModelClassName() {
		return WFMS_COS.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cosId", getCosId());
		attributes.put("assoicateId", getAssoicateId());
		attributes.put("newPositionNumber", getNewPositionNumber());
		attributes.put("action", getAction());
		attributes.put("reasonCODE", getReasonCODE());
		attributes.put("description", getDescription());
		attributes.put("changeDescription", getChangeDescription());
		attributes.put("newJobCode", getNewJobCode());
		attributes.put("sameJobCode", getSameJobCode());
		attributes.put("sameLeadership", getSameLeadership());
		attributes.put("sameDept", getSameDept());
		attributes.put("sameMgr", getSameMgr());
		attributes.put("routingProcess", getRoutingProcess());
		attributes.put("notificationTo", getNotificationTo());
		attributes.put("status", getStatus());
		attributes.put("type", getType());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("teamNumber", getTeamNumber());
		attributes.put("shiftCode", getShiftCode());
		attributes.put("mgrAssociateNumber", getMgrAssociateNumber());
		attributes.put("manpowerCategiry", getManpowerCategiry());
		attributes.put("comments", getComments());
		attributes.put("leadershipAssignment", getLeadershipAssignment());
		attributes.put("associateDateOfHire", getAssociateDateOfHire());
		attributes.put("newDivision", getNewDivision());
		attributes.put("newDivisionManager", getNewDivisionManager());
		attributes.put("newDepartmentName", getNewDepartmentName());
		attributes.put("newDepartmentNumber", getNewDepartmentNumber());
		attributes.put("newDepartmentManager", getNewDepartmentManager());
		attributes.put("newManagerName", getNewManagerName());
		attributes.put("newManagerTitle", getNewManagerTitle());
		attributes.put("deleteflagStatus", getDeleteflagStatus());
		attributes.put("RequistionId", getRequistionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("scopeGroupId", getScopeGroupId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("associatename", getAssociatename());
		attributes.put("relatesTo", getRelatesTo());
		attributes.put("nextApprover", getNextApprover());
		attributes.put("roleOfApprover", getRoleOfApprover());
		attributes.put("approverList", getApproverList());
		attributes.put("approverStep", getApproverStep());
		attributes.put("workflow", getWorkflow());
		attributes.put("workflowStep", getWorkflowStep());
		attributes.put("workflowId", getWorkflowId());
		attributes.put("dummy", getDummy());
		attributes.put("refCosId", getRefCosId());
		attributes.put("systemGenerated", getSystemGenerated());
		attributes.put("positionNumber", getPositionNumber());
		attributes.put("currentJobCode", getCurrentJobCode());
		attributes.put("currentDivision", getCurrentDivision());
		attributes.put("currentDivisionManager", getCurrentDivisionManager());
		attributes.put("currentDepartmentName", getCurrentDepartmentName());
		attributes.put("currentDepartmentNumber", getCurrentDepartmentNumber());
		attributes.put("currentDepartmentManager", getCurrentDepartmentManager());
		attributes.put("currentManagerName", getCurrentManagerName());
		attributes.put("currentManagerTitle", getCurrentManagerTitle());
		attributes.put("currentTeamNumber", getCurrentTeamNumber());
		attributes.put("currentShiftCode", getCurrentShiftCode());
		attributes.put("currentLeadershipAssignment",
			getCurrentLeadershipAssignment());
		attributes.put("currentManpowerRep", getCurrentManpowerRep());
		attributes.put("currentManagerAssocNumber",
			getCurrentManagerAssocNumber());
		attributes.put("sortApprovedList", getSortApprovedList());
		attributes.put("DuplicateApprovedList", getDuplicateApprovedList());
		attributes.put("DuplicateApprovedListStartIndex",
			getDuplicateApprovedListStartIndex());
		attributes.put("DuplicateApprovedListEndIndex",
			getDuplicateApprovedListEndIndex());
		attributes.put("announced", getAnnounced());
		attributes.put("currentPositionText", getCurrentPositionText());
		attributes.put("DuplicateCounter", getDuplicateCounter());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String cosId = (String)attributes.get("cosId");

		if (cosId != null) {
			setCosId(cosId);
		}

		String assoicateId = (String)attributes.get("assoicateId");

		if (assoicateId != null) {
			setAssoicateId(assoicateId);
		}

		String newPositionNumber = (String)attributes.get("newPositionNumber");

		if (newPositionNumber != null) {
			setNewPositionNumber(newPositionNumber);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		String reasonCODE = (String)attributes.get("reasonCODE");

		if (reasonCODE != null) {
			setReasonCODE(reasonCODE);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String changeDescription = (String)attributes.get("changeDescription");

		if (changeDescription != null) {
			setChangeDescription(changeDescription);
		}

		String newJobCode = (String)attributes.get("newJobCode");

		if (newJobCode != null) {
			setNewJobCode(newJobCode);
		}

		String sameJobCode = (String)attributes.get("sameJobCode");

		if (sameJobCode != null) {
			setSameJobCode(sameJobCode);
		}

		String sameLeadership = (String)attributes.get("sameLeadership");

		if (sameLeadership != null) {
			setSameLeadership(sameLeadership);
		}

		String sameDept = (String)attributes.get("sameDept");

		if (sameDept != null) {
			setSameDept(sameDept);
		}

		String sameMgr = (String)attributes.get("sameMgr");

		if (sameMgr != null) {
			setSameMgr(sameMgr);
		}

		String routingProcess = (String)attributes.get("routingProcess");

		if (routingProcess != null) {
			setRoutingProcess(routingProcess);
		}

		String notificationTo = (String)attributes.get("notificationTo");

		if (notificationTo != null) {
			setNotificationTo(notificationTo);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String effectiveDate = (String)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		String teamNumber = (String)attributes.get("teamNumber");

		if (teamNumber != null) {
			setTeamNumber(teamNumber);
		}

		String shiftCode = (String)attributes.get("shiftCode");

		if (shiftCode != null) {
			setShiftCode(shiftCode);
		}

		String mgrAssociateNumber = (String)attributes.get("mgrAssociateNumber");

		if (mgrAssociateNumber != null) {
			setMgrAssociateNumber(mgrAssociateNumber);
		}

		String manpowerCategiry = (String)attributes.get("manpowerCategiry");

		if (manpowerCategiry != null) {
			setManpowerCategiry(manpowerCategiry);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String leadershipAssignment = (String)attributes.get(
				"leadershipAssignment");

		if (leadershipAssignment != null) {
			setLeadershipAssignment(leadershipAssignment);
		}

		String associateDateOfHire = (String)attributes.get(
				"associateDateOfHire");

		if (associateDateOfHire != null) {
			setAssociateDateOfHire(associateDateOfHire);
		}

		String newDivision = (String)attributes.get("newDivision");

		if (newDivision != null) {
			setNewDivision(newDivision);
		}

		String newDivisionManager = (String)attributes.get("newDivisionManager");

		if (newDivisionManager != null) {
			setNewDivisionManager(newDivisionManager);
		}

		String newDepartmentName = (String)attributes.get("newDepartmentName");

		if (newDepartmentName != null) {
			setNewDepartmentName(newDepartmentName);
		}

		String newDepartmentNumber = (String)attributes.get(
				"newDepartmentNumber");

		if (newDepartmentNumber != null) {
			setNewDepartmentNumber(newDepartmentNumber);
		}

		String newDepartmentManager = (String)attributes.get(
				"newDepartmentManager");

		if (newDepartmentManager != null) {
			setNewDepartmentManager(newDepartmentManager);
		}

		String newManagerName = (String)attributes.get("newManagerName");

		if (newManagerName != null) {
			setNewManagerName(newManagerName);
		}

		String newManagerTitle = (String)attributes.get("newManagerTitle");

		if (newManagerTitle != null) {
			setNewManagerTitle(newManagerTitle);
		}

		Integer deleteflagStatus = (Integer)attributes.get("deleteflagStatus");

		if (deleteflagStatus != null) {
			setDeleteflagStatus(deleteflagStatus);
		}

		String RequistionId = (String)attributes.get("RequistionId");

		if (RequistionId != null) {
			setRequistionId(RequistionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long scopeGroupId = (Long)attributes.get("scopeGroupId");

		if (scopeGroupId != null) {
			setScopeGroupId(scopeGroupId);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String associatename = (String)attributes.get("associatename");

		if (associatename != null) {
			setAssociatename(associatename);
		}

		String relatesTo = (String)attributes.get("relatesTo");

		if (relatesTo != null) {
			setRelatesTo(relatesTo);
		}

		String nextApprover = (String)attributes.get("nextApprover");

		if (nextApprover != null) {
			setNextApprover(nextApprover);
		}

		String roleOfApprover = (String)attributes.get("roleOfApprover");

		if (roleOfApprover != null) {
			setRoleOfApprover(roleOfApprover);
		}

		String approverList = (String)attributes.get("approverList");

		if (approverList != null) {
			setApproverList(approverList);
		}

		Integer approverStep = (Integer)attributes.get("approverStep");

		if (approverStep != null) {
			setApproverStep(approverStep);
		}

		String workflow = (String)attributes.get("workflow");

		if (workflow != null) {
			setWorkflow(workflow);
		}

		Integer workflowStep = (Integer)attributes.get("workflowStep");

		if (workflowStep != null) {
			setWorkflowStep(workflowStep);
		}

		String workflowId = (String)attributes.get("workflowId");

		if (workflowId != null) {
			setWorkflowId(workflowId);
		}

		String dummy = (String)attributes.get("dummy");

		if (dummy != null) {
			setDummy(dummy);
		}

		String refCosId = (String)attributes.get("refCosId");

		if (refCosId != null) {
			setRefCosId(refCosId);
		}

		Integer systemGenerated = (Integer)attributes.get("systemGenerated");

		if (systemGenerated != null) {
			setSystemGenerated(systemGenerated);
		}

		String positionNumber = (String)attributes.get("positionNumber");

		if (positionNumber != null) {
			setPositionNumber(positionNumber);
		}

		String currentJobCode = (String)attributes.get("currentJobCode");

		if (currentJobCode != null) {
			setCurrentJobCode(currentJobCode);
		}

		String currentDivision = (String)attributes.get("currentDivision");

		if (currentDivision != null) {
			setCurrentDivision(currentDivision);
		}

		String currentDivisionManager = (String)attributes.get(
				"currentDivisionManager");

		if (currentDivisionManager != null) {
			setCurrentDivisionManager(currentDivisionManager);
		}

		String currentDepartmentName = (String)attributes.get(
				"currentDepartmentName");

		if (currentDepartmentName != null) {
			setCurrentDepartmentName(currentDepartmentName);
		}

		String currentDepartmentNumber = (String)attributes.get(
				"currentDepartmentNumber");

		if (currentDepartmentNumber != null) {
			setCurrentDepartmentNumber(currentDepartmentNumber);
		}

		String currentDepartmentManager = (String)attributes.get(
				"currentDepartmentManager");

		if (currentDepartmentManager != null) {
			setCurrentDepartmentManager(currentDepartmentManager);
		}

		String currentManagerName = (String)attributes.get("currentManagerName");

		if (currentManagerName != null) {
			setCurrentManagerName(currentManagerName);
		}

		String currentManagerTitle = (String)attributes.get(
				"currentManagerTitle");

		if (currentManagerTitle != null) {
			setCurrentManagerTitle(currentManagerTitle);
		}

		String currentTeamNumber = (String)attributes.get("currentTeamNumber");

		if (currentTeamNumber != null) {
			setCurrentTeamNumber(currentTeamNumber);
		}

		String currentShiftCode = (String)attributes.get("currentShiftCode");

		if (currentShiftCode != null) {
			setCurrentShiftCode(currentShiftCode);
		}

		String currentLeadershipAssignment = (String)attributes.get(
				"currentLeadershipAssignment");

		if (currentLeadershipAssignment != null) {
			setCurrentLeadershipAssignment(currentLeadershipAssignment);
		}

		String currentManpowerRep = (String)attributes.get("currentManpowerRep");

		if (currentManpowerRep != null) {
			setCurrentManpowerRep(currentManpowerRep);
		}

		String currentManagerAssocNumber = (String)attributes.get(
				"currentManagerAssocNumber");

		if (currentManagerAssocNumber != null) {
			setCurrentManagerAssocNumber(currentManagerAssocNumber);
		}

		String sortApprovedList = (String)attributes.get("sortApprovedList");

		if (sortApprovedList != null) {
			setSortApprovedList(sortApprovedList);
		}

		String DuplicateApprovedList = (String)attributes.get(
				"DuplicateApprovedList");

		if (DuplicateApprovedList != null) {
			setDuplicateApprovedList(DuplicateApprovedList);
		}

		Integer DuplicateApprovedListStartIndex = (Integer)attributes.get(
				"DuplicateApprovedListStartIndex");

		if (DuplicateApprovedListStartIndex != null) {
			setDuplicateApprovedListStartIndex(DuplicateApprovedListStartIndex);
		}

		Integer DuplicateApprovedListEndIndex = (Integer)attributes.get(
				"DuplicateApprovedListEndIndex");

		if (DuplicateApprovedListEndIndex != null) {
			setDuplicateApprovedListEndIndex(DuplicateApprovedListEndIndex);
		}

		Integer announced = (Integer)attributes.get("announced");

		if (announced != null) {
			setAnnounced(announced);
		}

		Integer currentPositionText = (Integer)attributes.get(
				"currentPositionText");

		if (currentPositionText != null) {
			setCurrentPositionText(currentPositionText);
		}

		Integer DuplicateCounter = (Integer)attributes.get("DuplicateCounter");

		if (DuplicateCounter != null) {
			setDuplicateCounter(DuplicateCounter);
		}
	}

	@JSON
	@Override
	public String getCosId() {
		if (_cosId == null) {
			return StringPool.BLANK;
		}
		else {
			return _cosId;
		}
	}

	@Override
	public void setCosId(String cosId) {
		_columnBitmask = -1L;

		if (_originalCosId == null) {
			_originalCosId = _cosId;
		}

		_cosId = cosId;
	}

	public String getOriginalCosId() {
		return GetterUtil.getString(_originalCosId);
	}

	@JSON
	@Override
	public String getAssoicateId() {
		if (_assoicateId == null) {
			return StringPool.BLANK;
		}
		else {
			return _assoicateId;
		}
	}

	@Override
	public void setAssoicateId(String assoicateId) {
		_columnBitmask |= ASSOICATEID_COLUMN_BITMASK;

		if (_originalAssoicateId == null) {
			_originalAssoicateId = _assoicateId;
		}

		_assoicateId = assoicateId;
	}

	public String getOriginalAssoicateId() {
		return GetterUtil.getString(_originalAssoicateId);
	}

	@JSON
	@Override
	public String getNewPositionNumber() {
		if (_newPositionNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _newPositionNumber;
		}
	}

	@Override
	public void setNewPositionNumber(String newPositionNumber) {
		_columnBitmask |= NEWPOSITIONNUMBER_COLUMN_BITMASK;

		if (_originalNewPositionNumber == null) {
			_originalNewPositionNumber = _newPositionNumber;
		}

		_newPositionNumber = newPositionNumber;
	}

	public String getOriginalNewPositionNumber() {
		return GetterUtil.getString(_originalNewPositionNumber);
	}

	@JSON
	@Override
	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_columnBitmask |= ACTION_COLUMN_BITMASK;

		if (_originalAction == null) {
			_originalAction = _action;
		}

		_action = action;
	}

	public String getOriginalAction() {
		return GetterUtil.getString(_originalAction);
	}

	@JSON
	@Override
	public String getReasonCODE() {
		if (_reasonCODE == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonCODE;
		}
	}

	@Override
	public void setReasonCODE(String reasonCODE) {
		_reasonCODE = reasonCODE;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getChangeDescription() {
		if (_changeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _changeDescription;
		}
	}

	@Override
	public void setChangeDescription(String changeDescription) {
		_changeDescription = changeDescription;
	}

	@JSON
	@Override
	public String getNewJobCode() {
		if (_newJobCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _newJobCode;
		}
	}

	@Override
	public void setNewJobCode(String newJobCode) {
		_newJobCode = newJobCode;
	}

	@JSON
	@Override
	public String getSameJobCode() {
		if (_sameJobCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _sameJobCode;
		}
	}

	@Override
	public void setSameJobCode(String sameJobCode) {
		_sameJobCode = sameJobCode;
	}

	@JSON
	@Override
	public String getSameLeadership() {
		if (_sameLeadership == null) {
			return StringPool.BLANK;
		}
		else {
			return _sameLeadership;
		}
	}

	@Override
	public void setSameLeadership(String sameLeadership) {
		_sameLeadership = sameLeadership;
	}

	@JSON
	@Override
	public String getSameDept() {
		if (_sameDept == null) {
			return StringPool.BLANK;
		}
		else {
			return _sameDept;
		}
	}

	@Override
	public void setSameDept(String sameDept) {
		_sameDept = sameDept;
	}

	@JSON
	@Override
	public String getSameMgr() {
		if (_sameMgr == null) {
			return StringPool.BLANK;
		}
		else {
			return _sameMgr;
		}
	}

	@Override
	public void setSameMgr(String sameMgr) {
		_sameMgr = sameMgr;
	}

	@JSON
	@Override
	public String getRoutingProcess() {
		if (_routingProcess == null) {
			return StringPool.BLANK;
		}
		else {
			return _routingProcess;
		}
	}

	@Override
	public void setRoutingProcess(String routingProcess) {
		_routingProcess = routingProcess;
	}

	@JSON
	@Override
	public String getNotificationTo() {
		if (_notificationTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _notificationTo;
		}
	}

	@Override
	public void setNotificationTo(String notificationTo) {
		_notificationTo = notificationTo;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getEffectiveDate() {
		if (_effectiveDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _effectiveDate;
		}
	}

	@Override
	public void setEffectiveDate(String effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@JSON
	@Override
	public String getTeamNumber() {
		if (_teamNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _teamNumber;
		}
	}

	@Override
	public void setTeamNumber(String teamNumber) {
		_teamNumber = teamNumber;
	}

	@JSON
	@Override
	public String getShiftCode() {
		if (_shiftCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shiftCode;
		}
	}

	@Override
	public void setShiftCode(String shiftCode) {
		_shiftCode = shiftCode;
	}

	@JSON
	@Override
	public String getMgrAssociateNumber() {
		if (_mgrAssociateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _mgrAssociateNumber;
		}
	}

	@Override
	public void setMgrAssociateNumber(String mgrAssociateNumber) {
		_mgrAssociateNumber = mgrAssociateNumber;
	}

	@JSON
	@Override
	public String getManpowerCategiry() {
		if (_manpowerCategiry == null) {
			return StringPool.BLANK;
		}
		else {
			return _manpowerCategiry;
		}
	}

	@Override
	public void setManpowerCategiry(String manpowerCategiry) {
		_manpowerCategiry = manpowerCategiry;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getLeadershipAssignment() {
		if (_leadershipAssignment == null) {
			return StringPool.BLANK;
		}
		else {
			return _leadershipAssignment;
		}
	}

	@Override
	public void setLeadershipAssignment(String leadershipAssignment) {
		_leadershipAssignment = leadershipAssignment;
	}

	@JSON
	@Override
	public String getAssociateDateOfHire() {
		if (_associateDateOfHire == null) {
			return StringPool.BLANK;
		}
		else {
			return _associateDateOfHire;
		}
	}

	@Override
	public void setAssociateDateOfHire(String associateDateOfHire) {
		_associateDateOfHire = associateDateOfHire;
	}

	@JSON
	@Override
	public String getNewDivision() {
		if (_newDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _newDivision;
		}
	}

	@Override
	public void setNewDivision(String newDivision) {
		_newDivision = newDivision;
	}

	@JSON
	@Override
	public String getNewDivisionManager() {
		if (_newDivisionManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _newDivisionManager;
		}
	}

	@Override
	public void setNewDivisionManager(String newDivisionManager) {
		_newDivisionManager = newDivisionManager;
	}

	@JSON
	@Override
	public String getNewDepartmentName() {
		if (_newDepartmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _newDepartmentName;
		}
	}

	@Override
	public void setNewDepartmentName(String newDepartmentName) {
		_newDepartmentName = newDepartmentName;
	}

	@JSON
	@Override
	public String getNewDepartmentNumber() {
		if (_newDepartmentNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _newDepartmentNumber;
		}
	}

	@Override
	public void setNewDepartmentNumber(String newDepartmentNumber) {
		_newDepartmentNumber = newDepartmentNumber;
	}

	@JSON
	@Override
	public String getNewDepartmentManager() {
		if (_newDepartmentManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _newDepartmentManager;
		}
	}

	@Override
	public void setNewDepartmentManager(String newDepartmentManager) {
		_newDepartmentManager = newDepartmentManager;
	}

	@JSON
	@Override
	public String getNewManagerName() {
		if (_newManagerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _newManagerName;
		}
	}

	@Override
	public void setNewManagerName(String newManagerName) {
		_newManagerName = newManagerName;
	}

	@JSON
	@Override
	public String getNewManagerTitle() {
		if (_newManagerTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _newManagerTitle;
		}
	}

	@Override
	public void setNewManagerTitle(String newManagerTitle) {
		_newManagerTitle = newManagerTitle;
	}

	@JSON
	@Override
	public int getDeleteflagStatus() {
		return _deleteflagStatus;
	}

	@Override
	public void setDeleteflagStatus(int deleteflagStatus) {
		_deleteflagStatus = deleteflagStatus;
	}

	@JSON
	@Override
	public String getRequistionId() {
		if (_RequistionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _RequistionId;
		}
	}

	@Override
	public void setRequistionId(String RequistionId) {
		_RequistionId = RequistionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getScopeGroupId() {
		return _scopeGroupId;
	}

	@Override
	public void setScopeGroupId(long scopeGroupId) {
		_scopeGroupId = scopeGroupId;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAssociatename() {
		if (_associatename == null) {
			return StringPool.BLANK;
		}
		else {
			return _associatename;
		}
	}

	@Override
	public void setAssociatename(String associatename) {
		_associatename = associatename;
	}

	@JSON
	@Override
	public String getRelatesTo() {
		if (_relatesTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _relatesTo;
		}
	}

	@Override
	public void setRelatesTo(String relatesTo) {
		_relatesTo = relatesTo;
	}

	@JSON
	@Override
	public String getNextApprover() {
		if (_nextApprover == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextApprover;
		}
	}

	@Override
	public void setNextApprover(String nextApprover) {
		_columnBitmask |= NEXTAPPROVER_COLUMN_BITMASK;

		if (_originalNextApprover == null) {
			_originalNextApprover = _nextApprover;
		}

		_nextApprover = nextApprover;
	}

	public String getOriginalNextApprover() {
		return GetterUtil.getString(_originalNextApprover);
	}

	@JSON
	@Override
	public String getRoleOfApprover() {
		if (_roleOfApprover == null) {
			return StringPool.BLANK;
		}
		else {
			return _roleOfApprover;
		}
	}

	@Override
	public void setRoleOfApprover(String roleOfApprover) {
		_columnBitmask |= ROLEOFAPPROVER_COLUMN_BITMASK;

		if (_originalRoleOfApprover == null) {
			_originalRoleOfApprover = _roleOfApprover;
		}

		_roleOfApprover = roleOfApprover;
	}

	public String getOriginalRoleOfApprover() {
		return GetterUtil.getString(_originalRoleOfApprover);
	}

	@JSON
	@Override
	public String getApproverList() {
		if (_approverList == null) {
			return StringPool.BLANK;
		}
		else {
			return _approverList;
		}
	}

	@Override
	public void setApproverList(String approverList) {
		_approverList = approverList;
	}

	@JSON
	@Override
	public int getApproverStep() {
		return _approverStep;
	}

	@Override
	public void setApproverStep(int approverStep) {
		_approverStep = approverStep;
	}

	@JSON
	@Override
	public String getWorkflow() {
		if (_workflow == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflow;
		}
	}

	@Override
	public void setWorkflow(String workflow) {
		_workflow = workflow;
	}

	@JSON
	@Override
	public int getWorkflowStep() {
		return _workflowStep;
	}

	@Override
	public void setWorkflowStep(int workflowStep) {
		_workflowStep = workflowStep;
	}

	@JSON
	@Override
	public String getWorkflowId() {
		if (_workflowId == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowId;
		}
	}

	@Override
	public void setWorkflowId(String workflowId) {
		_workflowId = workflowId;
	}

	@JSON
	@Override
	public String getDummy() {
		if (_dummy == null) {
			return StringPool.BLANK;
		}
		else {
			return _dummy;
		}
	}

	@Override
	public void setDummy(String dummy) {
		_dummy = dummy;
	}

	@JSON
	@Override
	public String getRefCosId() {
		if (_refCosId == null) {
			return StringPool.BLANK;
		}
		else {
			return _refCosId;
		}
	}

	@Override
	public void setRefCosId(String refCosId) {
		_refCosId = refCosId;
	}

	@JSON
	@Override
	public int getSystemGenerated() {
		return _systemGenerated;
	}

	@Override
	public void setSystemGenerated(int systemGenerated) {
		_systemGenerated = systemGenerated;
	}

	@JSON
	@Override
	public String getPositionNumber() {
		if (_positionNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionNumber;
		}
	}

	@Override
	public void setPositionNumber(String positionNumber) {
		_columnBitmask |= POSITIONNUMBER_COLUMN_BITMASK;

		if (_originalPositionNumber == null) {
			_originalPositionNumber = _positionNumber;
		}

		_positionNumber = positionNumber;
	}

	public String getOriginalPositionNumber() {
		return GetterUtil.getString(_originalPositionNumber);
	}

	@JSON
	@Override
	public String getCurrentJobCode() {
		if (_currentJobCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentJobCode;
		}
	}

	@Override
	public void setCurrentJobCode(String currentJobCode) {
		_currentJobCode = currentJobCode;
	}

	@JSON
	@Override
	public String getCurrentDivision() {
		if (_currentDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDivision;
		}
	}

	@Override
	public void setCurrentDivision(String currentDivision) {
		_currentDivision = currentDivision;
	}

	@JSON
	@Override
	public String getCurrentDivisionManager() {
		if (_currentDivisionManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDivisionManager;
		}
	}

	@Override
	public void setCurrentDivisionManager(String currentDivisionManager) {
		_currentDivisionManager = currentDivisionManager;
	}

	@JSON
	@Override
	public String getCurrentDepartmentName() {
		if (_currentDepartmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDepartmentName;
		}
	}

	@Override
	public void setCurrentDepartmentName(String currentDepartmentName) {
		_currentDepartmentName = currentDepartmentName;
	}

	@JSON
	@Override
	public String getCurrentDepartmentNumber() {
		if (_currentDepartmentNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDepartmentNumber;
		}
	}

	@Override
	public void setCurrentDepartmentNumber(String currentDepartmentNumber) {
		_currentDepartmentNumber = currentDepartmentNumber;
	}

	@JSON
	@Override
	public String getCurrentDepartmentManager() {
		if (_currentDepartmentManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDepartmentManager;
		}
	}

	@Override
	public void setCurrentDepartmentManager(String currentDepartmentManager) {
		_currentDepartmentManager = currentDepartmentManager;
	}

	@JSON
	@Override
	public String getCurrentManagerName() {
		if (_currentManagerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentManagerName;
		}
	}

	@Override
	public void setCurrentManagerName(String currentManagerName) {
		_currentManagerName = currentManagerName;
	}

	@JSON
	@Override
	public String getCurrentManagerTitle() {
		if (_currentManagerTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentManagerTitle;
		}
	}

	@Override
	public void setCurrentManagerTitle(String currentManagerTitle) {
		_currentManagerTitle = currentManagerTitle;
	}

	@JSON
	@Override
	public String getCurrentTeamNumber() {
		if (_currentTeamNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentTeamNumber;
		}
	}

	@Override
	public void setCurrentTeamNumber(String currentTeamNumber) {
		_currentTeamNumber = currentTeamNumber;
	}

	@JSON
	@Override
	public String getCurrentShiftCode() {
		if (_currentShiftCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentShiftCode;
		}
	}

	@Override
	public void setCurrentShiftCode(String currentShiftCode) {
		_currentShiftCode = currentShiftCode;
	}

	@JSON
	@Override
	public String getCurrentLeadershipAssignment() {
		if (_currentLeadershipAssignment == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentLeadershipAssignment;
		}
	}

	@Override
	public void setCurrentLeadershipAssignment(
		String currentLeadershipAssignment) {
		_currentLeadershipAssignment = currentLeadershipAssignment;
	}

	@JSON
	@Override
	public String getCurrentManpowerRep() {
		if (_currentManpowerRep == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentManpowerRep;
		}
	}

	@Override
	public void setCurrentManpowerRep(String currentManpowerRep) {
		_currentManpowerRep = currentManpowerRep;
	}

	@JSON
	@Override
	public String getCurrentManagerAssocNumber() {
		if (_currentManagerAssocNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentManagerAssocNumber;
		}
	}

	@Override
	public void setCurrentManagerAssocNumber(String currentManagerAssocNumber) {
		_currentManagerAssocNumber = currentManagerAssocNumber;
	}

	@JSON
	@Override
	public String getSortApprovedList() {
		if (_sortApprovedList == null) {
			return StringPool.BLANK;
		}
		else {
			return _sortApprovedList;
		}
	}

	@Override
	public void setSortApprovedList(String sortApprovedList) {
		_sortApprovedList = sortApprovedList;
	}

	@JSON
	@Override
	public String getDuplicateApprovedList() {
		if (_DuplicateApprovedList == null) {
			return StringPool.BLANK;
		}
		else {
			return _DuplicateApprovedList;
		}
	}

	@Override
	public void setDuplicateApprovedList(String DuplicateApprovedList) {
		_DuplicateApprovedList = DuplicateApprovedList;
	}

	@JSON
	@Override
	public int getDuplicateApprovedListStartIndex() {
		return _DuplicateApprovedListStartIndex;
	}

	@Override
	public void setDuplicateApprovedListStartIndex(
		int DuplicateApprovedListStartIndex) {
		_DuplicateApprovedListStartIndex = DuplicateApprovedListStartIndex;
	}

	@JSON
	@Override
	public int getDuplicateApprovedListEndIndex() {
		return _DuplicateApprovedListEndIndex;
	}

	@Override
	public void setDuplicateApprovedListEndIndex(
		int DuplicateApprovedListEndIndex) {
		_DuplicateApprovedListEndIndex = DuplicateApprovedListEndIndex;
	}

	@JSON
	@Override
	public int getAnnounced() {
		return _announced;
	}

	@Override
	public void setAnnounced(int announced) {
		_announced = announced;
	}

	@JSON
	@Override
	public int getCurrentPositionText() {
		return _currentPositionText;
	}

	@Override
	public void setCurrentPositionText(int currentPositionText) {
		_currentPositionText = currentPositionText;
	}

	@JSON
	@Override
	public int getDuplicateCounter() {
		return _DuplicateCounter;
	}

	@Override
	public void setDuplicateCounter(int DuplicateCounter) {
		_DuplicateCounter = DuplicateCounter;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public WFMS_COS toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WFMS_COS)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WFMS_COSImpl wfms_cosImpl = new WFMS_COSImpl();

		wfms_cosImpl.setCosId(getCosId());
		wfms_cosImpl.setAssoicateId(getAssoicateId());
		wfms_cosImpl.setNewPositionNumber(getNewPositionNumber());
		wfms_cosImpl.setAction(getAction());
		wfms_cosImpl.setReasonCODE(getReasonCODE());
		wfms_cosImpl.setDescription(getDescription());
		wfms_cosImpl.setChangeDescription(getChangeDescription());
		wfms_cosImpl.setNewJobCode(getNewJobCode());
		wfms_cosImpl.setSameJobCode(getSameJobCode());
		wfms_cosImpl.setSameLeadership(getSameLeadership());
		wfms_cosImpl.setSameDept(getSameDept());
		wfms_cosImpl.setSameMgr(getSameMgr());
		wfms_cosImpl.setRoutingProcess(getRoutingProcess());
		wfms_cosImpl.setNotificationTo(getNotificationTo());
		wfms_cosImpl.setStatus(getStatus());
		wfms_cosImpl.setType(getType());
		wfms_cosImpl.setEffectiveDate(getEffectiveDate());
		wfms_cosImpl.setTeamNumber(getTeamNumber());
		wfms_cosImpl.setShiftCode(getShiftCode());
		wfms_cosImpl.setMgrAssociateNumber(getMgrAssociateNumber());
		wfms_cosImpl.setManpowerCategiry(getManpowerCategiry());
		wfms_cosImpl.setComments(getComments());
		wfms_cosImpl.setLeadershipAssignment(getLeadershipAssignment());
		wfms_cosImpl.setAssociateDateOfHire(getAssociateDateOfHire());
		wfms_cosImpl.setNewDivision(getNewDivision());
		wfms_cosImpl.setNewDivisionManager(getNewDivisionManager());
		wfms_cosImpl.setNewDepartmentName(getNewDepartmentName());
		wfms_cosImpl.setNewDepartmentNumber(getNewDepartmentNumber());
		wfms_cosImpl.setNewDepartmentManager(getNewDepartmentManager());
		wfms_cosImpl.setNewManagerName(getNewManagerName());
		wfms_cosImpl.setNewManagerTitle(getNewManagerTitle());
		wfms_cosImpl.setDeleteflagStatus(getDeleteflagStatus());
		wfms_cosImpl.setRequistionId(getRequistionId());
		wfms_cosImpl.setCompanyId(getCompanyId());
		wfms_cosImpl.setScopeGroupId(getScopeGroupId());
		wfms_cosImpl.setCreatedBy(getCreatedBy());
		wfms_cosImpl.setCreateDate(getCreateDate());
		wfms_cosImpl.setModifiedBy(getModifiedBy());
		wfms_cosImpl.setModifiedDate(getModifiedDate());
		wfms_cosImpl.setAssociatename(getAssociatename());
		wfms_cosImpl.setRelatesTo(getRelatesTo());
		wfms_cosImpl.setNextApprover(getNextApprover());
		wfms_cosImpl.setRoleOfApprover(getRoleOfApprover());
		wfms_cosImpl.setApproverList(getApproverList());
		wfms_cosImpl.setApproverStep(getApproverStep());
		wfms_cosImpl.setWorkflow(getWorkflow());
		wfms_cosImpl.setWorkflowStep(getWorkflowStep());
		wfms_cosImpl.setWorkflowId(getWorkflowId());
		wfms_cosImpl.setDummy(getDummy());
		wfms_cosImpl.setRefCosId(getRefCosId());
		wfms_cosImpl.setSystemGenerated(getSystemGenerated());
		wfms_cosImpl.setPositionNumber(getPositionNumber());
		wfms_cosImpl.setCurrentJobCode(getCurrentJobCode());
		wfms_cosImpl.setCurrentDivision(getCurrentDivision());
		wfms_cosImpl.setCurrentDivisionManager(getCurrentDivisionManager());
		wfms_cosImpl.setCurrentDepartmentName(getCurrentDepartmentName());
		wfms_cosImpl.setCurrentDepartmentNumber(getCurrentDepartmentNumber());
		wfms_cosImpl.setCurrentDepartmentManager(getCurrentDepartmentManager());
		wfms_cosImpl.setCurrentManagerName(getCurrentManagerName());
		wfms_cosImpl.setCurrentManagerTitle(getCurrentManagerTitle());
		wfms_cosImpl.setCurrentTeamNumber(getCurrentTeamNumber());
		wfms_cosImpl.setCurrentShiftCode(getCurrentShiftCode());
		wfms_cosImpl.setCurrentLeadershipAssignment(getCurrentLeadershipAssignment());
		wfms_cosImpl.setCurrentManpowerRep(getCurrentManpowerRep());
		wfms_cosImpl.setCurrentManagerAssocNumber(getCurrentManagerAssocNumber());
		wfms_cosImpl.setSortApprovedList(getSortApprovedList());
		wfms_cosImpl.setDuplicateApprovedList(getDuplicateApprovedList());
		wfms_cosImpl.setDuplicateApprovedListStartIndex(getDuplicateApprovedListStartIndex());
		wfms_cosImpl.setDuplicateApprovedListEndIndex(getDuplicateApprovedListEndIndex());
		wfms_cosImpl.setAnnounced(getAnnounced());
		wfms_cosImpl.setCurrentPositionText(getCurrentPositionText());
		wfms_cosImpl.setDuplicateCounter(getDuplicateCounter());

		wfms_cosImpl.resetOriginalValues();

		return wfms_cosImpl;
	}

	@Override
	public int compareTo(WFMS_COS wfms_cos) {
		int value = 0;

		value = getCosId().compareTo(wfms_cos.getCosId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WFMS_COS)) {
			return false;
		}

		WFMS_COS wfms_cos = (WFMS_COS)obj;

		String primaryKey = wfms_cos.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WFMS_COSModelImpl wfms_cosModelImpl = this;

		wfms_cosModelImpl._originalCosId = wfms_cosModelImpl._cosId;

		wfms_cosModelImpl._originalAssoicateId = wfms_cosModelImpl._assoicateId;

		wfms_cosModelImpl._originalNewPositionNumber = wfms_cosModelImpl._newPositionNumber;

		wfms_cosModelImpl._originalAction = wfms_cosModelImpl._action;

		wfms_cosModelImpl._originalStatus = wfms_cosModelImpl._status;

		wfms_cosModelImpl._setModifiedDate = false;

		wfms_cosModelImpl._originalNextApprover = wfms_cosModelImpl._nextApprover;

		wfms_cosModelImpl._originalRoleOfApprover = wfms_cosModelImpl._roleOfApprover;

		wfms_cosModelImpl._originalPositionNumber = wfms_cosModelImpl._positionNumber;

		wfms_cosModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WFMS_COS> toCacheModel() {
		WFMS_COSCacheModel wfms_cosCacheModel = new WFMS_COSCacheModel();

		wfms_cosCacheModel.cosId = getCosId();

		String cosId = wfms_cosCacheModel.cosId;

		if ((cosId != null) && (cosId.length() == 0)) {
			wfms_cosCacheModel.cosId = null;
		}

		wfms_cosCacheModel.assoicateId = getAssoicateId();

		String assoicateId = wfms_cosCacheModel.assoicateId;

		if ((assoicateId != null) && (assoicateId.length() == 0)) {
			wfms_cosCacheModel.assoicateId = null;
		}

		wfms_cosCacheModel.newPositionNumber = getNewPositionNumber();

		String newPositionNumber = wfms_cosCacheModel.newPositionNumber;

		if ((newPositionNumber != null) && (newPositionNumber.length() == 0)) {
			wfms_cosCacheModel.newPositionNumber = null;
		}

		wfms_cosCacheModel.action = getAction();

		String action = wfms_cosCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			wfms_cosCacheModel.action = null;
		}

		wfms_cosCacheModel.reasonCODE = getReasonCODE();

		String reasonCODE = wfms_cosCacheModel.reasonCODE;

		if ((reasonCODE != null) && (reasonCODE.length() == 0)) {
			wfms_cosCacheModel.reasonCODE = null;
		}

		wfms_cosCacheModel.description = getDescription();

		String description = wfms_cosCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			wfms_cosCacheModel.description = null;
		}

		wfms_cosCacheModel.changeDescription = getChangeDescription();

		String changeDescription = wfms_cosCacheModel.changeDescription;

		if ((changeDescription != null) && (changeDescription.length() == 0)) {
			wfms_cosCacheModel.changeDescription = null;
		}

		wfms_cosCacheModel.newJobCode = getNewJobCode();

		String newJobCode = wfms_cosCacheModel.newJobCode;

		if ((newJobCode != null) && (newJobCode.length() == 0)) {
			wfms_cosCacheModel.newJobCode = null;
		}

		wfms_cosCacheModel.sameJobCode = getSameJobCode();

		String sameJobCode = wfms_cosCacheModel.sameJobCode;

		if ((sameJobCode != null) && (sameJobCode.length() == 0)) {
			wfms_cosCacheModel.sameJobCode = null;
		}

		wfms_cosCacheModel.sameLeadership = getSameLeadership();

		String sameLeadership = wfms_cosCacheModel.sameLeadership;

		if ((sameLeadership != null) && (sameLeadership.length() == 0)) {
			wfms_cosCacheModel.sameLeadership = null;
		}

		wfms_cosCacheModel.sameDept = getSameDept();

		String sameDept = wfms_cosCacheModel.sameDept;

		if ((sameDept != null) && (sameDept.length() == 0)) {
			wfms_cosCacheModel.sameDept = null;
		}

		wfms_cosCacheModel.sameMgr = getSameMgr();

		String sameMgr = wfms_cosCacheModel.sameMgr;

		if ((sameMgr != null) && (sameMgr.length() == 0)) {
			wfms_cosCacheModel.sameMgr = null;
		}

		wfms_cosCacheModel.routingProcess = getRoutingProcess();

		String routingProcess = wfms_cosCacheModel.routingProcess;

		if ((routingProcess != null) && (routingProcess.length() == 0)) {
			wfms_cosCacheModel.routingProcess = null;
		}

		wfms_cosCacheModel.notificationTo = getNotificationTo();

		String notificationTo = wfms_cosCacheModel.notificationTo;

		if ((notificationTo != null) && (notificationTo.length() == 0)) {
			wfms_cosCacheModel.notificationTo = null;
		}

		wfms_cosCacheModel.status = getStatus();

		String status = wfms_cosCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			wfms_cosCacheModel.status = null;
		}

		wfms_cosCacheModel.type = getType();

		String type = wfms_cosCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			wfms_cosCacheModel.type = null;
		}

		wfms_cosCacheModel.effectiveDate = getEffectiveDate();

		String effectiveDate = wfms_cosCacheModel.effectiveDate;

		if ((effectiveDate != null) && (effectiveDate.length() == 0)) {
			wfms_cosCacheModel.effectiveDate = null;
		}

		wfms_cosCacheModel.teamNumber = getTeamNumber();

		String teamNumber = wfms_cosCacheModel.teamNumber;

		if ((teamNumber != null) && (teamNumber.length() == 0)) {
			wfms_cosCacheModel.teamNumber = null;
		}

		wfms_cosCacheModel.shiftCode = getShiftCode();

		String shiftCode = wfms_cosCacheModel.shiftCode;

		if ((shiftCode != null) && (shiftCode.length() == 0)) {
			wfms_cosCacheModel.shiftCode = null;
		}

		wfms_cosCacheModel.mgrAssociateNumber = getMgrAssociateNumber();

		String mgrAssociateNumber = wfms_cosCacheModel.mgrAssociateNumber;

		if ((mgrAssociateNumber != null) && (mgrAssociateNumber.length() == 0)) {
			wfms_cosCacheModel.mgrAssociateNumber = null;
		}

		wfms_cosCacheModel.manpowerCategiry = getManpowerCategiry();

		String manpowerCategiry = wfms_cosCacheModel.manpowerCategiry;

		if ((manpowerCategiry != null) && (manpowerCategiry.length() == 0)) {
			wfms_cosCacheModel.manpowerCategiry = null;
		}

		wfms_cosCacheModel.comments = getComments();

		String comments = wfms_cosCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			wfms_cosCacheModel.comments = null;
		}

		wfms_cosCacheModel.leadershipAssignment = getLeadershipAssignment();

		String leadershipAssignment = wfms_cosCacheModel.leadershipAssignment;

		if ((leadershipAssignment != null) &&
				(leadershipAssignment.length() == 0)) {
			wfms_cosCacheModel.leadershipAssignment = null;
		}

		wfms_cosCacheModel.associateDateOfHire = getAssociateDateOfHire();

		String associateDateOfHire = wfms_cosCacheModel.associateDateOfHire;

		if ((associateDateOfHire != null) &&
				(associateDateOfHire.length() == 0)) {
			wfms_cosCacheModel.associateDateOfHire = null;
		}

		wfms_cosCacheModel.newDivision = getNewDivision();

		String newDivision = wfms_cosCacheModel.newDivision;

		if ((newDivision != null) && (newDivision.length() == 0)) {
			wfms_cosCacheModel.newDivision = null;
		}

		wfms_cosCacheModel.newDivisionManager = getNewDivisionManager();

		String newDivisionManager = wfms_cosCacheModel.newDivisionManager;

		if ((newDivisionManager != null) && (newDivisionManager.length() == 0)) {
			wfms_cosCacheModel.newDivisionManager = null;
		}

		wfms_cosCacheModel.newDepartmentName = getNewDepartmentName();

		String newDepartmentName = wfms_cosCacheModel.newDepartmentName;

		if ((newDepartmentName != null) && (newDepartmentName.length() == 0)) {
			wfms_cosCacheModel.newDepartmentName = null;
		}

		wfms_cosCacheModel.newDepartmentNumber = getNewDepartmentNumber();

		String newDepartmentNumber = wfms_cosCacheModel.newDepartmentNumber;

		if ((newDepartmentNumber != null) &&
				(newDepartmentNumber.length() == 0)) {
			wfms_cosCacheModel.newDepartmentNumber = null;
		}

		wfms_cosCacheModel.newDepartmentManager = getNewDepartmentManager();

		String newDepartmentManager = wfms_cosCacheModel.newDepartmentManager;

		if ((newDepartmentManager != null) &&
				(newDepartmentManager.length() == 0)) {
			wfms_cosCacheModel.newDepartmentManager = null;
		}

		wfms_cosCacheModel.newManagerName = getNewManagerName();

		String newManagerName = wfms_cosCacheModel.newManagerName;

		if ((newManagerName != null) && (newManagerName.length() == 0)) {
			wfms_cosCacheModel.newManagerName = null;
		}

		wfms_cosCacheModel.newManagerTitle = getNewManagerTitle();

		String newManagerTitle = wfms_cosCacheModel.newManagerTitle;

		if ((newManagerTitle != null) && (newManagerTitle.length() == 0)) {
			wfms_cosCacheModel.newManagerTitle = null;
		}

		wfms_cosCacheModel.deleteflagStatus = getDeleteflagStatus();

		wfms_cosCacheModel.RequistionId = getRequistionId();

		String RequistionId = wfms_cosCacheModel.RequistionId;

		if ((RequistionId != null) && (RequistionId.length() == 0)) {
			wfms_cosCacheModel.RequistionId = null;
		}

		wfms_cosCacheModel.companyId = getCompanyId();

		wfms_cosCacheModel.scopeGroupId = getScopeGroupId();

		wfms_cosCacheModel.createdBy = getCreatedBy();

		String createdBy = wfms_cosCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			wfms_cosCacheModel.createdBy = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			wfms_cosCacheModel.createDate = createDate.getTime();
		}
		else {
			wfms_cosCacheModel.createDate = Long.MIN_VALUE;
		}

		wfms_cosCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = wfms_cosCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			wfms_cosCacheModel.modifiedBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wfms_cosCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wfms_cosCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		wfms_cosCacheModel.associatename = getAssociatename();

		String associatename = wfms_cosCacheModel.associatename;

		if ((associatename != null) && (associatename.length() == 0)) {
			wfms_cosCacheModel.associatename = null;
		}

		wfms_cosCacheModel.relatesTo = getRelatesTo();

		String relatesTo = wfms_cosCacheModel.relatesTo;

		if ((relatesTo != null) && (relatesTo.length() == 0)) {
			wfms_cosCacheModel.relatesTo = null;
		}

		wfms_cosCacheModel.nextApprover = getNextApprover();

		String nextApprover = wfms_cosCacheModel.nextApprover;

		if ((nextApprover != null) && (nextApprover.length() == 0)) {
			wfms_cosCacheModel.nextApprover = null;
		}

		wfms_cosCacheModel.roleOfApprover = getRoleOfApprover();

		String roleOfApprover = wfms_cosCacheModel.roleOfApprover;

		if ((roleOfApprover != null) && (roleOfApprover.length() == 0)) {
			wfms_cosCacheModel.roleOfApprover = null;
		}

		wfms_cosCacheModel.approverList = getApproverList();

		String approverList = wfms_cosCacheModel.approverList;

		if ((approverList != null) && (approverList.length() == 0)) {
			wfms_cosCacheModel.approverList = null;
		}

		wfms_cosCacheModel.approverStep = getApproverStep();

		wfms_cosCacheModel.workflow = getWorkflow();

		String workflow = wfms_cosCacheModel.workflow;

		if ((workflow != null) && (workflow.length() == 0)) {
			wfms_cosCacheModel.workflow = null;
		}

		wfms_cosCacheModel.workflowStep = getWorkflowStep();

		wfms_cosCacheModel.workflowId = getWorkflowId();

		String workflowId = wfms_cosCacheModel.workflowId;

		if ((workflowId != null) && (workflowId.length() == 0)) {
			wfms_cosCacheModel.workflowId = null;
		}

		wfms_cosCacheModel.dummy = getDummy();

		String dummy = wfms_cosCacheModel.dummy;

		if ((dummy != null) && (dummy.length() == 0)) {
			wfms_cosCacheModel.dummy = null;
		}

		wfms_cosCacheModel.refCosId = getRefCosId();

		String refCosId = wfms_cosCacheModel.refCosId;

		if ((refCosId != null) && (refCosId.length() == 0)) {
			wfms_cosCacheModel.refCosId = null;
		}

		wfms_cosCacheModel.systemGenerated = getSystemGenerated();

		wfms_cosCacheModel.positionNumber = getPositionNumber();

		String positionNumber = wfms_cosCacheModel.positionNumber;

		if ((positionNumber != null) && (positionNumber.length() == 0)) {
			wfms_cosCacheModel.positionNumber = null;
		}

		wfms_cosCacheModel.currentJobCode = getCurrentJobCode();

		String currentJobCode = wfms_cosCacheModel.currentJobCode;

		if ((currentJobCode != null) && (currentJobCode.length() == 0)) {
			wfms_cosCacheModel.currentJobCode = null;
		}

		wfms_cosCacheModel.currentDivision = getCurrentDivision();

		String currentDivision = wfms_cosCacheModel.currentDivision;

		if ((currentDivision != null) && (currentDivision.length() == 0)) {
			wfms_cosCacheModel.currentDivision = null;
		}

		wfms_cosCacheModel.currentDivisionManager = getCurrentDivisionManager();

		String currentDivisionManager = wfms_cosCacheModel.currentDivisionManager;

		if ((currentDivisionManager != null) &&
				(currentDivisionManager.length() == 0)) {
			wfms_cosCacheModel.currentDivisionManager = null;
		}

		wfms_cosCacheModel.currentDepartmentName = getCurrentDepartmentName();

		String currentDepartmentName = wfms_cosCacheModel.currentDepartmentName;

		if ((currentDepartmentName != null) &&
				(currentDepartmentName.length() == 0)) {
			wfms_cosCacheModel.currentDepartmentName = null;
		}

		wfms_cosCacheModel.currentDepartmentNumber = getCurrentDepartmentNumber();

		String currentDepartmentNumber = wfms_cosCacheModel.currentDepartmentNumber;

		if ((currentDepartmentNumber != null) &&
				(currentDepartmentNumber.length() == 0)) {
			wfms_cosCacheModel.currentDepartmentNumber = null;
		}

		wfms_cosCacheModel.currentDepartmentManager = getCurrentDepartmentManager();

		String currentDepartmentManager = wfms_cosCacheModel.currentDepartmentManager;

		if ((currentDepartmentManager != null) &&
				(currentDepartmentManager.length() == 0)) {
			wfms_cosCacheModel.currentDepartmentManager = null;
		}

		wfms_cosCacheModel.currentManagerName = getCurrentManagerName();

		String currentManagerName = wfms_cosCacheModel.currentManagerName;

		if ((currentManagerName != null) && (currentManagerName.length() == 0)) {
			wfms_cosCacheModel.currentManagerName = null;
		}

		wfms_cosCacheModel.currentManagerTitle = getCurrentManagerTitle();

		String currentManagerTitle = wfms_cosCacheModel.currentManagerTitle;

		if ((currentManagerTitle != null) &&
				(currentManagerTitle.length() == 0)) {
			wfms_cosCacheModel.currentManagerTitle = null;
		}

		wfms_cosCacheModel.currentTeamNumber = getCurrentTeamNumber();

		String currentTeamNumber = wfms_cosCacheModel.currentTeamNumber;

		if ((currentTeamNumber != null) && (currentTeamNumber.length() == 0)) {
			wfms_cosCacheModel.currentTeamNumber = null;
		}

		wfms_cosCacheModel.currentShiftCode = getCurrentShiftCode();

		String currentShiftCode = wfms_cosCacheModel.currentShiftCode;

		if ((currentShiftCode != null) && (currentShiftCode.length() == 0)) {
			wfms_cosCacheModel.currentShiftCode = null;
		}

		wfms_cosCacheModel.currentLeadershipAssignment = getCurrentLeadershipAssignment();

		String currentLeadershipAssignment = wfms_cosCacheModel.currentLeadershipAssignment;

		if ((currentLeadershipAssignment != null) &&
				(currentLeadershipAssignment.length() == 0)) {
			wfms_cosCacheModel.currentLeadershipAssignment = null;
		}

		wfms_cosCacheModel.currentManpowerRep = getCurrentManpowerRep();

		String currentManpowerRep = wfms_cosCacheModel.currentManpowerRep;

		if ((currentManpowerRep != null) && (currentManpowerRep.length() == 0)) {
			wfms_cosCacheModel.currentManpowerRep = null;
		}

		wfms_cosCacheModel.currentManagerAssocNumber = getCurrentManagerAssocNumber();

		String currentManagerAssocNumber = wfms_cosCacheModel.currentManagerAssocNumber;

		if ((currentManagerAssocNumber != null) &&
				(currentManagerAssocNumber.length() == 0)) {
			wfms_cosCacheModel.currentManagerAssocNumber = null;
		}

		wfms_cosCacheModel.sortApprovedList = getSortApprovedList();

		String sortApprovedList = wfms_cosCacheModel.sortApprovedList;

		if ((sortApprovedList != null) && (sortApprovedList.length() == 0)) {
			wfms_cosCacheModel.sortApprovedList = null;
		}

		wfms_cosCacheModel.DuplicateApprovedList = getDuplicateApprovedList();

		String DuplicateApprovedList = wfms_cosCacheModel.DuplicateApprovedList;

		if ((DuplicateApprovedList != null) &&
				(DuplicateApprovedList.length() == 0)) {
			wfms_cosCacheModel.DuplicateApprovedList = null;
		}

		wfms_cosCacheModel.DuplicateApprovedListStartIndex = getDuplicateApprovedListStartIndex();

		wfms_cosCacheModel.DuplicateApprovedListEndIndex = getDuplicateApprovedListEndIndex();

		wfms_cosCacheModel.announced = getAnnounced();

		wfms_cosCacheModel.currentPositionText = getCurrentPositionText();

		wfms_cosCacheModel.DuplicateCounter = getDuplicateCounter();

		return wfms_cosCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(145);

		sb.append("{cosId=");
		sb.append(getCosId());
		sb.append(", assoicateId=");
		sb.append(getAssoicateId());
		sb.append(", newPositionNumber=");
		sb.append(getNewPositionNumber());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", reasonCODE=");
		sb.append(getReasonCODE());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", changeDescription=");
		sb.append(getChangeDescription());
		sb.append(", newJobCode=");
		sb.append(getNewJobCode());
		sb.append(", sameJobCode=");
		sb.append(getSameJobCode());
		sb.append(", sameLeadership=");
		sb.append(getSameLeadership());
		sb.append(", sameDept=");
		sb.append(getSameDept());
		sb.append(", sameMgr=");
		sb.append(getSameMgr());
		sb.append(", routingProcess=");
		sb.append(getRoutingProcess());
		sb.append(", notificationTo=");
		sb.append(getNotificationTo());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", teamNumber=");
		sb.append(getTeamNumber());
		sb.append(", shiftCode=");
		sb.append(getShiftCode());
		sb.append(", mgrAssociateNumber=");
		sb.append(getMgrAssociateNumber());
		sb.append(", manpowerCategiry=");
		sb.append(getManpowerCategiry());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", leadershipAssignment=");
		sb.append(getLeadershipAssignment());
		sb.append(", associateDateOfHire=");
		sb.append(getAssociateDateOfHire());
		sb.append(", newDivision=");
		sb.append(getNewDivision());
		sb.append(", newDivisionManager=");
		sb.append(getNewDivisionManager());
		sb.append(", newDepartmentName=");
		sb.append(getNewDepartmentName());
		sb.append(", newDepartmentNumber=");
		sb.append(getNewDepartmentNumber());
		sb.append(", newDepartmentManager=");
		sb.append(getNewDepartmentManager());
		sb.append(", newManagerName=");
		sb.append(getNewManagerName());
		sb.append(", newManagerTitle=");
		sb.append(getNewManagerTitle());
		sb.append(", deleteflagStatus=");
		sb.append(getDeleteflagStatus());
		sb.append(", RequistionId=");
		sb.append(getRequistionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", scopeGroupId=");
		sb.append(getScopeGroupId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", associatename=");
		sb.append(getAssociatename());
		sb.append(", relatesTo=");
		sb.append(getRelatesTo());
		sb.append(", nextApprover=");
		sb.append(getNextApprover());
		sb.append(", roleOfApprover=");
		sb.append(getRoleOfApprover());
		sb.append(", approverList=");
		sb.append(getApproverList());
		sb.append(", approverStep=");
		sb.append(getApproverStep());
		sb.append(", workflow=");
		sb.append(getWorkflow());
		sb.append(", workflowStep=");
		sb.append(getWorkflowStep());
		sb.append(", workflowId=");
		sb.append(getWorkflowId());
		sb.append(", dummy=");
		sb.append(getDummy());
		sb.append(", refCosId=");
		sb.append(getRefCosId());
		sb.append(", systemGenerated=");
		sb.append(getSystemGenerated());
		sb.append(", positionNumber=");
		sb.append(getPositionNumber());
		sb.append(", currentJobCode=");
		sb.append(getCurrentJobCode());
		sb.append(", currentDivision=");
		sb.append(getCurrentDivision());
		sb.append(", currentDivisionManager=");
		sb.append(getCurrentDivisionManager());
		sb.append(", currentDepartmentName=");
		sb.append(getCurrentDepartmentName());
		sb.append(", currentDepartmentNumber=");
		sb.append(getCurrentDepartmentNumber());
		sb.append(", currentDepartmentManager=");
		sb.append(getCurrentDepartmentManager());
		sb.append(", currentManagerName=");
		sb.append(getCurrentManagerName());
		sb.append(", currentManagerTitle=");
		sb.append(getCurrentManagerTitle());
		sb.append(", currentTeamNumber=");
		sb.append(getCurrentTeamNumber());
		sb.append(", currentShiftCode=");
		sb.append(getCurrentShiftCode());
		sb.append(", currentLeadershipAssignment=");
		sb.append(getCurrentLeadershipAssignment());
		sb.append(", currentManpowerRep=");
		sb.append(getCurrentManpowerRep());
		sb.append(", currentManagerAssocNumber=");
		sb.append(getCurrentManagerAssocNumber());
		sb.append(", sortApprovedList=");
		sb.append(getSortApprovedList());
		sb.append(", DuplicateApprovedList=");
		sb.append(getDuplicateApprovedList());
		sb.append(", DuplicateApprovedListStartIndex=");
		sb.append(getDuplicateApprovedListStartIndex());
		sb.append(", DuplicateApprovedListEndIndex=");
		sb.append(getDuplicateApprovedListEndIndex());
		sb.append(", announced=");
		sb.append(getAnnounced());
		sb.append(", currentPositionText=");
		sb.append(getCurrentPositionText());
		sb.append(", DuplicateCounter=");
		sb.append(getDuplicateCounter());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(220);

		sb.append("<model><model-name>");
		sb.append("com.ys.hmawfm.wfms.services.model.WFMS_COS");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cosId</column-name><column-value><![CDATA[");
		sb.append(getCosId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assoicateId</column-name><column-value><![CDATA[");
		sb.append(getAssoicateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newPositionNumber</column-name><column-value><![CDATA[");
		sb.append(getNewPositionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonCODE</column-name><column-value><![CDATA[");
		sb.append(getReasonCODE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>changeDescription</column-name><column-value><![CDATA[");
		sb.append(getChangeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newJobCode</column-name><column-value><![CDATA[");
		sb.append(getNewJobCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sameJobCode</column-name><column-value><![CDATA[");
		sb.append(getSameJobCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sameLeadership</column-name><column-value><![CDATA[");
		sb.append(getSameLeadership());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sameDept</column-name><column-value><![CDATA[");
		sb.append(getSameDept());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sameMgr</column-name><column-value><![CDATA[");
		sb.append(getSameMgr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>routingProcess</column-name><column-value><![CDATA[");
		sb.append(getRoutingProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationTo</column-name><column-value><![CDATA[");
		sb.append(getNotificationTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamNumber</column-name><column-value><![CDATA[");
		sb.append(getTeamNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shiftCode</column-name><column-value><![CDATA[");
		sb.append(getShiftCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mgrAssociateNumber</column-name><column-value><![CDATA[");
		sb.append(getMgrAssociateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manpowerCategiry</column-name><column-value><![CDATA[");
		sb.append(getManpowerCategiry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leadershipAssignment</column-name><column-value><![CDATA[");
		sb.append(getLeadershipAssignment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associateDateOfHire</column-name><column-value><![CDATA[");
		sb.append(getAssociateDateOfHire());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newDivision</column-name><column-value><![CDATA[");
		sb.append(getNewDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newDivisionManager</column-name><column-value><![CDATA[");
		sb.append(getNewDivisionManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newDepartmentName</column-name><column-value><![CDATA[");
		sb.append(getNewDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newDepartmentNumber</column-name><column-value><![CDATA[");
		sb.append(getNewDepartmentNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newDepartmentManager</column-name><column-value><![CDATA[");
		sb.append(getNewDepartmentManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newManagerName</column-name><column-value><![CDATA[");
		sb.append(getNewManagerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newManagerTitle</column-name><column-value><![CDATA[");
		sb.append(getNewManagerTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleteflagStatus</column-name><column-value><![CDATA[");
		sb.append(getDeleteflagStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RequistionId</column-name><column-value><![CDATA[");
		sb.append(getRequistionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scopeGroupId</column-name><column-value><![CDATA[");
		sb.append(getScopeGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associatename</column-name><column-value><![CDATA[");
		sb.append(getAssociatename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relatesTo</column-name><column-value><![CDATA[");
		sb.append(getRelatesTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextApprover</column-name><column-value><![CDATA[");
		sb.append(getNextApprover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleOfApprover</column-name><column-value><![CDATA[");
		sb.append(getRoleOfApprover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverList</column-name><column-value><![CDATA[");
		sb.append(getApproverList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverStep</column-name><column-value><![CDATA[");
		sb.append(getApproverStep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflow</column-name><column-value><![CDATA[");
		sb.append(getWorkflow());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowStep</column-name><column-value><![CDATA[");
		sb.append(getWorkflowStep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dummy</column-name><column-value><![CDATA[");
		sb.append(getDummy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refCosId</column-name><column-value><![CDATA[");
		sb.append(getRefCosId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>systemGenerated</column-name><column-value><![CDATA[");
		sb.append(getSystemGenerated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionNumber</column-name><column-value><![CDATA[");
		sb.append(getPositionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentJobCode</column-name><column-value><![CDATA[");
		sb.append(getCurrentJobCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDivision</column-name><column-value><![CDATA[");
		sb.append(getCurrentDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDivisionManager</column-name><column-value><![CDATA[");
		sb.append(getCurrentDivisionManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDepartmentName</column-name><column-value><![CDATA[");
		sb.append(getCurrentDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDepartmentNumber</column-name><column-value><![CDATA[");
		sb.append(getCurrentDepartmentNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDepartmentManager</column-name><column-value><![CDATA[");
		sb.append(getCurrentDepartmentManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentManagerName</column-name><column-value><![CDATA[");
		sb.append(getCurrentManagerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentManagerTitle</column-name><column-value><![CDATA[");
		sb.append(getCurrentManagerTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentTeamNumber</column-name><column-value><![CDATA[");
		sb.append(getCurrentTeamNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentShiftCode</column-name><column-value><![CDATA[");
		sb.append(getCurrentShiftCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentLeadershipAssignment</column-name><column-value><![CDATA[");
		sb.append(getCurrentLeadershipAssignment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentManpowerRep</column-name><column-value><![CDATA[");
		sb.append(getCurrentManpowerRep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentManagerAssocNumber</column-name><column-value><![CDATA[");
		sb.append(getCurrentManagerAssocNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortApprovedList</column-name><column-value><![CDATA[");
		sb.append(getSortApprovedList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DuplicateApprovedList</column-name><column-value><![CDATA[");
		sb.append(getDuplicateApprovedList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DuplicateApprovedListStartIndex</column-name><column-value><![CDATA[");
		sb.append(getDuplicateApprovedListStartIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DuplicateApprovedListEndIndex</column-name><column-value><![CDATA[");
		sb.append(getDuplicateApprovedListEndIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>announced</column-name><column-value><![CDATA[");
		sb.append(getAnnounced());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPositionText</column-name><column-value><![CDATA[");
		sb.append(getCurrentPositionText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DuplicateCounter</column-name><column-value><![CDATA[");
		sb.append(getDuplicateCounter());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WFMS_COS.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WFMS_COS.class
		};
	private String _cosId;
	private String _originalCosId;
	private String _assoicateId;
	private String _originalAssoicateId;
	private String _newPositionNumber;
	private String _originalNewPositionNumber;
	private String _action;
	private String _originalAction;
	private String _reasonCODE;
	private String _description;
	private String _changeDescription;
	private String _newJobCode;
	private String _sameJobCode;
	private String _sameLeadership;
	private String _sameDept;
	private String _sameMgr;
	private String _routingProcess;
	private String _notificationTo;
	private String _status;
	private String _originalStatus;
	private String _type;
	private String _effectiveDate;
	private String _teamNumber;
	private String _shiftCode;
	private String _mgrAssociateNumber;
	private String _manpowerCategiry;
	private String _comments;
	private String _leadershipAssignment;
	private String _associateDateOfHire;
	private String _newDivision;
	private String _newDivisionManager;
	private String _newDepartmentName;
	private String _newDepartmentNumber;
	private String _newDepartmentManager;
	private String _newManagerName;
	private String _newManagerTitle;
	private int _deleteflagStatus;
	private String _RequistionId;
	private long _companyId;
	private long _scopeGroupId;
	private String _createdBy;
	private Date _createDate;
	private String _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _associatename;
	private String _relatesTo;
	private String _nextApprover;
	private String _originalNextApprover;
	private String _roleOfApprover;
	private String _originalRoleOfApprover;
	private String _approverList;
	private int _approverStep;
	private String _workflow;
	private int _workflowStep;
	private String _workflowId;
	private String _dummy;
	private String _refCosId;
	private int _systemGenerated;
	private String _positionNumber;
	private String _originalPositionNumber;
	private String _currentJobCode;
	private String _currentDivision;
	private String _currentDivisionManager;
	private String _currentDepartmentName;
	private String _currentDepartmentNumber;
	private String _currentDepartmentManager;
	private String _currentManagerName;
	private String _currentManagerTitle;
	private String _currentTeamNumber;
	private String _currentShiftCode;
	private String _currentLeadershipAssignment;
	private String _currentManpowerRep;
	private String _currentManagerAssocNumber;
	private String _sortApprovedList;
	private String _DuplicateApprovedList;
	private int _DuplicateApprovedListStartIndex;
	private int _DuplicateApprovedListEndIndex;
	private int _announced;
	private int _currentPositionText;
	private int _DuplicateCounter;
	private long _columnBitmask;
	private WFMS_COS _escapedModel;
}