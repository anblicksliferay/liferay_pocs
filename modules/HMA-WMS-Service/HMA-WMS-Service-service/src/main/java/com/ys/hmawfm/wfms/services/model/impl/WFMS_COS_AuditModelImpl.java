/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ys.hmawfm.wfms.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.ys.hmawfm.wfms.services.model.WFMS_COS_Audit;
import com.ys.hmawfm.wfms.services.model.WFMS_COS_AuditModel;
import com.ys.hmawfm.wfms.services.model.WFMS_COS_AuditSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WFMS_COS_Audit service. Represents a row in the &quot;WFMS_COS_Audit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WFMS_COS_AuditModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WFMS_COS_AuditImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WFMS_COS_AuditImpl
 * @see WFMS_COS_Audit
 * @see WFMS_COS_AuditModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WFMS_COS_AuditModelImpl extends BaseModelImpl<WFMS_COS_Audit>
	implements WFMS_COS_AuditModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a WFMS_COS_Audit model instance should use the {@link WFMS_COS_Audit} interface instead.
	 */
	public static final String TABLE_NAME = "WFMS_COS_Audit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cosaId", Types.VARCHAR },
			{ "cosId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "createdBy", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "change_", Types.VARCHAR },
			{ "comments", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cosaId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cosId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("change_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table WFMS_COS_Audit (cosaId VARCHAR(75) not null primary key,cosId VARCHAR(75) null,userId LONG,createdBy VARCHAR(75) null,createDate DATE null,change_ TEXT null,comments TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table WFMS_COS_Audit";
	public static final String ORDER_BY_JPQL = " ORDER BY wfms_cos_Audit.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY WFMS_COS_Audit.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ys.hmawfm.wfms.services.model.WFMS_COS_Audit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ys.hmawfm.wfms.services.model.WFMS_COS_Audit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ys.hmawfm.wfms.services.model.WFMS_COS_Audit"),
			true);
	public static final long COSID_COLUMN_BITMASK = 1L;
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WFMS_COS_Audit toModel(WFMS_COS_AuditSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WFMS_COS_Audit model = new WFMS_COS_AuditImpl();

		model.setCosaId(soapModel.getCosaId());
		model.setCosId(soapModel.getCosId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreateDate(soapModel.getCreateDate());
		model.setChange(soapModel.getChange());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WFMS_COS_Audit> toModels(WFMS_COS_AuditSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WFMS_COS_Audit> models = new ArrayList<WFMS_COS_Audit>(soapModels.length);

		for (WFMS_COS_AuditSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"lock.expiration.time.com.ys.hmawfm.wfms.services.model.WFMS_COS_Audit"));

	public WFMS_COS_AuditModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _cosaId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCosaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cosaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return WFMS_COS_Audit.class;
	}

	@Override
	public String getModelClassName() {
		return WFMS_COS_Audit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cosaId", getCosaId());
		attributes.put("cosId", getCosId());
		attributes.put("userId", getUserId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createDate", getCreateDate());
		attributes.put("change", getChange());
		attributes.put("comments", getComments());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String cosaId = (String)attributes.get("cosaId");

		if (cosaId != null) {
			setCosaId(cosaId);
		}

		String cosId = (String)attributes.get("cosId");

		if (cosId != null) {
			setCosId(cosId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String change = (String)attributes.get("change");

		if (change != null) {
			setChange(change);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}
	}

	@JSON
	@Override
	public String getCosaId() {
		if (_cosaId == null) {
			return StringPool.BLANK;
		}
		else {
			return _cosaId;
		}
	}

	@Override
	public void setCosaId(String cosaId) {
		_cosaId = cosaId;
	}

	@JSON
	@Override
	public String getCosId() {
		if (_cosId == null) {
			return StringPool.BLANK;
		}
		else {
			return _cosId;
		}
	}

	@Override
	public void setCosId(String cosId) {
		_columnBitmask |= COSID_COLUMN_BITMASK;

		if (_originalCosId == null) {
			_originalCosId = _cosId;
		}

		_cosId = cosId;
	}

	public String getOriginalCosId() {
		return GetterUtil.getString(_originalCosId);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getChange() {
		if (_change == null) {
			return StringPool.BLANK;
		}
		else {
			return _change;
		}
	}

	@Override
	public void setChange(String change) {
		_change = change;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public WFMS_COS_Audit toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WFMS_COS_Audit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WFMS_COS_AuditImpl wfms_cos_AuditImpl = new WFMS_COS_AuditImpl();

		wfms_cos_AuditImpl.setCosaId(getCosaId());
		wfms_cos_AuditImpl.setCosId(getCosId());
		wfms_cos_AuditImpl.setUserId(getUserId());
		wfms_cos_AuditImpl.setCreatedBy(getCreatedBy());
		wfms_cos_AuditImpl.setCreateDate(getCreateDate());
		wfms_cos_AuditImpl.setChange(getChange());
		wfms_cos_AuditImpl.setComments(getComments());

		wfms_cos_AuditImpl.resetOriginalValues();

		return wfms_cos_AuditImpl;
	}

	@Override
	public int compareTo(WFMS_COS_Audit wfms_cos_Audit) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				wfms_cos_Audit.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WFMS_COS_Audit)) {
			return false;
		}

		WFMS_COS_Audit wfms_cos_Audit = (WFMS_COS_Audit)obj;

		String primaryKey = wfms_cos_Audit.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WFMS_COS_AuditModelImpl wfms_cos_AuditModelImpl = this;

		wfms_cos_AuditModelImpl._originalCosId = wfms_cos_AuditModelImpl._cosId;

		wfms_cos_AuditModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WFMS_COS_Audit> toCacheModel() {
		WFMS_COS_AuditCacheModel wfms_cos_AuditCacheModel = new WFMS_COS_AuditCacheModel();

		wfms_cos_AuditCacheModel.cosaId = getCosaId();

		String cosaId = wfms_cos_AuditCacheModel.cosaId;

		if ((cosaId != null) && (cosaId.length() == 0)) {
			wfms_cos_AuditCacheModel.cosaId = null;
		}

		wfms_cos_AuditCacheModel.cosId = getCosId();

		String cosId = wfms_cos_AuditCacheModel.cosId;

		if ((cosId != null) && (cosId.length() == 0)) {
			wfms_cos_AuditCacheModel.cosId = null;
		}

		wfms_cos_AuditCacheModel.userId = getUserId();

		wfms_cos_AuditCacheModel.createdBy = getCreatedBy();

		String createdBy = wfms_cos_AuditCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			wfms_cos_AuditCacheModel.createdBy = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			wfms_cos_AuditCacheModel.createDate = createDate.getTime();
		}
		else {
			wfms_cos_AuditCacheModel.createDate = Long.MIN_VALUE;
		}

		wfms_cos_AuditCacheModel.change = getChange();

		String change = wfms_cos_AuditCacheModel.change;

		if ((change != null) && (change.length() == 0)) {
			wfms_cos_AuditCacheModel.change = null;
		}

		wfms_cos_AuditCacheModel.comments = getComments();

		String comments = wfms_cos_AuditCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			wfms_cos_AuditCacheModel.comments = null;
		}

		return wfms_cos_AuditCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{cosaId=");
		sb.append(getCosaId());
		sb.append(", cosId=");
		sb.append(getCosId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", change=");
		sb.append(getChange());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ys.hmawfm.wfms.services.model.WFMS_COS_Audit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cosaId</column-name><column-value><![CDATA[");
		sb.append(getCosaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cosId</column-name><column-value><![CDATA[");
		sb.append(getCosId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>change</column-name><column-value><![CDATA[");
		sb.append(getChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WFMS_COS_Audit.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WFMS_COS_Audit.class
		};
	private String _cosaId;
	private String _cosId;
	private String _originalCosId;
	private long _userId;
	private String _createdBy;
	private Date _createDate;
	private String _change;
	private String _comments;
	private long _columnBitmask;
	private WFMS_COS_Audit _escapedModel;
}