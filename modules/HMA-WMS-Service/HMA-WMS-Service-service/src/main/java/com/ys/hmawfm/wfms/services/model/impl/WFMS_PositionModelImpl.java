/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ys.hmawfm.wfms.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.ys.hmawfm.wfms.services.model.WFMS_Position;
import com.ys.hmawfm.wfms.services.model.WFMS_PositionModel;
import com.ys.hmawfm.wfms.services.model.WFMS_PositionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WFMS_Position service. Represents a row in the &quot;WFMS_Position&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WFMS_PositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WFMS_PositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WFMS_PositionImpl
 * @see WFMS_Position
 * @see WFMS_PositionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WFMS_PositionModelImpl extends BaseModelImpl<WFMS_Position>
	implements WFMS_PositionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a WFMS_Position model instance should use the {@link WFMS_Position} interface instead.
	 */
	public static final String TABLE_NAME = "WFMS_Position";
	public static final Object[][] TABLE_COLUMNS = {
			{ "pId", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "scopeGroupId", Types.BIGINT },
			{ "createdBy", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "active_", Types.BOOLEAN },
			{ "number_", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "reportsTo", Types.VARCHAR },
			{ "autoGenerateReq", Types.VARCHAR },
			{ "critical", Types.BOOLEAN },
			{ "division", Types.VARCHAR },
			{ "departmentName", Types.VARCHAR },
			{ "departmentNumber", Types.VARCHAR },
			{ "line", Types.VARCHAR },
			{ "ladder", Types.VARCHAR },
			{ "mpCatBugdet", Types.VARCHAR },
			{ "mpCatFilledWith", Types.VARCHAR },
			{ "positionClass", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "level", Types.VARCHAR },
			{ "leadershipAssignment", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "subCategory", Types.VARCHAR },
			{ "workforceCategory", Types.VARCHAR },
			{ "empCategory", Types.VARCHAR },
			{ "empCategoryDesc", Types.VARCHAR },
			{ "yearEst", Types.VARCHAR },
			{ "reasonsFor", Types.VARCHAR },
			{ "reavailuationDate", Types.VARCHAR },
			{ "associateNumber", Types.VARCHAR },
			{ "associateName", Types.VARCHAR },
			{ "associateTitle", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "typicalJobTitle", Types.VARCHAR },
			{ "minJobKnowHow", Types.VARCHAR },
			{ "duties", Types.VARCHAR },
			{ "tasksPerformed", Types.VARCHAR },
			{ "lengthOfService", Types.VARCHAR },
			{ "degree", Types.VARCHAR },
			{ "reqSkills", Types.VARCHAR },
			{ "desiredSkills", Types.VARCHAR },
			{ "environment", Types.VARCHAR },
			{ "weeklyOvertime", Types.VARCHAR },
			{ "frequencyOfTravel", Types.VARCHAR },
			{ "history", Types.VARCHAR },
			{ "other", Types.VARCHAR },
			{ "departmentManager", Types.VARCHAR },
			{ "divisionManager", Types.VARCHAR },
			{ "relatesTo", Types.VARCHAR },
			{ "nextApprover", Types.VARCHAR },
			{ "workflow", Types.VARCHAR },
			{ "workflowStep", Types.INTEGER },
			{ "workflowId", Types.VARCHAR },
			{ "dummy", Types.VARCHAR },
			{ "refPosId", Types.VARCHAR },
			{ "ismodify", Types.BOOLEAN },
			{ "disapproveComments", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scopeGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("number_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportsTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("autoGenerateReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("critical", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("division", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("line", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ladder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mpCatBugdet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mpCatFilledWith", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("positionClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leadershipAssignment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workforceCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empCategoryDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("yearEst", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonsFor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reavailuationDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("associateNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("associateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("associateTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typicalJobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minJobKnowHow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duties", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tasksPerformed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lengthOfService", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("degree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reqSkills", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("desiredSkills", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("environment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("weeklyOvertime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("frequencyOfTravel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("history", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("other", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("divisionManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("relatesTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nextApprover", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workflow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workflowStep", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("workflowId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dummy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("refPosId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ismodify", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("disapproveComments", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table WFMS_Position (pId VARCHAR(75) not null primary key,companyId LONG,scopeGroupId LONG,createdBy VARCHAR(75) null,createDate DATE null,modifiedBy VARCHAR(75) null,modifiedDate DATE null,active_ BOOLEAN,number_ VARCHAR(75) null,description VARCHAR(2000) null,status VARCHAR(75) null,reportsTo VARCHAR(75) null,autoGenerateReq VARCHAR(75) null,critical BOOLEAN,division VARCHAR(75) null,departmentName VARCHAR(75) null,departmentNumber VARCHAR(75) null,line VARCHAR(75) null,ladder VARCHAR(75) null,mpCatBugdet VARCHAR(75) null,mpCatFilledWith VARCHAR(75) null,positionClass VARCHAR(75) null,type_ VARCHAR(75) null,level VARCHAR(75) null,leadershipAssignment VARCHAR(75) null,category VARCHAR(75) null,subCategory VARCHAR(75) null,workforceCategory VARCHAR(75) null,empCategory VARCHAR(75) null,empCategoryDesc VARCHAR(1500) null,yearEst VARCHAR(150) null,reasonsFor TEXT null,reavailuationDate VARCHAR(150) null,associateNumber VARCHAR(75) null,associateName VARCHAR(75) null,associateTitle VARCHAR(75) null,comments TEXT null,typicalJobTitle TEXT null,minJobKnowHow TEXT null,duties TEXT null,tasksPerformed TEXT null,lengthOfService TEXT null,degree TEXT null,reqSkills TEXT null,desiredSkills TEXT null,environment TEXT null,weeklyOvertime TEXT null,frequencyOfTravel TEXT null,history TEXT null,other TEXT null,departmentManager VARCHAR(75) null,divisionManager VARCHAR(75) null,relatesTo VARCHAR(75) null,nextApprover TEXT null,workflow VARCHAR(75) null,workflowStep INTEGER,workflowId VARCHAR(75) null,dummy VARCHAR(75) null,refPosId VARCHAR(75) null,ismodify BOOLEAN,disapproveComments TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table WFMS_Position";
	public static final String ORDER_BY_JPQL = " ORDER BY wfms_Position.pId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WFMS_Position.pId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ys.hmawfm.wfms.services.model.WFMS_Position"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ys.hmawfm.wfms.services.model.WFMS_Position"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ys.hmawfm.wfms.services.model.WFMS_Position"),
			true);
	public static final long ASSOCIATENUMBER_COLUMN_BITMASK = 1L;
	public static final long AUTOGENERATEREQ_COLUMN_BITMASK = 2L;
	public static final long CATEGORY_COLUMN_BITMASK = 4L;
	public static final long CREATEDBY_COLUMN_BITMASK = 8L;
	public static final long DEPARTMENTNAME_COLUMN_BITMASK = 16L;
	public static final long DUMMY_COLUMN_BITMASK = 32L;
	public static final long NEXTAPPROVER_COLUMN_BITMASK = 64L;
	public static final long NUMBER_COLUMN_BITMASK = 128L;
	public static final long PID_COLUMN_BITMASK = 256L;
	public static final long REFPOSID_COLUMN_BITMASK = 512L;
	public static final long REPORTSTO_COLUMN_BITMASK = 1024L;
	public static final long STATUS_COLUMN_BITMASK = 2048L;
	public static final long WORKFLOWID_COLUMN_BITMASK = 4096L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WFMS_Position toModel(WFMS_PositionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WFMS_Position model = new WFMS_PositionImpl();

		model.setPId(soapModel.getPId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setScopeGroupId(soapModel.getScopeGroupId());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.getActive());
		model.setNumber(soapModel.getNumber());
		model.setDescription(soapModel.getDescription());
		model.setStatus(soapModel.getStatus());
		model.setReportsTo(soapModel.getReportsTo());
		model.setAutoGenerateReq(soapModel.getAutoGenerateReq());
		model.setCritical(soapModel.getCritical());
		model.setDivision(soapModel.getDivision());
		model.setDepartmentName(soapModel.getDepartmentName());
		model.setDepartmentNumber(soapModel.getDepartmentNumber());
		model.setLine(soapModel.getLine());
		model.setLadder(soapModel.getLadder());
		model.setMpCatBugdet(soapModel.getMpCatBugdet());
		model.setMpCatFilledWith(soapModel.getMpCatFilledWith());
		model.setPositionClass(soapModel.getPositionClass());
		model.setType(soapModel.getType());
		model.setLevel(soapModel.getLevel());
		model.setLeadershipAssignment(soapModel.getLeadershipAssignment());
		model.setCategory(soapModel.getCategory());
		model.setSubCategory(soapModel.getSubCategory());
		model.setWorkforceCategory(soapModel.getWorkforceCategory());
		model.setEmpCategory(soapModel.getEmpCategory());
		model.setEmpCategoryDesc(soapModel.getEmpCategoryDesc());
		model.setYearEst(soapModel.getYearEst());
		model.setReasonsFor(soapModel.getReasonsFor());
		model.setReavailuationDate(soapModel.getReavailuationDate());
		model.setAssociateNumber(soapModel.getAssociateNumber());
		model.setAssociateName(soapModel.getAssociateName());
		model.setAssociateTitle(soapModel.getAssociateTitle());
		model.setComments(soapModel.getComments());
		model.setTypicalJobTitle(soapModel.getTypicalJobTitle());
		model.setMinJobKnowHow(soapModel.getMinJobKnowHow());
		model.setDuties(soapModel.getDuties());
		model.setTasksPerformed(soapModel.getTasksPerformed());
		model.setLengthOfService(soapModel.getLengthOfService());
		model.setDegree(soapModel.getDegree());
		model.setReqSkills(soapModel.getReqSkills());
		model.setDesiredSkills(soapModel.getDesiredSkills());
		model.setEnvironment(soapModel.getEnvironment());
		model.setWeeklyOvertime(soapModel.getWeeklyOvertime());
		model.setFrequencyOfTravel(soapModel.getFrequencyOfTravel());
		model.setHistory(soapModel.getHistory());
		model.setOther(soapModel.getOther());
		model.setDepartmentManager(soapModel.getDepartmentManager());
		model.setDivisionManager(soapModel.getDivisionManager());
		model.setRelatesTo(soapModel.getRelatesTo());
		model.setNextApprover(soapModel.getNextApprover());
		model.setWorkflow(soapModel.getWorkflow());
		model.setWorkflowStep(soapModel.getWorkflowStep());
		model.setWorkflowId(soapModel.getWorkflowId());
		model.setDummy(soapModel.getDummy());
		model.setRefPosId(soapModel.getRefPosId());
		model.setIsmodify(soapModel.getIsmodify());
		model.setDisapproveComments(soapModel.getDisapproveComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WFMS_Position> toModels(WFMS_PositionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WFMS_Position> models = new ArrayList<WFMS_Position>(soapModels.length);

		for (WFMS_PositionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ys.hmawfm.wfms.services.service.util.ServiceProps.get(
				"lock.expiration.time.com.ys.hmawfm.wfms.services.model.WFMS_Position"));

	public WFMS_PositionModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _pId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return WFMS_Position.class;
	}

	@Override
	public String getModelClassName() {
		return WFMS_Position.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("pId", getPId());
		attributes.put("companyId", getCompanyId());
		attributes.put("scopeGroupId", getScopeGroupId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("active", getActive());
		attributes.put("number", getNumber());
		attributes.put("description", getDescription());
		attributes.put("status", getStatus());
		attributes.put("reportsTo", getReportsTo());
		attributes.put("autoGenerateReq", getAutoGenerateReq());
		attributes.put("critical", getCritical());
		attributes.put("division", getDivision());
		attributes.put("departmentName", getDepartmentName());
		attributes.put("departmentNumber", getDepartmentNumber());
		attributes.put("line", getLine());
		attributes.put("ladder", getLadder());
		attributes.put("mpCatBugdet", getMpCatBugdet());
		attributes.put("mpCatFilledWith", getMpCatFilledWith());
		attributes.put("positionClass", getPositionClass());
		attributes.put("type", getType());
		attributes.put("level", getLevel());
		attributes.put("leadershipAssignment", getLeadershipAssignment());
		attributes.put("category", getCategory());
		attributes.put("subCategory", getSubCategory());
		attributes.put("workforceCategory", getWorkforceCategory());
		attributes.put("empCategory", getEmpCategory());
		attributes.put("empCategoryDesc", getEmpCategoryDesc());
		attributes.put("yearEst", getYearEst());
		attributes.put("reasonsFor", getReasonsFor());
		attributes.put("reavailuationDate", getReavailuationDate());
		attributes.put("associateNumber", getAssociateNumber());
		attributes.put("associateName", getAssociateName());
		attributes.put("associateTitle", getAssociateTitle());
		attributes.put("comments", getComments());
		attributes.put("typicalJobTitle", getTypicalJobTitle());
		attributes.put("minJobKnowHow", getMinJobKnowHow());
		attributes.put("duties", getDuties());
		attributes.put("tasksPerformed", getTasksPerformed());
		attributes.put("lengthOfService", getLengthOfService());
		attributes.put("degree", getDegree());
		attributes.put("reqSkills", getReqSkills());
		attributes.put("desiredSkills", getDesiredSkills());
		attributes.put("environment", getEnvironment());
		attributes.put("weeklyOvertime", getWeeklyOvertime());
		attributes.put("frequencyOfTravel", getFrequencyOfTravel());
		attributes.put("history", getHistory());
		attributes.put("other", getOther());
		attributes.put("departmentManager", getDepartmentManager());
		attributes.put("divisionManager", getDivisionManager());
		attributes.put("relatesTo", getRelatesTo());
		attributes.put("nextApprover", getNextApprover());
		attributes.put("workflow", getWorkflow());
		attributes.put("workflowStep", getWorkflowStep());
		attributes.put("workflowId", getWorkflowId());
		attributes.put("dummy", getDummy());
		attributes.put("refPosId", getRefPosId());
		attributes.put("ismodify", getIsmodify());
		attributes.put("disapproveComments", getDisapproveComments());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String pId = (String)attributes.get("pId");

		if (pId != null) {
			setPId(pId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long scopeGroupId = (Long)attributes.get("scopeGroupId");

		if (scopeGroupId != null) {
			setScopeGroupId(scopeGroupId);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		String number = (String)attributes.get("number");

		if (number != null) {
			setNumber(number);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String reportsTo = (String)attributes.get("reportsTo");

		if (reportsTo != null) {
			setReportsTo(reportsTo);
		}

		String autoGenerateReq = (String)attributes.get("autoGenerateReq");

		if (autoGenerateReq != null) {
			setAutoGenerateReq(autoGenerateReq);
		}

		Boolean critical = (Boolean)attributes.get("critical");

		if (critical != null) {
			setCritical(critical);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String departmentName = (String)attributes.get("departmentName");

		if (departmentName != null) {
			setDepartmentName(departmentName);
		}

		String departmentNumber = (String)attributes.get("departmentNumber");

		if (departmentNumber != null) {
			setDepartmentNumber(departmentNumber);
		}

		String line = (String)attributes.get("line");

		if (line != null) {
			setLine(line);
		}

		String ladder = (String)attributes.get("ladder");

		if (ladder != null) {
			setLadder(ladder);
		}

		String mpCatBugdet = (String)attributes.get("mpCatBugdet");

		if (mpCatBugdet != null) {
			setMpCatBugdet(mpCatBugdet);
		}

		String mpCatFilledWith = (String)attributes.get("mpCatFilledWith");

		if (mpCatFilledWith != null) {
			setMpCatFilledWith(mpCatFilledWith);
		}

		String positionClass = (String)attributes.get("positionClass");

		if (positionClass != null) {
			setPositionClass(positionClass);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String level = (String)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String leadershipAssignment = (String)attributes.get(
				"leadershipAssignment");

		if (leadershipAssignment != null) {
			setLeadershipAssignment(leadershipAssignment);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String subCategory = (String)attributes.get("subCategory");

		if (subCategory != null) {
			setSubCategory(subCategory);
		}

		String workforceCategory = (String)attributes.get("workforceCategory");

		if (workforceCategory != null) {
			setWorkforceCategory(workforceCategory);
		}

		String empCategory = (String)attributes.get("empCategory");

		if (empCategory != null) {
			setEmpCategory(empCategory);
		}

		String empCategoryDesc = (String)attributes.get("empCategoryDesc");

		if (empCategoryDesc != null) {
			setEmpCategoryDesc(empCategoryDesc);
		}

		String yearEst = (String)attributes.get("yearEst");

		if (yearEst != null) {
			setYearEst(yearEst);
		}

		String reasonsFor = (String)attributes.get("reasonsFor");

		if (reasonsFor != null) {
			setReasonsFor(reasonsFor);
		}

		String reavailuationDate = (String)attributes.get("reavailuationDate");

		if (reavailuationDate != null) {
			setReavailuationDate(reavailuationDate);
		}

		String associateNumber = (String)attributes.get("associateNumber");

		if (associateNumber != null) {
			setAssociateNumber(associateNumber);
		}

		String associateName = (String)attributes.get("associateName");

		if (associateName != null) {
			setAssociateName(associateName);
		}

		String associateTitle = (String)attributes.get("associateTitle");

		if (associateTitle != null) {
			setAssociateTitle(associateTitle);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String typicalJobTitle = (String)attributes.get("typicalJobTitle");

		if (typicalJobTitle != null) {
			setTypicalJobTitle(typicalJobTitle);
		}

		String minJobKnowHow = (String)attributes.get("minJobKnowHow");

		if (minJobKnowHow != null) {
			setMinJobKnowHow(minJobKnowHow);
		}

		String duties = (String)attributes.get("duties");

		if (duties != null) {
			setDuties(duties);
		}

		String tasksPerformed = (String)attributes.get("tasksPerformed");

		if (tasksPerformed != null) {
			setTasksPerformed(tasksPerformed);
		}

		String lengthOfService = (String)attributes.get("lengthOfService");

		if (lengthOfService != null) {
			setLengthOfService(lengthOfService);
		}

		String degree = (String)attributes.get("degree");

		if (degree != null) {
			setDegree(degree);
		}

		String reqSkills = (String)attributes.get("reqSkills");

		if (reqSkills != null) {
			setReqSkills(reqSkills);
		}

		String desiredSkills = (String)attributes.get("desiredSkills");

		if (desiredSkills != null) {
			setDesiredSkills(desiredSkills);
		}

		String environment = (String)attributes.get("environment");

		if (environment != null) {
			setEnvironment(environment);
		}

		String weeklyOvertime = (String)attributes.get("weeklyOvertime");

		if (weeklyOvertime != null) {
			setWeeklyOvertime(weeklyOvertime);
		}

		String frequencyOfTravel = (String)attributes.get("frequencyOfTravel");

		if (frequencyOfTravel != null) {
			setFrequencyOfTravel(frequencyOfTravel);
		}

		String history = (String)attributes.get("history");

		if (history != null) {
			setHistory(history);
		}

		String other = (String)attributes.get("other");

		if (other != null) {
			setOther(other);
		}

		String departmentManager = (String)attributes.get("departmentManager");

		if (departmentManager != null) {
			setDepartmentManager(departmentManager);
		}

		String divisionManager = (String)attributes.get("divisionManager");

		if (divisionManager != null) {
			setDivisionManager(divisionManager);
		}

		String relatesTo = (String)attributes.get("relatesTo");

		if (relatesTo != null) {
			setRelatesTo(relatesTo);
		}

		String nextApprover = (String)attributes.get("nextApprover");

		if (nextApprover != null) {
			setNextApprover(nextApprover);
		}

		String workflow = (String)attributes.get("workflow");

		if (workflow != null) {
			setWorkflow(workflow);
		}

		Integer workflowStep = (Integer)attributes.get("workflowStep");

		if (workflowStep != null) {
			setWorkflowStep(workflowStep);
		}

		String workflowId = (String)attributes.get("workflowId");

		if (workflowId != null) {
			setWorkflowId(workflowId);
		}

		String dummy = (String)attributes.get("dummy");

		if (dummy != null) {
			setDummy(dummy);
		}

		String refPosId = (String)attributes.get("refPosId");

		if (refPosId != null) {
			setRefPosId(refPosId);
		}

		Boolean ismodify = (Boolean)attributes.get("ismodify");

		if (ismodify != null) {
			setIsmodify(ismodify);
		}

		String disapproveComments = (String)attributes.get("disapproveComments");

		if (disapproveComments != null) {
			setDisapproveComments(disapproveComments);
		}
	}

	@JSON
	@Override
	public String getPId() {
		if (_pId == null) {
			return StringPool.BLANK;
		}
		else {
			return _pId;
		}
	}

	@Override
	public void setPId(String pId) {
		_columnBitmask = -1L;

		if (_originalPId == null) {
			_originalPId = _pId;
		}

		_pId = pId;
	}

	public String getOriginalPId() {
		return GetterUtil.getString(_originalPId);
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getScopeGroupId() {
		return _scopeGroupId;
	}

	@Override
	public void setScopeGroupId(long scopeGroupId) {
		_scopeGroupId = scopeGroupId;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_columnBitmask |= CREATEDBY_COLUMN_BITMASK;

		if (_originalCreatedBy == null) {
			_originalCreatedBy = _createdBy;
		}

		_createdBy = createdBy;
	}

	public String getOriginalCreatedBy() {
		return GetterUtil.getString(_originalCreatedBy);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	@Override
	public String getNumber() {
		if (_number == null) {
			return StringPool.BLANK;
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		_columnBitmask |= NUMBER_COLUMN_BITMASK;

		if (_originalNumber == null) {
			_originalNumber = _number;
		}

		_number = number;
	}

	public String getOriginalNumber() {
		return GetterUtil.getString(_originalNumber);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getReportsTo() {
		if (_reportsTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportsTo;
		}
	}

	@Override
	public void setReportsTo(String reportsTo) {
		_columnBitmask |= REPORTSTO_COLUMN_BITMASK;

		if (_originalReportsTo == null) {
			_originalReportsTo = _reportsTo;
		}

		_reportsTo = reportsTo;
	}

	public String getOriginalReportsTo() {
		return GetterUtil.getString(_originalReportsTo);
	}

	@JSON
	@Override
	public String getAutoGenerateReq() {
		if (_autoGenerateReq == null) {
			return StringPool.BLANK;
		}
		else {
			return _autoGenerateReq;
		}
	}

	@Override
	public void setAutoGenerateReq(String autoGenerateReq) {
		_columnBitmask |= AUTOGENERATEREQ_COLUMN_BITMASK;

		if (_originalAutoGenerateReq == null) {
			_originalAutoGenerateReq = _autoGenerateReq;
		}

		_autoGenerateReq = autoGenerateReq;
	}

	public String getOriginalAutoGenerateReq() {
		return GetterUtil.getString(_originalAutoGenerateReq);
	}

	@JSON
	@Override
	public boolean getCritical() {
		return _critical;
	}

	@JSON
	@Override
	public boolean isCritical() {
		return _critical;
	}

	@Override
	public void setCritical(boolean critical) {
		_critical = critical;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getDepartmentName() {
		if (_departmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentName;
		}
	}

	@Override
	public void setDepartmentName(String departmentName) {
		_columnBitmask |= DEPARTMENTNAME_COLUMN_BITMASK;

		if (_originalDepartmentName == null) {
			_originalDepartmentName = _departmentName;
		}

		_departmentName = departmentName;
	}

	public String getOriginalDepartmentName() {
		return GetterUtil.getString(_originalDepartmentName);
	}

	@JSON
	@Override
	public String getDepartmentNumber() {
		if (_departmentNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentNumber;
		}
	}

	@Override
	public void setDepartmentNumber(String departmentNumber) {
		_departmentNumber = departmentNumber;
	}

	@JSON
	@Override
	public String getLine() {
		if (_line == null) {
			return StringPool.BLANK;
		}
		else {
			return _line;
		}
	}

	@Override
	public void setLine(String line) {
		_line = line;
	}

	@JSON
	@Override
	public String getLadder() {
		if (_ladder == null) {
			return StringPool.BLANK;
		}
		else {
			return _ladder;
		}
	}

	@Override
	public void setLadder(String ladder) {
		_ladder = ladder;
	}

	@JSON
	@Override
	public String getMpCatBugdet() {
		if (_mpCatBugdet == null) {
			return StringPool.BLANK;
		}
		else {
			return _mpCatBugdet;
		}
	}

	@Override
	public void setMpCatBugdet(String mpCatBugdet) {
		_mpCatBugdet = mpCatBugdet;
	}

	@JSON
	@Override
	public String getMpCatFilledWith() {
		if (_mpCatFilledWith == null) {
			return StringPool.BLANK;
		}
		else {
			return _mpCatFilledWith;
		}
	}

	@Override
	public void setMpCatFilledWith(String mpCatFilledWith) {
		_mpCatFilledWith = mpCatFilledWith;
	}

	@JSON
	@Override
	public String getPositionClass() {
		if (_positionClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionClass;
		}
	}

	@Override
	public void setPositionClass(String positionClass) {
		_positionClass = positionClass;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getLevel() {
		if (_level == null) {
			return StringPool.BLANK;
		}
		else {
			return _level;
		}
	}

	@Override
	public void setLevel(String level) {
		_level = level;
	}

	@JSON
	@Override
	public String getLeadershipAssignment() {
		if (_leadershipAssignment == null) {
			return StringPool.BLANK;
		}
		else {
			return _leadershipAssignment;
		}
	}

	@Override
	public void setLeadershipAssignment(String leadershipAssignment) {
		_leadershipAssignment = leadershipAssignment;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_columnBitmask |= CATEGORY_COLUMN_BITMASK;

		if (_originalCategory == null) {
			_originalCategory = _category;
		}

		_category = category;
	}

	public String getOriginalCategory() {
		return GetterUtil.getString(_originalCategory);
	}

	@JSON
	@Override
	public String getSubCategory() {
		if (_subCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _subCategory;
		}
	}

	@Override
	public void setSubCategory(String subCategory) {
		_subCategory = subCategory;
	}

	@JSON
	@Override
	public String getWorkforceCategory() {
		if (_workforceCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _workforceCategory;
		}
	}

	@Override
	public void setWorkforceCategory(String workforceCategory) {
		_workforceCategory = workforceCategory;
	}

	@JSON
	@Override
	public String getEmpCategory() {
		if (_empCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _empCategory;
		}
	}

	@Override
	public void setEmpCategory(String empCategory) {
		_empCategory = empCategory;
	}

	@JSON
	@Override
	public String getEmpCategoryDesc() {
		if (_empCategoryDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _empCategoryDesc;
		}
	}

	@Override
	public void setEmpCategoryDesc(String empCategoryDesc) {
		_empCategoryDesc = empCategoryDesc;
	}

	@JSON
	@Override
	public String getYearEst() {
		if (_yearEst == null) {
			return StringPool.BLANK;
		}
		else {
			return _yearEst;
		}
	}

	@Override
	public void setYearEst(String yearEst) {
		_yearEst = yearEst;
	}

	@JSON
	@Override
	public String getReasonsFor() {
		if (_reasonsFor == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonsFor;
		}
	}

	@Override
	public void setReasonsFor(String reasonsFor) {
		_reasonsFor = reasonsFor;
	}

	@JSON
	@Override
	public String getReavailuationDate() {
		if (_reavailuationDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _reavailuationDate;
		}
	}

	@Override
	public void setReavailuationDate(String reavailuationDate) {
		_reavailuationDate = reavailuationDate;
	}

	@JSON
	@Override
	public String getAssociateNumber() {
		if (_associateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _associateNumber;
		}
	}

	@Override
	public void setAssociateNumber(String associateNumber) {
		_columnBitmask |= ASSOCIATENUMBER_COLUMN_BITMASK;

		if (_originalAssociateNumber == null) {
			_originalAssociateNumber = _associateNumber;
		}

		_associateNumber = associateNumber;
	}

	public String getOriginalAssociateNumber() {
		return GetterUtil.getString(_originalAssociateNumber);
	}

	@JSON
	@Override
	public String getAssociateName() {
		if (_associateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _associateName;
		}
	}

	@Override
	public void setAssociateName(String associateName) {
		_associateName = associateName;
	}

	@JSON
	@Override
	public String getAssociateTitle() {
		if (_associateTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _associateTitle;
		}
	}

	@Override
	public void setAssociateTitle(String associateTitle) {
		_associateTitle = associateTitle;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getTypicalJobTitle() {
		if (_typicalJobTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _typicalJobTitle;
		}
	}

	@Override
	public void setTypicalJobTitle(String typicalJobTitle) {
		_typicalJobTitle = typicalJobTitle;
	}

	@JSON
	@Override
	public String getMinJobKnowHow() {
		if (_minJobKnowHow == null) {
			return StringPool.BLANK;
		}
		else {
			return _minJobKnowHow;
		}
	}

	@Override
	public void setMinJobKnowHow(String minJobKnowHow) {
		_minJobKnowHow = minJobKnowHow;
	}

	@JSON
	@Override
	public String getDuties() {
		if (_duties == null) {
			return StringPool.BLANK;
		}
		else {
			return _duties;
		}
	}

	@Override
	public void setDuties(String duties) {
		_duties = duties;
	}

	@JSON
	@Override
	public String getTasksPerformed() {
		if (_tasksPerformed == null) {
			return StringPool.BLANK;
		}
		else {
			return _tasksPerformed;
		}
	}

	@Override
	public void setTasksPerformed(String tasksPerformed) {
		_tasksPerformed = tasksPerformed;
	}

	@JSON
	@Override
	public String getLengthOfService() {
		if (_lengthOfService == null) {
			return StringPool.BLANK;
		}
		else {
			return _lengthOfService;
		}
	}

	@Override
	public void setLengthOfService(String lengthOfService) {
		_lengthOfService = lengthOfService;
	}

	@JSON
	@Override
	public String getDegree() {
		if (_degree == null) {
			return StringPool.BLANK;
		}
		else {
			return _degree;
		}
	}

	@Override
	public void setDegree(String degree) {
		_degree = degree;
	}

	@JSON
	@Override
	public String getReqSkills() {
		if (_reqSkills == null) {
			return StringPool.BLANK;
		}
		else {
			return _reqSkills;
		}
	}

	@Override
	public void setReqSkills(String reqSkills) {
		_reqSkills = reqSkills;
	}

	@JSON
	@Override
	public String getDesiredSkills() {
		if (_desiredSkills == null) {
			return StringPool.BLANK;
		}
		else {
			return _desiredSkills;
		}
	}

	@Override
	public void setDesiredSkills(String desiredSkills) {
		_desiredSkills = desiredSkills;
	}

	@JSON
	@Override
	public String getEnvironment() {
		if (_environment == null) {
			return StringPool.BLANK;
		}
		else {
			return _environment;
		}
	}

	@Override
	public void setEnvironment(String environment) {
		_environment = environment;
	}

	@JSON
	@Override
	public String getWeeklyOvertime() {
		if (_weeklyOvertime == null) {
			return StringPool.BLANK;
		}
		else {
			return _weeklyOvertime;
		}
	}

	@Override
	public void setWeeklyOvertime(String weeklyOvertime) {
		_weeklyOvertime = weeklyOvertime;
	}

	@JSON
	@Override
	public String getFrequencyOfTravel() {
		if (_frequencyOfTravel == null) {
			return StringPool.BLANK;
		}
		else {
			return _frequencyOfTravel;
		}
	}

	@Override
	public void setFrequencyOfTravel(String frequencyOfTravel) {
		_frequencyOfTravel = frequencyOfTravel;
	}

	@JSON
	@Override
	public String getHistory() {
		if (_history == null) {
			return StringPool.BLANK;
		}
		else {
			return _history;
		}
	}

	@Override
	public void setHistory(String history) {
		_history = history;
	}

	@JSON
	@Override
	public String getOther() {
		if (_other == null) {
			return StringPool.BLANK;
		}
		else {
			return _other;
		}
	}

	@Override
	public void setOther(String other) {
		_other = other;
	}

	@JSON
	@Override
	public String getDepartmentManager() {
		if (_departmentManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentManager;
		}
	}

	@Override
	public void setDepartmentManager(String departmentManager) {
		_departmentManager = departmentManager;
	}

	@JSON
	@Override
	public String getDivisionManager() {
		if (_divisionManager == null) {
			return StringPool.BLANK;
		}
		else {
			return _divisionManager;
		}
	}

	@Override
	public void setDivisionManager(String divisionManager) {
		_divisionManager = divisionManager;
	}

	@JSON
	@Override
	public String getRelatesTo() {
		if (_relatesTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _relatesTo;
		}
	}

	@Override
	public void setRelatesTo(String relatesTo) {
		_relatesTo = relatesTo;
	}

	@JSON
	@Override
	public String getNextApprover() {
		if (_nextApprover == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextApprover;
		}
	}

	@Override
	public void setNextApprover(String nextApprover) {
		_columnBitmask |= NEXTAPPROVER_COLUMN_BITMASK;

		if (_originalNextApprover == null) {
			_originalNextApprover = _nextApprover;
		}

		_nextApprover = nextApprover;
	}

	public String getOriginalNextApprover() {
		return GetterUtil.getString(_originalNextApprover);
	}

	@JSON
	@Override
	public String getWorkflow() {
		if (_workflow == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflow;
		}
	}

	@Override
	public void setWorkflow(String workflow) {
		_workflow = workflow;
	}

	@JSON
	@Override
	public int getWorkflowStep() {
		return _workflowStep;
	}

	@Override
	public void setWorkflowStep(int workflowStep) {
		_workflowStep = workflowStep;
	}

	@JSON
	@Override
	public String getWorkflowId() {
		if (_workflowId == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowId;
		}
	}

	@Override
	public void setWorkflowId(String workflowId) {
		_columnBitmask |= WORKFLOWID_COLUMN_BITMASK;

		if (_originalWorkflowId == null) {
			_originalWorkflowId = _workflowId;
		}

		_workflowId = workflowId;
	}

	public String getOriginalWorkflowId() {
		return GetterUtil.getString(_originalWorkflowId);
	}

	@JSON
	@Override
	public String getDummy() {
		if (_dummy == null) {
			return StringPool.BLANK;
		}
		else {
			return _dummy;
		}
	}

	@Override
	public void setDummy(String dummy) {
		_columnBitmask |= DUMMY_COLUMN_BITMASK;

		if (_originalDummy == null) {
			_originalDummy = _dummy;
		}

		_dummy = dummy;
	}

	public String getOriginalDummy() {
		return GetterUtil.getString(_originalDummy);
	}

	@JSON
	@Override
	public String getRefPosId() {
		if (_refPosId == null) {
			return StringPool.BLANK;
		}
		else {
			return _refPosId;
		}
	}

	@Override
	public void setRefPosId(String refPosId) {
		_columnBitmask |= REFPOSID_COLUMN_BITMASK;

		if (_originalRefPosId == null) {
			_originalRefPosId = _refPosId;
		}

		_refPosId = refPosId;
	}

	public String getOriginalRefPosId() {
		return GetterUtil.getString(_originalRefPosId);
	}

	@JSON
	@Override
	public boolean getIsmodify() {
		return _ismodify;
	}

	@JSON
	@Override
	public boolean isIsmodify() {
		return _ismodify;
	}

	@Override
	public void setIsmodify(boolean ismodify) {
		_ismodify = ismodify;
	}

	@JSON
	@Override
	public String getDisapproveComments() {
		if (_disapproveComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _disapproveComments;
		}
	}

	@Override
	public void setDisapproveComments(String disapproveComments) {
		_disapproveComments = disapproveComments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public WFMS_Position toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WFMS_Position)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WFMS_PositionImpl wfms_PositionImpl = new WFMS_PositionImpl();

		wfms_PositionImpl.setPId(getPId());
		wfms_PositionImpl.setCompanyId(getCompanyId());
		wfms_PositionImpl.setScopeGroupId(getScopeGroupId());
		wfms_PositionImpl.setCreatedBy(getCreatedBy());
		wfms_PositionImpl.setCreateDate(getCreateDate());
		wfms_PositionImpl.setModifiedBy(getModifiedBy());
		wfms_PositionImpl.setModifiedDate(getModifiedDate());
		wfms_PositionImpl.setActive(getActive());
		wfms_PositionImpl.setNumber(getNumber());
		wfms_PositionImpl.setDescription(getDescription());
		wfms_PositionImpl.setStatus(getStatus());
		wfms_PositionImpl.setReportsTo(getReportsTo());
		wfms_PositionImpl.setAutoGenerateReq(getAutoGenerateReq());
		wfms_PositionImpl.setCritical(getCritical());
		wfms_PositionImpl.setDivision(getDivision());
		wfms_PositionImpl.setDepartmentName(getDepartmentName());
		wfms_PositionImpl.setDepartmentNumber(getDepartmentNumber());
		wfms_PositionImpl.setLine(getLine());
		wfms_PositionImpl.setLadder(getLadder());
		wfms_PositionImpl.setMpCatBugdet(getMpCatBugdet());
		wfms_PositionImpl.setMpCatFilledWith(getMpCatFilledWith());
		wfms_PositionImpl.setPositionClass(getPositionClass());
		wfms_PositionImpl.setType(getType());
		wfms_PositionImpl.setLevel(getLevel());
		wfms_PositionImpl.setLeadershipAssignment(getLeadershipAssignment());
		wfms_PositionImpl.setCategory(getCategory());
		wfms_PositionImpl.setSubCategory(getSubCategory());
		wfms_PositionImpl.setWorkforceCategory(getWorkforceCategory());
		wfms_PositionImpl.setEmpCategory(getEmpCategory());
		wfms_PositionImpl.setEmpCategoryDesc(getEmpCategoryDesc());
		wfms_PositionImpl.setYearEst(getYearEst());
		wfms_PositionImpl.setReasonsFor(getReasonsFor());
		wfms_PositionImpl.setReavailuationDate(getReavailuationDate());
		wfms_PositionImpl.setAssociateNumber(getAssociateNumber());
		wfms_PositionImpl.setAssociateName(getAssociateName());
		wfms_PositionImpl.setAssociateTitle(getAssociateTitle());
		wfms_PositionImpl.setComments(getComments());
		wfms_PositionImpl.setTypicalJobTitle(getTypicalJobTitle());
		wfms_PositionImpl.setMinJobKnowHow(getMinJobKnowHow());
		wfms_PositionImpl.setDuties(getDuties());
		wfms_PositionImpl.setTasksPerformed(getTasksPerformed());
		wfms_PositionImpl.setLengthOfService(getLengthOfService());
		wfms_PositionImpl.setDegree(getDegree());
		wfms_PositionImpl.setReqSkills(getReqSkills());
		wfms_PositionImpl.setDesiredSkills(getDesiredSkills());
		wfms_PositionImpl.setEnvironment(getEnvironment());
		wfms_PositionImpl.setWeeklyOvertime(getWeeklyOvertime());
		wfms_PositionImpl.setFrequencyOfTravel(getFrequencyOfTravel());
		wfms_PositionImpl.setHistory(getHistory());
		wfms_PositionImpl.setOther(getOther());
		wfms_PositionImpl.setDepartmentManager(getDepartmentManager());
		wfms_PositionImpl.setDivisionManager(getDivisionManager());
		wfms_PositionImpl.setRelatesTo(getRelatesTo());
		wfms_PositionImpl.setNextApprover(getNextApprover());
		wfms_PositionImpl.setWorkflow(getWorkflow());
		wfms_PositionImpl.setWorkflowStep(getWorkflowStep());
		wfms_PositionImpl.setWorkflowId(getWorkflowId());
		wfms_PositionImpl.setDummy(getDummy());
		wfms_PositionImpl.setRefPosId(getRefPosId());
		wfms_PositionImpl.setIsmodify(getIsmodify());
		wfms_PositionImpl.setDisapproveComments(getDisapproveComments());

		wfms_PositionImpl.resetOriginalValues();

		return wfms_PositionImpl;
	}

	@Override
	public int compareTo(WFMS_Position wfms_Position) {
		int value = 0;

		value = getPId().compareTo(wfms_Position.getPId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WFMS_Position)) {
			return false;
		}

		WFMS_Position wfms_Position = (WFMS_Position)obj;

		String primaryKey = wfms_Position.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WFMS_PositionModelImpl wfms_PositionModelImpl = this;

		wfms_PositionModelImpl._originalPId = wfms_PositionModelImpl._pId;

		wfms_PositionModelImpl._originalCreatedBy = wfms_PositionModelImpl._createdBy;

		wfms_PositionModelImpl._setModifiedDate = false;

		wfms_PositionModelImpl._originalNumber = wfms_PositionModelImpl._number;

		wfms_PositionModelImpl._originalStatus = wfms_PositionModelImpl._status;

		wfms_PositionModelImpl._originalReportsTo = wfms_PositionModelImpl._reportsTo;

		wfms_PositionModelImpl._originalAutoGenerateReq = wfms_PositionModelImpl._autoGenerateReq;

		wfms_PositionModelImpl._originalDepartmentName = wfms_PositionModelImpl._departmentName;

		wfms_PositionModelImpl._originalCategory = wfms_PositionModelImpl._category;

		wfms_PositionModelImpl._originalAssociateNumber = wfms_PositionModelImpl._associateNumber;

		wfms_PositionModelImpl._originalNextApprover = wfms_PositionModelImpl._nextApprover;

		wfms_PositionModelImpl._originalWorkflowId = wfms_PositionModelImpl._workflowId;

		wfms_PositionModelImpl._originalDummy = wfms_PositionModelImpl._dummy;

		wfms_PositionModelImpl._originalRefPosId = wfms_PositionModelImpl._refPosId;

		wfms_PositionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WFMS_Position> toCacheModel() {
		WFMS_PositionCacheModel wfms_PositionCacheModel = new WFMS_PositionCacheModel();

		wfms_PositionCacheModel.pId = getPId();

		String pId = wfms_PositionCacheModel.pId;

		if ((pId != null) && (pId.length() == 0)) {
			wfms_PositionCacheModel.pId = null;
		}

		wfms_PositionCacheModel.companyId = getCompanyId();

		wfms_PositionCacheModel.scopeGroupId = getScopeGroupId();

		wfms_PositionCacheModel.createdBy = getCreatedBy();

		String createdBy = wfms_PositionCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			wfms_PositionCacheModel.createdBy = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			wfms_PositionCacheModel.createDate = createDate.getTime();
		}
		else {
			wfms_PositionCacheModel.createDate = Long.MIN_VALUE;
		}

		wfms_PositionCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = wfms_PositionCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			wfms_PositionCacheModel.modifiedBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wfms_PositionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wfms_PositionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		wfms_PositionCacheModel.active = getActive();

		wfms_PositionCacheModel.number = getNumber();

		String number = wfms_PositionCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			wfms_PositionCacheModel.number = null;
		}

		wfms_PositionCacheModel.description = getDescription();

		String description = wfms_PositionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			wfms_PositionCacheModel.description = null;
		}

		wfms_PositionCacheModel.status = getStatus();

		String status = wfms_PositionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			wfms_PositionCacheModel.status = null;
		}

		wfms_PositionCacheModel.reportsTo = getReportsTo();

		String reportsTo = wfms_PositionCacheModel.reportsTo;

		if ((reportsTo != null) && (reportsTo.length() == 0)) {
			wfms_PositionCacheModel.reportsTo = null;
		}

		wfms_PositionCacheModel.autoGenerateReq = getAutoGenerateReq();

		String autoGenerateReq = wfms_PositionCacheModel.autoGenerateReq;

		if ((autoGenerateReq != null) && (autoGenerateReq.length() == 0)) {
			wfms_PositionCacheModel.autoGenerateReq = null;
		}

		wfms_PositionCacheModel.critical = getCritical();

		wfms_PositionCacheModel.division = getDivision();

		String division = wfms_PositionCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			wfms_PositionCacheModel.division = null;
		}

		wfms_PositionCacheModel.departmentName = getDepartmentName();

		String departmentName = wfms_PositionCacheModel.departmentName;

		if ((departmentName != null) && (departmentName.length() == 0)) {
			wfms_PositionCacheModel.departmentName = null;
		}

		wfms_PositionCacheModel.departmentNumber = getDepartmentNumber();

		String departmentNumber = wfms_PositionCacheModel.departmentNumber;

		if ((departmentNumber != null) && (departmentNumber.length() == 0)) {
			wfms_PositionCacheModel.departmentNumber = null;
		}

		wfms_PositionCacheModel.line = getLine();

		String line = wfms_PositionCacheModel.line;

		if ((line != null) && (line.length() == 0)) {
			wfms_PositionCacheModel.line = null;
		}

		wfms_PositionCacheModel.ladder = getLadder();

		String ladder = wfms_PositionCacheModel.ladder;

		if ((ladder != null) && (ladder.length() == 0)) {
			wfms_PositionCacheModel.ladder = null;
		}

		wfms_PositionCacheModel.mpCatBugdet = getMpCatBugdet();

		String mpCatBugdet = wfms_PositionCacheModel.mpCatBugdet;

		if ((mpCatBugdet != null) && (mpCatBugdet.length() == 0)) {
			wfms_PositionCacheModel.mpCatBugdet = null;
		}

		wfms_PositionCacheModel.mpCatFilledWith = getMpCatFilledWith();

		String mpCatFilledWith = wfms_PositionCacheModel.mpCatFilledWith;

		if ((mpCatFilledWith != null) && (mpCatFilledWith.length() == 0)) {
			wfms_PositionCacheModel.mpCatFilledWith = null;
		}

		wfms_PositionCacheModel.positionClass = getPositionClass();

		String positionClass = wfms_PositionCacheModel.positionClass;

		if ((positionClass != null) && (positionClass.length() == 0)) {
			wfms_PositionCacheModel.positionClass = null;
		}

		wfms_PositionCacheModel.type = getType();

		String type = wfms_PositionCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			wfms_PositionCacheModel.type = null;
		}

		wfms_PositionCacheModel.level = getLevel();

		String level = wfms_PositionCacheModel.level;

		if ((level != null) && (level.length() == 0)) {
			wfms_PositionCacheModel.level = null;
		}

		wfms_PositionCacheModel.leadershipAssignment = getLeadershipAssignment();

		String leadershipAssignment = wfms_PositionCacheModel.leadershipAssignment;

		if ((leadershipAssignment != null) &&
				(leadershipAssignment.length() == 0)) {
			wfms_PositionCacheModel.leadershipAssignment = null;
		}

		wfms_PositionCacheModel.category = getCategory();

		String category = wfms_PositionCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			wfms_PositionCacheModel.category = null;
		}

		wfms_PositionCacheModel.subCategory = getSubCategory();

		String subCategory = wfms_PositionCacheModel.subCategory;

		if ((subCategory != null) && (subCategory.length() == 0)) {
			wfms_PositionCacheModel.subCategory = null;
		}

		wfms_PositionCacheModel.workforceCategory = getWorkforceCategory();

		String workforceCategory = wfms_PositionCacheModel.workforceCategory;

		if ((workforceCategory != null) && (workforceCategory.length() == 0)) {
			wfms_PositionCacheModel.workforceCategory = null;
		}

		wfms_PositionCacheModel.empCategory = getEmpCategory();

		String empCategory = wfms_PositionCacheModel.empCategory;

		if ((empCategory != null) && (empCategory.length() == 0)) {
			wfms_PositionCacheModel.empCategory = null;
		}

		wfms_PositionCacheModel.empCategoryDesc = getEmpCategoryDesc();

		String empCategoryDesc = wfms_PositionCacheModel.empCategoryDesc;

		if ((empCategoryDesc != null) && (empCategoryDesc.length() == 0)) {
			wfms_PositionCacheModel.empCategoryDesc = null;
		}

		wfms_PositionCacheModel.yearEst = getYearEst();

		String yearEst = wfms_PositionCacheModel.yearEst;

		if ((yearEst != null) && (yearEst.length() == 0)) {
			wfms_PositionCacheModel.yearEst = null;
		}

		wfms_PositionCacheModel.reasonsFor = getReasonsFor();

		String reasonsFor = wfms_PositionCacheModel.reasonsFor;

		if ((reasonsFor != null) && (reasonsFor.length() == 0)) {
			wfms_PositionCacheModel.reasonsFor = null;
		}

		wfms_PositionCacheModel.reavailuationDate = getReavailuationDate();

		String reavailuationDate = wfms_PositionCacheModel.reavailuationDate;

		if ((reavailuationDate != null) && (reavailuationDate.length() == 0)) {
			wfms_PositionCacheModel.reavailuationDate = null;
		}

		wfms_PositionCacheModel.associateNumber = getAssociateNumber();

		String associateNumber = wfms_PositionCacheModel.associateNumber;

		if ((associateNumber != null) && (associateNumber.length() == 0)) {
			wfms_PositionCacheModel.associateNumber = null;
		}

		wfms_PositionCacheModel.associateName = getAssociateName();

		String associateName = wfms_PositionCacheModel.associateName;

		if ((associateName != null) && (associateName.length() == 0)) {
			wfms_PositionCacheModel.associateName = null;
		}

		wfms_PositionCacheModel.associateTitle = getAssociateTitle();

		String associateTitle = wfms_PositionCacheModel.associateTitle;

		if ((associateTitle != null) && (associateTitle.length() == 0)) {
			wfms_PositionCacheModel.associateTitle = null;
		}

		wfms_PositionCacheModel.comments = getComments();

		String comments = wfms_PositionCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			wfms_PositionCacheModel.comments = null;
		}

		wfms_PositionCacheModel.typicalJobTitle = getTypicalJobTitle();

		String typicalJobTitle = wfms_PositionCacheModel.typicalJobTitle;

		if ((typicalJobTitle != null) && (typicalJobTitle.length() == 0)) {
			wfms_PositionCacheModel.typicalJobTitle = null;
		}

		wfms_PositionCacheModel.minJobKnowHow = getMinJobKnowHow();

		String minJobKnowHow = wfms_PositionCacheModel.minJobKnowHow;

		if ((minJobKnowHow != null) && (minJobKnowHow.length() == 0)) {
			wfms_PositionCacheModel.minJobKnowHow = null;
		}

		wfms_PositionCacheModel.duties = getDuties();

		String duties = wfms_PositionCacheModel.duties;

		if ((duties != null) && (duties.length() == 0)) {
			wfms_PositionCacheModel.duties = null;
		}

		wfms_PositionCacheModel.tasksPerformed = getTasksPerformed();

		String tasksPerformed = wfms_PositionCacheModel.tasksPerformed;

		if ((tasksPerformed != null) && (tasksPerformed.length() == 0)) {
			wfms_PositionCacheModel.tasksPerformed = null;
		}

		wfms_PositionCacheModel.lengthOfService = getLengthOfService();

		String lengthOfService = wfms_PositionCacheModel.lengthOfService;

		if ((lengthOfService != null) && (lengthOfService.length() == 0)) {
			wfms_PositionCacheModel.lengthOfService = null;
		}

		wfms_PositionCacheModel.degree = getDegree();

		String degree = wfms_PositionCacheModel.degree;

		if ((degree != null) && (degree.length() == 0)) {
			wfms_PositionCacheModel.degree = null;
		}

		wfms_PositionCacheModel.reqSkills = getReqSkills();

		String reqSkills = wfms_PositionCacheModel.reqSkills;

		if ((reqSkills != null) && (reqSkills.length() == 0)) {
			wfms_PositionCacheModel.reqSkills = null;
		}

		wfms_PositionCacheModel.desiredSkills = getDesiredSkills();

		String desiredSkills = wfms_PositionCacheModel.desiredSkills;

		if ((desiredSkills != null) && (desiredSkills.length() == 0)) {
			wfms_PositionCacheModel.desiredSkills = null;
		}

		wfms_PositionCacheModel.environment = getEnvironment();

		String environment = wfms_PositionCacheModel.environment;

		if ((environment != null) && (environment.length() == 0)) {
			wfms_PositionCacheModel.environment = null;
		}

		wfms_PositionCacheModel.weeklyOvertime = getWeeklyOvertime();

		String weeklyOvertime = wfms_PositionCacheModel.weeklyOvertime;

		if ((weeklyOvertime != null) && (weeklyOvertime.length() == 0)) {
			wfms_PositionCacheModel.weeklyOvertime = null;
		}

		wfms_PositionCacheModel.frequencyOfTravel = getFrequencyOfTravel();

		String frequencyOfTravel = wfms_PositionCacheModel.frequencyOfTravel;

		if ((frequencyOfTravel != null) && (frequencyOfTravel.length() == 0)) {
			wfms_PositionCacheModel.frequencyOfTravel = null;
		}

		wfms_PositionCacheModel.history = getHistory();

		String history = wfms_PositionCacheModel.history;

		if ((history != null) && (history.length() == 0)) {
			wfms_PositionCacheModel.history = null;
		}

		wfms_PositionCacheModel.other = getOther();

		String other = wfms_PositionCacheModel.other;

		if ((other != null) && (other.length() == 0)) {
			wfms_PositionCacheModel.other = null;
		}

		wfms_PositionCacheModel.departmentManager = getDepartmentManager();

		String departmentManager = wfms_PositionCacheModel.departmentManager;

		if ((departmentManager != null) && (departmentManager.length() == 0)) {
			wfms_PositionCacheModel.departmentManager = null;
		}

		wfms_PositionCacheModel.divisionManager = getDivisionManager();

		String divisionManager = wfms_PositionCacheModel.divisionManager;

		if ((divisionManager != null) && (divisionManager.length() == 0)) {
			wfms_PositionCacheModel.divisionManager = null;
		}

		wfms_PositionCacheModel.relatesTo = getRelatesTo();

		String relatesTo = wfms_PositionCacheModel.relatesTo;

		if ((relatesTo != null) && (relatesTo.length() == 0)) {
			wfms_PositionCacheModel.relatesTo = null;
		}

		wfms_PositionCacheModel.nextApprover = getNextApprover();

		String nextApprover = wfms_PositionCacheModel.nextApprover;

		if ((nextApprover != null) && (nextApprover.length() == 0)) {
			wfms_PositionCacheModel.nextApprover = null;
		}

		wfms_PositionCacheModel.workflow = getWorkflow();

		String workflow = wfms_PositionCacheModel.workflow;

		if ((workflow != null) && (workflow.length() == 0)) {
			wfms_PositionCacheModel.workflow = null;
		}

		wfms_PositionCacheModel.workflowStep = getWorkflowStep();

		wfms_PositionCacheModel.workflowId = getWorkflowId();

		String workflowId = wfms_PositionCacheModel.workflowId;

		if ((workflowId != null) && (workflowId.length() == 0)) {
			wfms_PositionCacheModel.workflowId = null;
		}

		wfms_PositionCacheModel.dummy = getDummy();

		String dummy = wfms_PositionCacheModel.dummy;

		if ((dummy != null) && (dummy.length() == 0)) {
			wfms_PositionCacheModel.dummy = null;
		}

		wfms_PositionCacheModel.refPosId = getRefPosId();

		String refPosId = wfms_PositionCacheModel.refPosId;

		if ((refPosId != null) && (refPosId.length() == 0)) {
			wfms_PositionCacheModel.refPosId = null;
		}

		wfms_PositionCacheModel.ismodify = getIsmodify();

		wfms_PositionCacheModel.disapproveComments = getDisapproveComments();

		String disapproveComments = wfms_PositionCacheModel.disapproveComments;

		if ((disapproveComments != null) && (disapproveComments.length() == 0)) {
			wfms_PositionCacheModel.disapproveComments = null;
		}

		return wfms_PositionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(123);

		sb.append("{pId=");
		sb.append(getPId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", scopeGroupId=");
		sb.append(getScopeGroupId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", number=");
		sb.append(getNumber());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", reportsTo=");
		sb.append(getReportsTo());
		sb.append(", autoGenerateReq=");
		sb.append(getAutoGenerateReq());
		sb.append(", critical=");
		sb.append(getCritical());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", departmentName=");
		sb.append(getDepartmentName());
		sb.append(", departmentNumber=");
		sb.append(getDepartmentNumber());
		sb.append(", line=");
		sb.append(getLine());
		sb.append(", ladder=");
		sb.append(getLadder());
		sb.append(", mpCatBugdet=");
		sb.append(getMpCatBugdet());
		sb.append(", mpCatFilledWith=");
		sb.append(getMpCatFilledWith());
		sb.append(", positionClass=");
		sb.append(getPositionClass());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", leadershipAssignment=");
		sb.append(getLeadershipAssignment());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", subCategory=");
		sb.append(getSubCategory());
		sb.append(", workforceCategory=");
		sb.append(getWorkforceCategory());
		sb.append(", empCategory=");
		sb.append(getEmpCategory());
		sb.append(", empCategoryDesc=");
		sb.append(getEmpCategoryDesc());
		sb.append(", yearEst=");
		sb.append(getYearEst());
		sb.append(", reasonsFor=");
		sb.append(getReasonsFor());
		sb.append(", reavailuationDate=");
		sb.append(getReavailuationDate());
		sb.append(", associateNumber=");
		sb.append(getAssociateNumber());
		sb.append(", associateName=");
		sb.append(getAssociateName());
		sb.append(", associateTitle=");
		sb.append(getAssociateTitle());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", typicalJobTitle=");
		sb.append(getTypicalJobTitle());
		sb.append(", minJobKnowHow=");
		sb.append(getMinJobKnowHow());
		sb.append(", duties=");
		sb.append(getDuties());
		sb.append(", tasksPerformed=");
		sb.append(getTasksPerformed());
		sb.append(", lengthOfService=");
		sb.append(getLengthOfService());
		sb.append(", degree=");
		sb.append(getDegree());
		sb.append(", reqSkills=");
		sb.append(getReqSkills());
		sb.append(", desiredSkills=");
		sb.append(getDesiredSkills());
		sb.append(", environment=");
		sb.append(getEnvironment());
		sb.append(", weeklyOvertime=");
		sb.append(getWeeklyOvertime());
		sb.append(", frequencyOfTravel=");
		sb.append(getFrequencyOfTravel());
		sb.append(", history=");
		sb.append(getHistory());
		sb.append(", other=");
		sb.append(getOther());
		sb.append(", departmentManager=");
		sb.append(getDepartmentManager());
		sb.append(", divisionManager=");
		sb.append(getDivisionManager());
		sb.append(", relatesTo=");
		sb.append(getRelatesTo());
		sb.append(", nextApprover=");
		sb.append(getNextApprover());
		sb.append(", workflow=");
		sb.append(getWorkflow());
		sb.append(", workflowStep=");
		sb.append(getWorkflowStep());
		sb.append(", workflowId=");
		sb.append(getWorkflowId());
		sb.append(", dummy=");
		sb.append(getDummy());
		sb.append(", refPosId=");
		sb.append(getRefPosId());
		sb.append(", ismodify=");
		sb.append(getIsmodify());
		sb.append(", disapproveComments=");
		sb.append(getDisapproveComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(187);

		sb.append("<model><model-name>");
		sb.append("com.ys.hmawfm.wfms.services.model.WFMS_Position");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>pId</column-name><column-value><![CDATA[");
		sb.append(getPId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scopeGroupId</column-name><column-value><![CDATA[");
		sb.append(getScopeGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number</column-name><column-value><![CDATA[");
		sb.append(getNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportsTo</column-name><column-value><![CDATA[");
		sb.append(getReportsTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autoGenerateReq</column-name><column-value><![CDATA[");
		sb.append(getAutoGenerateReq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>critical</column-name><column-value><![CDATA[");
		sb.append(getCritical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentName</column-name><column-value><![CDATA[");
		sb.append(getDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentNumber</column-name><column-value><![CDATA[");
		sb.append(getDepartmentNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>line</column-name><column-value><![CDATA[");
		sb.append(getLine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ladder</column-name><column-value><![CDATA[");
		sb.append(getLadder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mpCatBugdet</column-name><column-value><![CDATA[");
		sb.append(getMpCatBugdet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mpCatFilledWith</column-name><column-value><![CDATA[");
		sb.append(getMpCatFilledWith());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionClass</column-name><column-value><![CDATA[");
		sb.append(getPositionClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leadershipAssignment</column-name><column-value><![CDATA[");
		sb.append(getLeadershipAssignment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subCategory</column-name><column-value><![CDATA[");
		sb.append(getSubCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workforceCategory</column-name><column-value><![CDATA[");
		sb.append(getWorkforceCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empCategory</column-name><column-value><![CDATA[");
		sb.append(getEmpCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empCategoryDesc</column-name><column-value><![CDATA[");
		sb.append(getEmpCategoryDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yearEst</column-name><column-value><![CDATA[");
		sb.append(getYearEst());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonsFor</column-name><column-value><![CDATA[");
		sb.append(getReasonsFor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reavailuationDate</column-name><column-value><![CDATA[");
		sb.append(getReavailuationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associateNumber</column-name><column-value><![CDATA[");
		sb.append(getAssociateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associateName</column-name><column-value><![CDATA[");
		sb.append(getAssociateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associateTitle</column-name><column-value><![CDATA[");
		sb.append(getAssociateTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typicalJobTitle</column-name><column-value><![CDATA[");
		sb.append(getTypicalJobTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minJobKnowHow</column-name><column-value><![CDATA[");
		sb.append(getMinJobKnowHow());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duties</column-name><column-value><![CDATA[");
		sb.append(getDuties());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tasksPerformed</column-name><column-value><![CDATA[");
		sb.append(getTasksPerformed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lengthOfService</column-name><column-value><![CDATA[");
		sb.append(getLengthOfService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>degree</column-name><column-value><![CDATA[");
		sb.append(getDegree());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reqSkills</column-name><column-value><![CDATA[");
		sb.append(getReqSkills());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desiredSkills</column-name><column-value><![CDATA[");
		sb.append(getDesiredSkills());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>environment</column-name><column-value><![CDATA[");
		sb.append(getEnvironment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weeklyOvertime</column-name><column-value><![CDATA[");
		sb.append(getWeeklyOvertime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frequencyOfTravel</column-name><column-value><![CDATA[");
		sb.append(getFrequencyOfTravel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>history</column-name><column-value><![CDATA[");
		sb.append(getHistory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>other</column-name><column-value><![CDATA[");
		sb.append(getOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentManager</column-name><column-value><![CDATA[");
		sb.append(getDepartmentManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>divisionManager</column-name><column-value><![CDATA[");
		sb.append(getDivisionManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relatesTo</column-name><column-value><![CDATA[");
		sb.append(getRelatesTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextApprover</column-name><column-value><![CDATA[");
		sb.append(getNextApprover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflow</column-name><column-value><![CDATA[");
		sb.append(getWorkflow());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowStep</column-name><column-value><![CDATA[");
		sb.append(getWorkflowStep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dummy</column-name><column-value><![CDATA[");
		sb.append(getDummy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refPosId</column-name><column-value><![CDATA[");
		sb.append(getRefPosId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ismodify</column-name><column-value><![CDATA[");
		sb.append(getIsmodify());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disapproveComments</column-name><column-value><![CDATA[");
		sb.append(getDisapproveComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WFMS_Position.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WFMS_Position.class
		};
	private String _pId;
	private String _originalPId;
	private long _companyId;
	private long _scopeGroupId;
	private String _createdBy;
	private String _originalCreatedBy;
	private Date _createDate;
	private String _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private String _number;
	private String _originalNumber;
	private String _description;
	private String _status;
	private String _originalStatus;
	private String _reportsTo;
	private String _originalReportsTo;
	private String _autoGenerateReq;
	private String _originalAutoGenerateReq;
	private boolean _critical;
	private String _division;
	private String _departmentName;
	private String _originalDepartmentName;
	private String _departmentNumber;
	private String _line;
	private String _ladder;
	private String _mpCatBugdet;
	private String _mpCatFilledWith;
	private String _positionClass;
	private String _type;
	private String _level;
	private String _leadershipAssignment;
	private String _category;
	private String _originalCategory;
	private String _subCategory;
	private String _workforceCategory;
	private String _empCategory;
	private String _empCategoryDesc;
	private String _yearEst;
	private String _reasonsFor;
	private String _reavailuationDate;
	private String _associateNumber;
	private String _originalAssociateNumber;
	private String _associateName;
	private String _associateTitle;
	private String _comments;
	private String _typicalJobTitle;
	private String _minJobKnowHow;
	private String _duties;
	private String _tasksPerformed;
	private String _lengthOfService;
	private String _degree;
	private String _reqSkills;
	private String _desiredSkills;
	private String _environment;
	private String _weeklyOvertime;
	private String _frequencyOfTravel;
	private String _history;
	private String _other;
	private String _departmentManager;
	private String _divisionManager;
	private String _relatesTo;
	private String _nextApprover;
	private String _originalNextApprover;
	private String _workflow;
	private int _workflowStep;
	private String _workflowId;
	private String _originalWorkflowId;
	private String _dummy;
	private String _originalDummy;
	private String _refPosId;
	private String _originalRefPosId;
	private boolean _ismodify;
	private String _disapproveComments;
	private long _columnBitmask;
	private WFMS_Position _escapedModel;
}