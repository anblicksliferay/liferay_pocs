/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ys.hma.account.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.ys.hma.account.model.Data;
import com.ys.hma.account.model.DataModel;
import com.ys.hma.account.model.DataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Data service. Represents a row in the &quot;Data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataImpl
 * @see Data
 * @see DataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DataModelImpl extends BaseModelImpl<Data> implements DataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data model instance should use the {@link Data} interface instead.
	 */
	public static final String TABLE_NAME = "Data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "DataId", Types.BIGINT },
			{ "StartDate", Types.TIMESTAMP },
			{ "EndDate", Types.TIMESTAMP },
			{ "Exported", Types.INTEGER },
			{ "NotExported", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("DataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("StartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("EndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Exported", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("NotExported", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table Data (DataId LONG not null primary key,StartDate DATE null,EndDate DATE null,Exported INTEGER,NotExported INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Data";
	public static final String ORDER_BY_JPQL = " ORDER BY data.DataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Data.DataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hma.account.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ys.hma.account.model.Data"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ys.hma.account.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ys.hma.account.model.Data"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Data toModel(DataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Data model = new DataImpl();

		model.setDataId(soapModel.getDataId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setExported(soapModel.getExported());
		model.setNotExported(soapModel.getNotExported());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Data> toModels(DataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Data> models = new ArrayList<Data>(soapModels.length);

		for (DataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ys.hma.account.service.util.ServiceProps.get(
				"lock.expiration.time.com.ys.hma.account.model.Data"));

	public DataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _DataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _DataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Data.class;
	}

	@Override
	public String getModelClassName() {
		return Data.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("DataId", getDataId());
		attributes.put("StartDate", getStartDate());
		attributes.put("EndDate", getEndDate());
		attributes.put("Exported", getExported());
		attributes.put("NotExported", getNotExported());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long DataId = (Long)attributes.get("DataId");

		if (DataId != null) {
			setDataId(DataId);
		}

		Date StartDate = (Date)attributes.get("StartDate");

		if (StartDate != null) {
			setStartDate(StartDate);
		}

		Date EndDate = (Date)attributes.get("EndDate");

		if (EndDate != null) {
			setEndDate(EndDate);
		}

		Integer Exported = (Integer)attributes.get("Exported");

		if (Exported != null) {
			setExported(Exported);
		}

		Integer NotExported = (Integer)attributes.get("NotExported");

		if (NotExported != null) {
			setNotExported(NotExported);
		}
	}

	@JSON
	@Override
	public long getDataId() {
		return _DataId;
	}

	@Override
	public void setDataId(long DataId) {
		_DataId = DataId;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _StartDate;
	}

	@Override
	public void setStartDate(Date StartDate) {
		_StartDate = StartDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _EndDate;
	}

	@Override
	public void setEndDate(Date EndDate) {
		_EndDate = EndDate;
	}

	@JSON
	@Override
	public int getExported() {
		return _Exported;
	}

	@Override
	public void setExported(int Exported) {
		_Exported = Exported;
	}

	@JSON
	@Override
	public int getNotExported() {
		return _NotExported;
	}

	@Override
	public void setNotExported(int NotExported) {
		_NotExported = NotExported;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Data.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Data toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Data)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataImpl dataImpl = new DataImpl();

		dataImpl.setDataId(getDataId());
		dataImpl.setStartDate(getStartDate());
		dataImpl.setEndDate(getEndDate());
		dataImpl.setExported(getExported());
		dataImpl.setNotExported(getNotExported());

		dataImpl.resetOriginalValues();

		return dataImpl;
	}

	@Override
	public int compareTo(Data data) {
		long primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Data)) {
			return false;
		}

		Data data = (Data)obj;

		long primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Data> toCacheModel() {
		DataCacheModel dataCacheModel = new DataCacheModel();

		dataCacheModel.DataId = getDataId();

		Date StartDate = getStartDate();

		if (StartDate != null) {
			dataCacheModel.StartDate = StartDate.getTime();
		}
		else {
			dataCacheModel.StartDate = Long.MIN_VALUE;
		}

		Date EndDate = getEndDate();

		if (EndDate != null) {
			dataCacheModel.EndDate = EndDate.getTime();
		}
		else {
			dataCacheModel.EndDate = Long.MIN_VALUE;
		}

		dataCacheModel.Exported = getExported();

		dataCacheModel.NotExported = getNotExported();

		return dataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{DataId=");
		sb.append(getDataId());
		sb.append(", StartDate=");
		sb.append(getStartDate());
		sb.append(", EndDate=");
		sb.append(getEndDate());
		sb.append(", Exported=");
		sb.append(getExported());
		sb.append(", NotExported=");
		sb.append(getNotExported());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ys.hma.account.model.Data");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>DataId</column-name><column-value><![CDATA[");
		sb.append(getDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StartDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EndDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Exported</column-name><column-value><![CDATA[");
		sb.append(getExported());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NotExported</column-name><column-value><![CDATA[");
		sb.append(getNotExported());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Data.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Data.class
		};
	private long _DataId;
	private Date _StartDate;
	private Date _EndDate;
	private int _Exported;
	private int _NotExported;
	private Data _escapedModel;
}