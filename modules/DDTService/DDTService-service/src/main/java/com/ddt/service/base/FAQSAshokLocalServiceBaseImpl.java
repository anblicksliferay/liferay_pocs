/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ddt.service.base;

import aQute.bnd.annotation.ProviderType;

import com.ddt.model.FAQSAshok;

import com.ddt.service.FAQSAshokLocalService;
import com.ddt.service.persistence.FAQSAshokPersistence;
import com.ddt.service.persistence.Loc_Course_InfoPersistence;
import com.ddt.service.persistence.NewsAshokPersistence;
import com.ddt.service.persistence.TestimonialAshokPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the f a q s ashok local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ddt.service.impl.FAQSAshokLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.ddt.service.impl.FAQSAshokLocalServiceImpl
 * @see com.ddt.service.FAQSAshokLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class FAQSAshokLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements FAQSAshokLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.ddt.service.FAQSAshokLocalServiceUtil} to access the f a q s ashok local service.
	 */

	/**
	 * Adds the f a q s ashok to the database. Also notifies the appropriate model listeners.
	 *
	 * @param faqsAshok the f a q s ashok
	 * @return the f a q s ashok that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FAQSAshok addFAQSAshok(FAQSAshok faqsAshok) {
		faqsAshok.setNew(true);

		return faqsAshokPersistence.update(faqsAshok);
	}

	/**
	 * Creates a new f a q s ashok with the primary key. Does not add the f a q s ashok to the database.
	 *
	 * @param id the primary key for the new f a q s ashok
	 * @return the new f a q s ashok
	 */
	@Override
	public FAQSAshok createFAQSAshok(long id) {
		return faqsAshokPersistence.create(id);
	}

	/**
	 * Deletes the f a q s ashok with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the f a q s ashok
	 * @return the f a q s ashok that was removed
	 * @throws PortalException if a f a q s ashok with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FAQSAshok deleteFAQSAshok(long id) throws PortalException {
		return faqsAshokPersistence.remove(id);
	}

	/**
	 * Deletes the f a q s ashok from the database. Also notifies the appropriate model listeners.
	 *
	 * @param faqsAshok the f a q s ashok
	 * @return the f a q s ashok that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FAQSAshok deleteFAQSAshok(FAQSAshok faqsAshok) {
		return faqsAshokPersistence.remove(faqsAshok);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(FAQSAshok.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return faqsAshokPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ddt.model.impl.FAQSAshokModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return faqsAshokPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ddt.model.impl.FAQSAshokModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return faqsAshokPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return faqsAshokPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return faqsAshokPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public FAQSAshok fetchFAQSAshok(long id) {
		return faqsAshokPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the f a q s ashok with the primary key.
	 *
	 * @param id the primary key of the f a q s ashok
	 * @return the f a q s ashok
	 * @throws PortalException if a f a q s ashok with the primary key could not be found
	 */
	@Override
	public FAQSAshok getFAQSAshok(long id) throws PortalException {
		return faqsAshokPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(faqsAshokLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(FAQSAshok.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(faqsAshokLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(FAQSAshok.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(faqsAshokLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(FAQSAshok.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return faqsAshokLocalService.deleteFAQSAshok((FAQSAshok)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return faqsAshokPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the f a q s ashoks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ddt.model.impl.FAQSAshokModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of f a q s ashoks
	 * @param end the upper bound of the range of f a q s ashoks (not inclusive)
	 * @return the range of f a q s ashoks
	 */
	@Override
	public List<FAQSAshok> getFAQSAshoks(int start, int end) {
		return faqsAshokPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of f a q s ashoks.
	 *
	 * @return the number of f a q s ashoks
	 */
	@Override
	public int getFAQSAshoksCount() {
		return faqsAshokPersistence.countAll();
	}

	/**
	 * Updates the f a q s ashok in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param faqsAshok the f a q s ashok
	 * @return the f a q s ashok that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FAQSAshok updateFAQSAshok(FAQSAshok faqsAshok) {
		return faqsAshokPersistence.update(faqsAshok);
	}

	/**
	 * Returns the f a q s ashok local service.
	 *
	 * @return the f a q s ashok local service
	 */
	public FAQSAshokLocalService getFAQSAshokLocalService() {
		return faqsAshokLocalService;
	}

	/**
	 * Sets the f a q s ashok local service.
	 *
	 * @param faqsAshokLocalService the f a q s ashok local service
	 */
	public void setFAQSAshokLocalService(
		FAQSAshokLocalService faqsAshokLocalService) {
		this.faqsAshokLocalService = faqsAshokLocalService;
	}

	/**
	 * Returns the f a q s ashok persistence.
	 *
	 * @return the f a q s ashok persistence
	 */
	public FAQSAshokPersistence getFAQSAshokPersistence() {
		return faqsAshokPersistence;
	}

	/**
	 * Sets the f a q s ashok persistence.
	 *
	 * @param faqsAshokPersistence the f a q s ashok persistence
	 */
	public void setFAQSAshokPersistence(
		FAQSAshokPersistence faqsAshokPersistence) {
		this.faqsAshokPersistence = faqsAshokPersistence;
	}

	/**
	 * Returns the loc_ course_ info local service.
	 *
	 * @return the loc_ course_ info local service
	 */
	public com.ddt.service.Loc_Course_InfoLocalService getLoc_Course_InfoLocalService() {
		return loc_Course_InfoLocalService;
	}

	/**
	 * Sets the loc_ course_ info local service.
	 *
	 * @param loc_Course_InfoLocalService the loc_ course_ info local service
	 */
	public void setLoc_Course_InfoLocalService(
		com.ddt.service.Loc_Course_InfoLocalService loc_Course_InfoLocalService) {
		this.loc_Course_InfoLocalService = loc_Course_InfoLocalService;
	}

	/**
	 * Returns the loc_ course_ info persistence.
	 *
	 * @return the loc_ course_ info persistence
	 */
	public Loc_Course_InfoPersistence getLoc_Course_InfoPersistence() {
		return loc_Course_InfoPersistence;
	}

	/**
	 * Sets the loc_ course_ info persistence.
	 *
	 * @param loc_Course_InfoPersistence the loc_ course_ info persistence
	 */
	public void setLoc_Course_InfoPersistence(
		Loc_Course_InfoPersistence loc_Course_InfoPersistence) {
		this.loc_Course_InfoPersistence = loc_Course_InfoPersistence;
	}

	/**
	 * Returns the news ashok local service.
	 *
	 * @return the news ashok local service
	 */
	public com.ddt.service.NewsAshokLocalService getNewsAshokLocalService() {
		return newsAshokLocalService;
	}

	/**
	 * Sets the news ashok local service.
	 *
	 * @param newsAshokLocalService the news ashok local service
	 */
	public void setNewsAshokLocalService(
		com.ddt.service.NewsAshokLocalService newsAshokLocalService) {
		this.newsAshokLocalService = newsAshokLocalService;
	}

	/**
	 * Returns the news ashok persistence.
	 *
	 * @return the news ashok persistence
	 */
	public NewsAshokPersistence getNewsAshokPersistence() {
		return newsAshokPersistence;
	}

	/**
	 * Sets the news ashok persistence.
	 *
	 * @param newsAshokPersistence the news ashok persistence
	 */
	public void setNewsAshokPersistence(
		NewsAshokPersistence newsAshokPersistence) {
		this.newsAshokPersistence = newsAshokPersistence;
	}

	/**
	 * Returns the testimonial ashok local service.
	 *
	 * @return the testimonial ashok local service
	 */
	public com.ddt.service.TestimonialAshokLocalService getTestimonialAshokLocalService() {
		return testimonialAshokLocalService;
	}

	/**
	 * Sets the testimonial ashok local service.
	 *
	 * @param testimonialAshokLocalService the testimonial ashok local service
	 */
	public void setTestimonialAshokLocalService(
		com.ddt.service.TestimonialAshokLocalService testimonialAshokLocalService) {
		this.testimonialAshokLocalService = testimonialAshokLocalService;
	}

	/**
	 * Returns the testimonial ashok persistence.
	 *
	 * @return the testimonial ashok persistence
	 */
	public TestimonialAshokPersistence getTestimonialAshokPersistence() {
		return testimonialAshokPersistence;
	}

	/**
	 * Sets the testimonial ashok persistence.
	 *
	 * @param testimonialAshokPersistence the testimonial ashok persistence
	 */
	public void setTestimonialAshokPersistence(
		TestimonialAshokPersistence testimonialAshokPersistence) {
		this.testimonialAshokPersistence = testimonialAshokPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.ddt.model.FAQSAshok",
			faqsAshokLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister("com.ddt.model.FAQSAshok");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return FAQSAshokLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return FAQSAshok.class;
	}

	protected String getModelClassName() {
		return FAQSAshok.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = faqsAshokPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = FAQSAshokLocalService.class)
	protected FAQSAshokLocalService faqsAshokLocalService;
	@BeanReference(type = FAQSAshokPersistence.class)
	protected FAQSAshokPersistence faqsAshokPersistence;
	@BeanReference(type = com.ddt.service.Loc_Course_InfoLocalService.class)
	protected com.ddt.service.Loc_Course_InfoLocalService loc_Course_InfoLocalService;
	@BeanReference(type = Loc_Course_InfoPersistence.class)
	protected Loc_Course_InfoPersistence loc_Course_InfoPersistence;
	@BeanReference(type = com.ddt.service.NewsAshokLocalService.class)
	protected com.ddt.service.NewsAshokLocalService newsAshokLocalService;
	@BeanReference(type = NewsAshokPersistence.class)
	protected NewsAshokPersistence newsAshokPersistence;
	@BeanReference(type = com.ddt.service.TestimonialAshokLocalService.class)
	protected com.ddt.service.TestimonialAshokLocalService testimonialAshokLocalService;
	@BeanReference(type = TestimonialAshokPersistence.class)
	protected TestimonialAshokPersistence testimonialAshokPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}