/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ddt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ddt.model.Loc_Course_Info;
import com.ddt.model.Loc_Course_InfoModel;
import com.ddt.model.Loc_Course_InfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Loc_Course_Info service. Represents a row in the &quot;WDDTS_Loc_Course_Info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Loc_Course_InfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Loc_Course_InfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Loc_Course_InfoImpl
 * @see Loc_Course_Info
 * @see Loc_Course_InfoModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class Loc_Course_InfoModelImpl extends BaseModelImpl<Loc_Course_Info>
	implements Loc_Course_InfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loc_ course_ info model instance should use the {@link Loc_Course_Info} interface instead.
	 */
	public static final String TABLE_NAME = "WDDTS_Loc_Course_Info";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "locationId", Types.BIGINT },
			{ "couserId", Types.BIGINT },
			{ "locationName", Types.VARCHAR },
			{ "couserName", Types.VARCHAR },
			{ "maxSeats", Types.BIGINT },
			{ "toDate", Types.TIMESTAMP },
			{ "fromDate", Types.TIMESTAMP },
			{ "Fees", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("locationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("couserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("locationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("couserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxSeats", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Fees", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table WDDTS_Loc_Course_Info (uuid_ VARCHAR(75) null,id_ LONG not null primary key,locationId LONG,couserId LONG,locationName VARCHAR(75) null,couserName VARCHAR(75) null,maxSeats LONG,toDate DATE null,fromDate DATE null,Fees LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table WDDTS_Loc_Course_Info";
	public static final String ORDER_BY_JPQL = " ORDER BY loc_Course_Info.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WDDTS_Loc_Course_Info.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ddtservice.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ddt.model.Loc_Course_Info"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ddtservice.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ddt.model.Loc_Course_Info"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ddtservice.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ddt.model.Loc_Course_Info"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Loc_Course_Info toModel(Loc_Course_InfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Loc_Course_Info model = new Loc_Course_InfoImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setLocationId(soapModel.getLocationId());
		model.setCouserId(soapModel.getCouserId());
		model.setLocationName(soapModel.getLocationName());
		model.setCouserName(soapModel.getCouserName());
		model.setMaxSeats(soapModel.getMaxSeats());
		model.setToDate(soapModel.getToDate());
		model.setFromDate(soapModel.getFromDate());
		model.setFees(soapModel.getFees());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Loc_Course_Info> toModels(
		Loc_Course_InfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Loc_Course_Info> models = new ArrayList<Loc_Course_Info>(soapModels.length);

		for (Loc_Course_InfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ddtservice.service.util.ServiceProps.get(
				"lock.expiration.time.com.ddt.model.Loc_Course_Info"));

	public Loc_Course_InfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Loc_Course_Info.class;
	}

	@Override
	public String getModelClassName() {
		return Loc_Course_Info.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id", getId());
		attributes.put("locationId", getLocationId());
		attributes.put("couserId", getCouserId());
		attributes.put("locationName", getLocationName());
		attributes.put("couserName", getCouserName());
		attributes.put("maxSeats", getMaxSeats());
		attributes.put("toDate", getToDate());
		attributes.put("fromDate", getFromDate());
		attributes.put("Fees", getFees());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		Long couserId = (Long)attributes.get("couserId");

		if (couserId != null) {
			setCouserId(couserId);
		}

		String locationName = (String)attributes.get("locationName");

		if (locationName != null) {
			setLocationName(locationName);
		}

		String couserName = (String)attributes.get("couserName");

		if (couserName != null) {
			setCouserName(couserName);
		}

		Long maxSeats = (Long)attributes.get("maxSeats");

		if (maxSeats != null) {
			setMaxSeats(maxSeats);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Long Fees = (Long)attributes.get("Fees");

		if (Fees != null) {
			setFees(Fees);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@JSON
	@Override
	public long getCouserId() {
		return _couserId;
	}

	@Override
	public void setCouserId(long couserId) {
		_couserId = couserId;
	}

	@JSON
	@Override
	public String getLocationName() {
		if (_locationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationName;
		}
	}

	@Override
	public void setLocationName(String locationName) {
		_locationName = locationName;
	}

	@JSON
	@Override
	public String getCouserName() {
		if (_couserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _couserName;
		}
	}

	@Override
	public void setCouserName(String couserName) {
		_couserName = couserName;
	}

	@JSON
	@Override
	public long getMaxSeats() {
		return _maxSeats;
	}

	@Override
	public void setMaxSeats(long maxSeats) {
		_maxSeats = maxSeats;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@JSON
	@Override
	public long getFees() {
		return _Fees;
	}

	@Override
	public void setFees(long Fees) {
		_Fees = Fees;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Loc_Course_Info.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Loc_Course_Info.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Loc_Course_Info toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Loc_Course_Info)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Loc_Course_InfoImpl loc_Course_InfoImpl = new Loc_Course_InfoImpl();

		loc_Course_InfoImpl.setUuid(getUuid());
		loc_Course_InfoImpl.setId(getId());
		loc_Course_InfoImpl.setLocationId(getLocationId());
		loc_Course_InfoImpl.setCouserId(getCouserId());
		loc_Course_InfoImpl.setLocationName(getLocationName());
		loc_Course_InfoImpl.setCouserName(getCouserName());
		loc_Course_InfoImpl.setMaxSeats(getMaxSeats());
		loc_Course_InfoImpl.setToDate(getToDate());
		loc_Course_InfoImpl.setFromDate(getFromDate());
		loc_Course_InfoImpl.setFees(getFees());
		loc_Course_InfoImpl.setCompanyId(getCompanyId());
		loc_Course_InfoImpl.setUserId(getUserId());
		loc_Course_InfoImpl.setUserName(getUserName());
		loc_Course_InfoImpl.setCreateDate(getCreateDate());
		loc_Course_InfoImpl.setModifiedDate(getModifiedDate());

		loc_Course_InfoImpl.resetOriginalValues();

		return loc_Course_InfoImpl;
	}

	@Override
	public int compareTo(Loc_Course_Info loc_Course_Info) {
		long primaryKey = loc_Course_Info.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Loc_Course_Info)) {
			return false;
		}

		Loc_Course_Info loc_Course_Info = (Loc_Course_Info)obj;

		long primaryKey = loc_Course_Info.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Loc_Course_InfoModelImpl loc_Course_InfoModelImpl = this;

		loc_Course_InfoModelImpl._originalUuid = loc_Course_InfoModelImpl._uuid;

		loc_Course_InfoModelImpl._originalCompanyId = loc_Course_InfoModelImpl._companyId;

		loc_Course_InfoModelImpl._setOriginalCompanyId = false;

		loc_Course_InfoModelImpl._setModifiedDate = false;

		loc_Course_InfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Loc_Course_Info> toCacheModel() {
		Loc_Course_InfoCacheModel loc_Course_InfoCacheModel = new Loc_Course_InfoCacheModel();

		loc_Course_InfoCacheModel.uuid = getUuid();

		String uuid = loc_Course_InfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			loc_Course_InfoCacheModel.uuid = null;
		}

		loc_Course_InfoCacheModel.id = getId();

		loc_Course_InfoCacheModel.locationId = getLocationId();

		loc_Course_InfoCacheModel.couserId = getCouserId();

		loc_Course_InfoCacheModel.locationName = getLocationName();

		String locationName = loc_Course_InfoCacheModel.locationName;

		if ((locationName != null) && (locationName.length() == 0)) {
			loc_Course_InfoCacheModel.locationName = null;
		}

		loc_Course_InfoCacheModel.couserName = getCouserName();

		String couserName = loc_Course_InfoCacheModel.couserName;

		if ((couserName != null) && (couserName.length() == 0)) {
			loc_Course_InfoCacheModel.couserName = null;
		}

		loc_Course_InfoCacheModel.maxSeats = getMaxSeats();

		Date toDate = getToDate();

		if (toDate != null) {
			loc_Course_InfoCacheModel.toDate = toDate.getTime();
		}
		else {
			loc_Course_InfoCacheModel.toDate = Long.MIN_VALUE;
		}

		Date fromDate = getFromDate();

		if (fromDate != null) {
			loc_Course_InfoCacheModel.fromDate = fromDate.getTime();
		}
		else {
			loc_Course_InfoCacheModel.fromDate = Long.MIN_VALUE;
		}

		loc_Course_InfoCacheModel.Fees = getFees();

		loc_Course_InfoCacheModel.companyId = getCompanyId();

		loc_Course_InfoCacheModel.userId = getUserId();

		loc_Course_InfoCacheModel.userName = getUserName();

		String userName = loc_Course_InfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			loc_Course_InfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			loc_Course_InfoCacheModel.createDate = createDate.getTime();
		}
		else {
			loc_Course_InfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			loc_Course_InfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			loc_Course_InfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return loc_Course_InfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", couserId=");
		sb.append(getCouserId());
		sb.append(", locationName=");
		sb.append(getLocationName());
		sb.append(", couserName=");
		sb.append(getCouserName());
		sb.append(", maxSeats=");
		sb.append(getMaxSeats());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", Fees=");
		sb.append(getFees());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.ddt.model.Loc_Course_Info");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>couserId</column-name><column-value><![CDATA[");
		sb.append(getCouserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationName</column-name><column-value><![CDATA[");
		sb.append(getLocationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>couserName</column-name><column-value><![CDATA[");
		sb.append(getCouserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxSeats</column-name><column-value><![CDATA[");
		sb.append(getMaxSeats());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Fees</column-name><column-value><![CDATA[");
		sb.append(getFees());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Loc_Course_Info.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Loc_Course_Info.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _locationId;
	private long _couserId;
	private String _locationName;
	private String _couserName;
	private long _maxSeats;
	private Date _toDate;
	private Date _fromDate;
	private long _Fees;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Loc_Course_Info _escapedModel;
}