/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.servicemapping.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.servicemapping.model.location;

import com.servicemapping.service.locationLocalService;
import com.servicemapping.service.persistence.coursePersistence;
import com.servicemapping.service.persistence.locationPersistence;
import com.servicemapping.service.persistence.registrationDetailsPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the location local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.servicemapping.service.impl.locationLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.servicemapping.service.impl.locationLocalServiceImpl
 * @see com.servicemapping.service.locationLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class locationLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements locationLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.servicemapping.service.locationLocalServiceUtil} to access the location local service.
	 */

	/**
	 * Adds the location to the database. Also notifies the appropriate model listeners.
	 *
	 * @param location the location
	 * @return the location that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public location addlocation(location location) {
		location.setNew(true);

		return locationPersistence.update(location);
	}

	/**
	 * Creates a new location with the primary key. Does not add the location to the database.
	 *
	 * @param locationId the primary key for the new location
	 * @return the new location
	 */
	@Override
	public location createlocation(long locationId) {
		return locationPersistence.create(locationId);
	}

	/**
	 * Deletes the location with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param locationId the primary key of the location
	 * @return the location that was removed
	 * @throws PortalException if a location with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public location deletelocation(long locationId) throws PortalException {
		return locationPersistence.remove(locationId);
	}

	/**
	 * Deletes the location from the database. Also notifies the appropriate model listeners.
	 *
	 * @param location the location
	 * @return the location that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public location deletelocation(location location) {
		return locationPersistence.remove(location);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(location.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return locationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.servicemapping.model.impl.locationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return locationPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.servicemapping.model.impl.locationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return locationPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return locationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return locationPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public location fetchlocation(long locationId) {
		return locationPersistence.fetchByPrimaryKey(locationId);
	}

	/**
	 * Returns the location matching the UUID and group.
	 *
	 * @param uuid the location's UUID
	 * @param groupId the primary key of the group
	 * @return the matching location, or <code>null</code> if a matching location could not be found
	 */
	@Override
	public location fetchlocationByUuidAndGroupId(String uuid, long groupId) {
		return locationPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the location with the primary key.
	 *
	 * @param locationId the primary key of the location
	 * @return the location
	 * @throws PortalException if a location with the primary key could not be found
	 */
	@Override
	public location getlocation(long locationId) throws PortalException {
		return locationPersistence.findByPrimaryKey(locationId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(locationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(location.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("locationId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(locationLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(location.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("locationId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(locationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(location.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("locationId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<location>() {
				@Override
				public void performAction(location location)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						location);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(location.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return locationLocalService.deletelocation((location)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return locationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the locations matching the UUID and company.
	 *
	 * @param uuid the UUID of the locations
	 * @param companyId the primary key of the company
	 * @return the matching locations, or an empty list if no matches were found
	 */
	@Override
	public List<location> getlocationsByUuidAndCompanyId(String uuid,
		long companyId) {
		return locationPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of locations matching the UUID and company.
	 *
	 * @param uuid the UUID of the locations
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of locations
	 * @param end the upper bound of the range of locations (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching locations, or an empty list if no matches were found
	 */
	@Override
	public List<location> getlocationsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<location> orderByComparator) {
		return locationPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the location matching the UUID and group.
	 *
	 * @param uuid the location's UUID
	 * @param groupId the primary key of the group
	 * @return the matching location
	 * @throws PortalException if a matching location could not be found
	 */
	@Override
	public location getlocationByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return locationPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the locations.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.servicemapping.model.impl.locationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of locations
	 * @param end the upper bound of the range of locations (not inclusive)
	 * @return the range of locations
	 */
	@Override
	public List<location> getlocations(int start, int end) {
		return locationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of locations.
	 *
	 * @return the number of locations
	 */
	@Override
	public int getlocationsCount() {
		return locationPersistence.countAll();
	}

	/**
	 * Updates the location in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param location the location
	 * @return the location that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public location updatelocation(location location) {
		return locationPersistence.update(location);
	}

	/**
	 */
	@Override
	public void addcourselocation(long courseId, long locationId) {
		coursePersistence.addlocation(courseId, locationId);
	}

	/**
	 */
	@Override
	public void addcourselocation(long courseId, location location) {
		coursePersistence.addlocation(courseId, location);
	}

	/**
	 */
	@Override
	public void addcourselocations(long courseId, long[] locationIds) {
		coursePersistence.addlocations(courseId, locationIds);
	}

	/**
	 */
	@Override
	public void addcourselocations(long courseId, List<location> locations) {
		coursePersistence.addlocations(courseId, locations);
	}

	/**
	 */
	@Override
	public void clearcourselocations(long courseId) {
		coursePersistence.clearlocations(courseId);
	}

	/**
	 */
	@Override
	public void deletecourselocation(long courseId, long locationId) {
		coursePersistence.removelocation(courseId, locationId);
	}

	/**
	 */
	@Override
	public void deletecourselocation(long courseId, location location) {
		coursePersistence.removelocation(courseId, location);
	}

	/**
	 */
	@Override
	public void deletecourselocations(long courseId, long[] locationIds) {
		coursePersistence.removelocations(courseId, locationIds);
	}

	/**
	 */
	@Override
	public void deletecourselocations(long courseId, List<location> locations) {
		coursePersistence.removelocations(courseId, locations);
	}

	/**
	 * Returns the courseIds of the courses associated with the location.
	 *
	 * @param locationId the locationId of the location
	 * @return long[] the courseIds of courses associated with the location
	 */
	@Override
	public long[] getcoursePrimaryKeys(long locationId) {
		return locationPersistence.getcoursePrimaryKeys(locationId);
	}

	/**
	 */
	@Override
	public List<location> getcourselocations(long courseId) {
		return coursePersistence.getlocations(courseId);
	}

	/**
	 */
	@Override
	public List<location> getcourselocations(long courseId, int start, int end) {
		return coursePersistence.getlocations(courseId, start, end);
	}

	/**
	 */
	@Override
	public List<location> getcourselocations(long courseId, int start, int end,
		OrderByComparator<location> orderByComparator) {
		return coursePersistence.getlocations(courseId, start, end,
			orderByComparator);
	}

	/**
	 */
	@Override
	public int getcourselocationsCount(long courseId) {
		return coursePersistence.getlocationsSize(courseId);
	}

	/**
	 */
	@Override
	public boolean hascourselocation(long courseId, long locationId) {
		return coursePersistence.containslocation(courseId, locationId);
	}

	/**
	 */
	@Override
	public boolean hascourselocations(long courseId) {
		return coursePersistence.containslocations(courseId);
	}

	/**
	 */
	@Override
	public void setcourselocations(long courseId, long[] locationIds) {
		coursePersistence.setlocations(courseId, locationIds);
	}

	/**
	 * Returns the course local service.
	 *
	 * @return the course local service
	 */
	public com.servicemapping.service.courseLocalService getcourseLocalService() {
		return courseLocalService;
	}

	/**
	 * Sets the course local service.
	 *
	 * @param courseLocalService the course local service
	 */
	public void setcourseLocalService(
		com.servicemapping.service.courseLocalService courseLocalService) {
		this.courseLocalService = courseLocalService;
	}

	/**
	 * Returns the course persistence.
	 *
	 * @return the course persistence
	 */
	public coursePersistence getcoursePersistence() {
		return coursePersistence;
	}

	/**
	 * Sets the course persistence.
	 *
	 * @param coursePersistence the course persistence
	 */
	public void setcoursePersistence(coursePersistence coursePersistence) {
		this.coursePersistence = coursePersistence;
	}

	/**
	 * Returns the location local service.
	 *
	 * @return the location local service
	 */
	public locationLocalService getlocationLocalService() {
		return locationLocalService;
	}

	/**
	 * Sets the location local service.
	 *
	 * @param locationLocalService the location local service
	 */
	public void setlocationLocalService(
		locationLocalService locationLocalService) {
		this.locationLocalService = locationLocalService;
	}

	/**
	 * Returns the location persistence.
	 *
	 * @return the location persistence
	 */
	public locationPersistence getlocationPersistence() {
		return locationPersistence;
	}

	/**
	 * Sets the location persistence.
	 *
	 * @param locationPersistence the location persistence
	 */
	public void setlocationPersistence(locationPersistence locationPersistence) {
		this.locationPersistence = locationPersistence;
	}

	/**
	 * Returns the registration details local service.
	 *
	 * @return the registration details local service
	 */
	public com.servicemapping.service.registrationDetailsLocalService getregistrationDetailsLocalService() {
		return registrationDetailsLocalService;
	}

	/**
	 * Sets the registration details local service.
	 *
	 * @param registrationDetailsLocalService the registration details local service
	 */
	public void setregistrationDetailsLocalService(
		com.servicemapping.service.registrationDetailsLocalService registrationDetailsLocalService) {
		this.registrationDetailsLocalService = registrationDetailsLocalService;
	}

	/**
	 * Returns the registration details persistence.
	 *
	 * @return the registration details persistence
	 */
	public registrationDetailsPersistence getregistrationDetailsPersistence() {
		return registrationDetailsPersistence;
	}

	/**
	 * Sets the registration details persistence.
	 *
	 * @param registrationDetailsPersistence the registration details persistence
	 */
	public void setregistrationDetailsPersistence(
		registrationDetailsPersistence registrationDetailsPersistence) {
		this.registrationDetailsPersistence = registrationDetailsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.servicemapping.model.location",
			locationLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.servicemapping.model.location");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return locationLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return location.class;
	}

	protected String getModelClassName() {
		return location.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = locationPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.servicemapping.service.courseLocalService.class)
	protected com.servicemapping.service.courseLocalService courseLocalService;
	@BeanReference(type = coursePersistence.class)
	protected coursePersistence coursePersistence;
	@BeanReference(type = locationLocalService.class)
	protected locationLocalService locationLocalService;
	@BeanReference(type = locationPersistence.class)
	protected locationPersistence locationPersistence;
	@BeanReference(type = com.servicemapping.service.registrationDetailsLocalService.class)
	protected com.servicemapping.service.registrationDetailsLocalService registrationDetailsLocalService;
	@BeanReference(type = registrationDetailsPersistence.class)
	protected registrationDetailsPersistence registrationDetailsPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}