/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ddtii.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ddtii.model.loc_cou_cat;
import ddtii.model.loc_cou_catModel;
import ddtii.model.loc_cou_catSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the loc_cou_cat service. Represents a row in the &quot;DDTII_loc_cou_cat&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link loc_cou_catModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link loc_cou_catImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see loc_cou_catImpl
 * @see loc_cou_cat
 * @see loc_cou_catModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class loc_cou_catModelImpl extends BaseModelImpl<loc_cou_cat>
	implements loc_cou_catModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loc_cou_cat model instance should use the {@link loc_cou_cat} interface instead.
	 */
	public static final String TABLE_NAME = "DDTII_loc_cou_cat";
	public static final Object[][] TABLE_COLUMNS = {
			{ "loc_cou_catId", Types.BIGINT },
			{ "categoryId", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "locationId", Types.BIGINT },
			{ "durationString", Types.VARCHAR },
			{ "durationLong", Types.BIGINT },
			{ "startDate_", Types.TIMESTAMP },
			{ "endDate_", Types.TIMESTAMP },
			{ "maxSeats", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("loc_cou_catId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("courseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("locationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("durationString", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("durationLong", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("maxSeats", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table DDTII_loc_cou_cat (loc_cou_catId LONG not null primary key,categoryId LONG,courseId LONG,locationId LONG,durationString VARCHAR(75) null,durationLong LONG,startDate_ DATE null,endDate_ DATE null,maxSeats LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table DDTII_loc_cou_cat";
	public static final String ORDER_BY_JPQL = " ORDER BY loc_cou_cat.loc_cou_catId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DDTII_loc_cou_cat.loc_cou_catId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ddtii.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ddtii.model.loc_cou_cat"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ddtii.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ddtii.model.loc_cou_cat"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static loc_cou_cat toModel(loc_cou_catSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		loc_cou_cat model = new loc_cou_catImpl();

		model.setLoc_cou_catId(soapModel.getLoc_cou_catId());
		model.setCategoryId(soapModel.getCategoryId());
		model.setCourseId(soapModel.getCourseId());
		model.setLocationId(soapModel.getLocationId());
		model.setDurationString(soapModel.getDurationString());
		model.setDurationLong(soapModel.getDurationLong());
		model.setStartDate_(soapModel.getStartDate_());
		model.setEndDate_(soapModel.getEndDate_());
		model.setMaxSeats(soapModel.getMaxSeats());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<loc_cou_cat> toModels(loc_cou_catSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<loc_cou_cat> models = new ArrayList<loc_cou_cat>(soapModels.length);

		for (loc_cou_catSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ddtii.service.util.ServiceProps.get(
				"lock.expiration.time.ddtii.model.loc_cou_cat"));

	public loc_cou_catModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _loc_cou_catId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoc_cou_catId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loc_cou_catId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return loc_cou_cat.class;
	}

	@Override
	public String getModelClassName() {
		return loc_cou_cat.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("loc_cou_catId", getLoc_cou_catId());
		attributes.put("categoryId", getCategoryId());
		attributes.put("courseId", getCourseId());
		attributes.put("locationId", getLocationId());
		attributes.put("durationString", getDurationString());
		attributes.put("durationLong", getDurationLong());
		attributes.put("startDate_", getStartDate_());
		attributes.put("endDate_", getEndDate_());
		attributes.put("maxSeats", getMaxSeats());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long loc_cou_catId = (Long)attributes.get("loc_cou_catId");

		if (loc_cou_catId != null) {
			setLoc_cou_catId(loc_cou_catId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		String durationString = (String)attributes.get("durationString");

		if (durationString != null) {
			setDurationString(durationString);
		}

		Long durationLong = (Long)attributes.get("durationLong");

		if (durationLong != null) {
			setDurationLong(durationLong);
		}

		Date startDate_ = (Date)attributes.get("startDate_");

		if (startDate_ != null) {
			setStartDate_(startDate_);
		}

		Date endDate_ = (Date)attributes.get("endDate_");

		if (endDate_ != null) {
			setEndDate_(endDate_);
		}

		Long maxSeats = (Long)attributes.get("maxSeats");

		if (maxSeats != null) {
			setMaxSeats(maxSeats);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getLoc_cou_catId() {
		return _loc_cou_catId;
	}

	@Override
	public void setLoc_cou_catId(long loc_cou_catId) {
		_loc_cou_catId = loc_cou_catId;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	@JSON
	@Override
	public long getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@JSON
	@Override
	public String getDurationString() {
		if (_durationString == null) {
			return StringPool.BLANK;
		}
		else {
			return _durationString;
		}
	}

	@Override
	public void setDurationString(String durationString) {
		_durationString = durationString;
	}

	@JSON
	@Override
	public long getDurationLong() {
		return _durationLong;
	}

	@Override
	public void setDurationLong(long durationLong) {
		_durationLong = durationLong;
	}

	@JSON
	@Override
	public Date getStartDate_() {
		return _startDate_;
	}

	@Override
	public void setStartDate_(Date startDate_) {
		_startDate_ = startDate_;
	}

	@JSON
	@Override
	public Date getEndDate_() {
		return _endDate_;
	}

	@Override
	public void setEndDate_(Date endDate_) {
		_endDate_ = endDate_;
	}

	@JSON
	@Override
	public long getMaxSeats() {
		return _maxSeats;
	}

	@Override
	public void setMaxSeats(long maxSeats) {
		_maxSeats = maxSeats;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			loc_cou_cat.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public loc_cou_cat toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (loc_cou_cat)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		loc_cou_catImpl loc_cou_catImpl = new loc_cou_catImpl();

		loc_cou_catImpl.setLoc_cou_catId(getLoc_cou_catId());
		loc_cou_catImpl.setCategoryId(getCategoryId());
		loc_cou_catImpl.setCourseId(getCourseId());
		loc_cou_catImpl.setLocationId(getLocationId());
		loc_cou_catImpl.setDurationString(getDurationString());
		loc_cou_catImpl.setDurationLong(getDurationLong());
		loc_cou_catImpl.setStartDate_(getStartDate_());
		loc_cou_catImpl.setEndDate_(getEndDate_());
		loc_cou_catImpl.setMaxSeats(getMaxSeats());
		loc_cou_catImpl.setCompanyId(getCompanyId());
		loc_cou_catImpl.setUserId(getUserId());
		loc_cou_catImpl.setUserName(getUserName());
		loc_cou_catImpl.setCreateDate(getCreateDate());
		loc_cou_catImpl.setModifiedDate(getModifiedDate());

		loc_cou_catImpl.resetOriginalValues();

		return loc_cou_catImpl;
	}

	@Override
	public int compareTo(loc_cou_cat loc_cou_cat) {
		long primaryKey = loc_cou_cat.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof loc_cou_cat)) {
			return false;
		}

		loc_cou_cat loc_cou_cat = (loc_cou_cat)obj;

		long primaryKey = loc_cou_cat.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		loc_cou_catModelImpl loc_cou_catModelImpl = this;

		loc_cou_catModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<loc_cou_cat> toCacheModel() {
		loc_cou_catCacheModel loc_cou_catCacheModel = new loc_cou_catCacheModel();

		loc_cou_catCacheModel.loc_cou_catId = getLoc_cou_catId();

		loc_cou_catCacheModel.categoryId = getCategoryId();

		loc_cou_catCacheModel.courseId = getCourseId();

		loc_cou_catCacheModel.locationId = getLocationId();

		loc_cou_catCacheModel.durationString = getDurationString();

		String durationString = loc_cou_catCacheModel.durationString;

		if ((durationString != null) && (durationString.length() == 0)) {
			loc_cou_catCacheModel.durationString = null;
		}

		loc_cou_catCacheModel.durationLong = getDurationLong();

		Date startDate_ = getStartDate_();

		if (startDate_ != null) {
			loc_cou_catCacheModel.startDate_ = startDate_.getTime();
		}
		else {
			loc_cou_catCacheModel.startDate_ = Long.MIN_VALUE;
		}

		Date endDate_ = getEndDate_();

		if (endDate_ != null) {
			loc_cou_catCacheModel.endDate_ = endDate_.getTime();
		}
		else {
			loc_cou_catCacheModel.endDate_ = Long.MIN_VALUE;
		}

		loc_cou_catCacheModel.maxSeats = getMaxSeats();

		loc_cou_catCacheModel.companyId = getCompanyId();

		loc_cou_catCacheModel.userId = getUserId();

		loc_cou_catCacheModel.userName = getUserName();

		String userName = loc_cou_catCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			loc_cou_catCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			loc_cou_catCacheModel.createDate = createDate.getTime();
		}
		else {
			loc_cou_catCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			loc_cou_catCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			loc_cou_catCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return loc_cou_catCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{loc_cou_catId=");
		sb.append(getLoc_cou_catId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", durationString=");
		sb.append(getDurationString());
		sb.append(", durationLong=");
		sb.append(getDurationLong());
		sb.append(", startDate_=");
		sb.append(getStartDate_());
		sb.append(", endDate_=");
		sb.append(getEndDate_());
		sb.append(", maxSeats=");
		sb.append(getMaxSeats());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("ddtii.model.loc_cou_cat");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>loc_cou_catId</column-name><column-value><![CDATA[");
		sb.append(getLoc_cou_catId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>durationString</column-name><column-value><![CDATA[");
		sb.append(getDurationString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>durationLong</column-name><column-value><![CDATA[");
		sb.append(getDurationLong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate_</column-name><column-value><![CDATA[");
		sb.append(getStartDate_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate_</column-name><column-value><![CDATA[");
		sb.append(getEndDate_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxSeats</column-name><column-value><![CDATA[");
		sb.append(getMaxSeats());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = loc_cou_cat.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			loc_cou_cat.class
		};
	private long _loc_cou_catId;
	private long _categoryId;
	private long _courseId;
	private long _locationId;
	private String _durationString;
	private long _durationLong;
	private Date _startDate_;
	private Date _endDate_;
	private long _maxSeats;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private loc_cou_cat _escapedModel;
}