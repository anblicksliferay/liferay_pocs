/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.MappingServices.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.MappingServices.model.UserExternal;
import com.MappingServices.model.UserExternalModel;
import com.MappingServices.model.UserExternalSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserExternal service. Represents a row in the &quot;Ashokleyland_UserExternal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserExternalModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserExternalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserExternalImpl
 * @see UserExternal
 * @see UserExternalModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserExternalModelImpl extends BaseModelImpl<UserExternal>
	implements UserExternalModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user external model instance should use the {@link UserExternal} interface instead.
	 */
	public static final String TABLE_NAME = "Ashokleyland_UserExternal";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "uid", Types.BIGINT },
			{ "Location", Types.VARCHAR },
			{ "PolicyNumber", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PolicyNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table Ashokleyland_UserExternal (uuid_ VARCHAR(75) null,uid LONG not null primary key,Location VARCHAR(75) null,PolicyNumber VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Ashokleyland_UserExternal";
	public static final String ORDER_BY_JPQL = " ORDER BY userExternal.uid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Ashokleyland_UserExternal.uid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.MappingServices.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.MappingServices.model.UserExternal"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.MappingServices.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.MappingServices.model.UserExternal"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.MappingServices.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.MappingServices.model.UserExternal"),
			true);
	public static final long POLICYNUMBER_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long UID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserExternal toModel(UserExternalSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserExternal model = new UserExternalImpl();

		model.setUuid(soapModel.getUuid());
		model.setUid(soapModel.getUid());
		model.setLocation(soapModel.getLocation());
		model.setPolicyNumber(soapModel.getPolicyNumber());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserExternal> toModels(UserExternalSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserExternal> models = new ArrayList<UserExternal>(soapModels.length);

		for (UserExternalSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.MappingServices.service.util.ServiceProps.get(
				"lock.expiration.time.com.MappingServices.model.UserExternal"));

	public UserExternalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _uid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserExternal.class;
	}

	@Override
	public String getModelClassName() {
		return UserExternal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("uid", getUid());
		attributes.put("Location", getLocation());
		attributes.put("PolicyNumber", getPolicyNumber());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long uid = (Long)attributes.get("uid");

		if (uid != null) {
			setUid(uid);
		}

		String Location = (String)attributes.get("Location");

		if (Location != null) {
			setLocation(Location);
		}

		String PolicyNumber = (String)attributes.get("PolicyNumber");

		if (PolicyNumber != null) {
			setPolicyNumber(PolicyNumber);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUid() {
		return _uid;
	}

	@Override
	public void setUid(long uid) {
		_uid = uid;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_Location == null) {
			return StringPool.BLANK;
		}
		else {
			return _Location;
		}
	}

	@Override
	public void setLocation(String Location) {
		_Location = Location;
	}

	@JSON
	@Override
	public String getPolicyNumber() {
		if (_PolicyNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _PolicyNumber;
		}
	}

	@Override
	public void setPolicyNumber(String PolicyNumber) {
		_columnBitmask |= POLICYNUMBER_COLUMN_BITMASK;

		if (_originalPolicyNumber == null) {
			_originalPolicyNumber = _PolicyNumber;
		}

		_PolicyNumber = PolicyNumber;
	}

	public String getOriginalPolicyNumber() {
		return GetterUtil.getString(_originalPolicyNumber);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserExternal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserExternal toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserExternal)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserExternalImpl userExternalImpl = new UserExternalImpl();

		userExternalImpl.setUuid(getUuid());
		userExternalImpl.setUid(getUid());
		userExternalImpl.setLocation(getLocation());
		userExternalImpl.setPolicyNumber(getPolicyNumber());
		userExternalImpl.setCreateDate(getCreateDate());
		userExternalImpl.setModifiedDate(getModifiedDate());

		userExternalImpl.resetOriginalValues();

		return userExternalImpl;
	}

	@Override
	public int compareTo(UserExternal userExternal) {
		long primaryKey = userExternal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserExternal)) {
			return false;
		}

		UserExternal userExternal = (UserExternal)obj;

		long primaryKey = userExternal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserExternalModelImpl userExternalModelImpl = this;

		userExternalModelImpl._originalUuid = userExternalModelImpl._uuid;

		userExternalModelImpl._originalPolicyNumber = userExternalModelImpl._PolicyNumber;

		userExternalModelImpl._setModifiedDate = false;

		userExternalModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserExternal> toCacheModel() {
		UserExternalCacheModel userExternalCacheModel = new UserExternalCacheModel();

		userExternalCacheModel.uuid = getUuid();

		String uuid = userExternalCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userExternalCacheModel.uuid = null;
		}

		userExternalCacheModel.uid = getUid();

		userExternalCacheModel.Location = getLocation();

		String Location = userExternalCacheModel.Location;

		if ((Location != null) && (Location.length() == 0)) {
			userExternalCacheModel.Location = null;
		}

		userExternalCacheModel.PolicyNumber = getPolicyNumber();

		String PolicyNumber = userExternalCacheModel.PolicyNumber;

		if ((PolicyNumber != null) && (PolicyNumber.length() == 0)) {
			userExternalCacheModel.PolicyNumber = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userExternalCacheModel.createDate = createDate.getTime();
		}
		else {
			userExternalCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userExternalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userExternalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return userExternalCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", uid=");
		sb.append(getUid());
		sb.append(", Location=");
		sb.append(getLocation());
		sb.append(", PolicyNumber=");
		sb.append(getPolicyNumber());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.MappingServices.model.UserExternal");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uid</column-name><column-value><![CDATA[");
		sb.append(getUid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PolicyNumber</column-name><column-value><![CDATA[");
		sb.append(getPolicyNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserExternal.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserExternal.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _uid;
	private String _Location;
	private String _PolicyNumber;
	private String _originalPolicyNumber;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private UserExternal _escapedModel;
}