/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.MappingServices.service.base;

import aQute.bnd.annotation.ProviderType;

import com.MappingServices.model.UserExternal;

import com.MappingServices.service.UserExternalLocalService;
import com.MappingServices.service.persistence.EnquiryPersistence;
import com.MappingServices.service.persistence.UserExternalPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user external local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.MappingServices.service.impl.UserExternalLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.MappingServices.service.impl.UserExternalLocalServiceImpl
 * @see com.MappingServices.service.UserExternalLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class UserExternalLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserExternalLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.MappingServices.service.UserExternalLocalServiceUtil} to access the user external local service.
	 */

	/**
	 * Adds the user external to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userExternal the user external
	 * @return the user external that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserExternal addUserExternal(UserExternal userExternal) {
		userExternal.setNew(true);

		return userExternalPersistence.update(userExternal);
	}

	/**
	 * Creates a new user external with the primary key. Does not add the user external to the database.
	 *
	 * @param uid the primary key for the new user external
	 * @return the new user external
	 */
	@Override
	public UserExternal createUserExternal(long uid) {
		return userExternalPersistence.create(uid);
	}

	/**
	 * Deletes the user external with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param uid the primary key of the user external
	 * @return the user external that was removed
	 * @throws PortalException if a user external with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserExternal deleteUserExternal(long uid) throws PortalException {
		return userExternalPersistence.remove(uid);
	}

	/**
	 * Deletes the user external from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userExternal the user external
	 * @return the user external that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserExternal deleteUserExternal(UserExternal userExternal) {
		return userExternalPersistence.remove(userExternal);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserExternal.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return userExternalPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.MappingServices.model.impl.UserExternalModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return userExternalPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.MappingServices.model.impl.UserExternalModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return userExternalPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return userExternalPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return userExternalPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserExternal fetchUserExternal(long uid) {
		return userExternalPersistence.fetchByPrimaryKey(uid);
	}

	/**
	 * Returns the user external with the primary key.
	 *
	 * @param uid the primary key of the user external
	 * @return the user external
	 * @throws PortalException if a user external with the primary key could not be found
	 */
	@Override
	public UserExternal getUserExternal(long uid) throws PortalException {
		return userExternalPersistence.findByPrimaryKey(uid);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(userExternalLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserExternal.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("uid");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(userExternalLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(UserExternal.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("uid");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(userExternalLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserExternal.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("uid");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return userExternalLocalService.deleteUserExternal((UserExternal)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return userExternalPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user externals.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.MappingServices.model.impl.UserExternalModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user externals
	 * @param end the upper bound of the range of user externals (not inclusive)
	 * @return the range of user externals
	 */
	@Override
	public List<UserExternal> getUserExternals(int start, int end) {
		return userExternalPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user externals.
	 *
	 * @return the number of user externals
	 */
	@Override
	public int getUserExternalsCount() {
		return userExternalPersistence.countAll();
	}

	/**
	 * Updates the user external in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userExternal the user external
	 * @return the user external that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserExternal updateUserExternal(UserExternal userExternal) {
		return userExternalPersistence.update(userExternal);
	}

	/**
	 * Returns the enquiry local service.
	 *
	 * @return the enquiry local service
	 */
	public com.MappingServices.service.EnquiryLocalService getEnquiryLocalService() {
		return enquiryLocalService;
	}

	/**
	 * Sets the enquiry local service.
	 *
	 * @param enquiryLocalService the enquiry local service
	 */
	public void setEnquiryLocalService(
		com.MappingServices.service.EnquiryLocalService enquiryLocalService) {
		this.enquiryLocalService = enquiryLocalService;
	}

	/**
	 * Returns the enquiry persistence.
	 *
	 * @return the enquiry persistence
	 */
	public EnquiryPersistence getEnquiryPersistence() {
		return enquiryPersistence;
	}

	/**
	 * Sets the enquiry persistence.
	 *
	 * @param enquiryPersistence the enquiry persistence
	 */
	public void setEnquiryPersistence(EnquiryPersistence enquiryPersistence) {
		this.enquiryPersistence = enquiryPersistence;
	}

	/**
	 * Returns the user external local service.
	 *
	 * @return the user external local service
	 */
	public UserExternalLocalService getUserExternalLocalService() {
		return userExternalLocalService;
	}

	/**
	 * Sets the user external local service.
	 *
	 * @param userExternalLocalService the user external local service
	 */
	public void setUserExternalLocalService(
		UserExternalLocalService userExternalLocalService) {
		this.userExternalLocalService = userExternalLocalService;
	}

	/**
	 * Returns the user external persistence.
	 *
	 * @return the user external persistence
	 */
	public UserExternalPersistence getUserExternalPersistence() {
		return userExternalPersistence;
	}

	/**
	 * Sets the user external persistence.
	 *
	 * @param userExternalPersistence the user external persistence
	 */
	public void setUserExternalPersistence(
		UserExternalPersistence userExternalPersistence) {
		this.userExternalPersistence = userExternalPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.MappingServices.model.UserExternal",
			userExternalLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.MappingServices.model.UserExternal");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return UserExternalLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return UserExternal.class;
	}

	protected String getModelClassName() {
		return UserExternal.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = userExternalPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.MappingServices.service.EnquiryLocalService.class)
	protected com.MappingServices.service.EnquiryLocalService enquiryLocalService;
	@BeanReference(type = EnquiryPersistence.class)
	protected EnquiryPersistence enquiryPersistence;
	@BeanReference(type = UserExternalLocalService.class)
	protected UserExternalLocalService userExternalLocalService;
	@BeanReference(type = UserExternalPersistence.class)
	protected UserExternalPersistence userExternalPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}