/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.astra.workflowservice.service.base;

import aQute.bnd.annotation.ProviderType;

import com.astra.workflowservice.model.WorkFlowConfig;
import com.astra.workflowservice.service.WorkFlowConfigLocalService;
import com.astra.workflowservice.service.persistence.RegistrationPersistence;
import com.astra.workflowservice.service.persistence.WorkFlowConfigPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the work flow config local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.astra.workflowservice.service.impl.WorkFlowConfigLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.astra.workflowservice.service.impl.WorkFlowConfigLocalServiceImpl
 * @see com.astra.workflowservice.service.WorkFlowConfigLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class WorkFlowConfigLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements WorkFlowConfigLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.astra.workflowservice.service.WorkFlowConfigLocalServiceUtil} to access the work flow config local service.
	 */

	/**
	 * Adds the work flow config to the database. Also notifies the appropriate model listeners.
	 *
	 * @param workFlowConfig the work flow config
	 * @return the work flow config that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WorkFlowConfig addWorkFlowConfig(WorkFlowConfig workFlowConfig) {
		workFlowConfig.setNew(true);

		return workFlowConfigPersistence.update(workFlowConfig);
	}

	/**
	 * Creates a new work flow config with the primary key. Does not add the work flow config to the database.
	 *
	 * @param WfcId the primary key for the new work flow config
	 * @return the new work flow config
	 */
	@Override
	public WorkFlowConfig createWorkFlowConfig(long WfcId) {
		return workFlowConfigPersistence.create(WfcId);
	}

	/**
	 * Deletes the work flow config with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param WfcId the primary key of the work flow config
	 * @return the work flow config that was removed
	 * @throws PortalException if a work flow config with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WorkFlowConfig deleteWorkFlowConfig(long WfcId)
		throws PortalException {
		return workFlowConfigPersistence.remove(WfcId);
	}

	/**
	 * Deletes the work flow config from the database. Also notifies the appropriate model listeners.
	 *
	 * @param workFlowConfig the work flow config
	 * @return the work flow config that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WorkFlowConfig deleteWorkFlowConfig(WorkFlowConfig workFlowConfig) {
		return workFlowConfigPersistence.remove(workFlowConfig);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WorkFlowConfig.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return workFlowConfigPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.astra.workflowservice.model.impl.WorkFlowConfigModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return workFlowConfigPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.astra.workflowservice.model.impl.WorkFlowConfigModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return workFlowConfigPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return workFlowConfigPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return workFlowConfigPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public WorkFlowConfig fetchWorkFlowConfig(long WfcId) {
		return workFlowConfigPersistence.fetchByPrimaryKey(WfcId);
	}

	/**
	 * Returns the work flow config with the matching UUID and company.
	 *
	 * @param uuid the work flow config's UUID
	 * @param companyId the primary key of the company
	 * @return the matching work flow config, or <code>null</code> if a matching work flow config could not be found
	 */
	@Override
	public WorkFlowConfig fetchWorkFlowConfigByUuidAndCompanyId(String uuid,
		long companyId) {
		return workFlowConfigPersistence.fetchByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the work flow config with the primary key.
	 *
	 * @param WfcId the primary key of the work flow config
	 * @return the work flow config
	 * @throws PortalException if a work flow config with the primary key could not be found
	 */
	@Override
	public WorkFlowConfig getWorkFlowConfig(long WfcId)
		throws PortalException {
		return workFlowConfigPersistence.findByPrimaryKey(WfcId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(workFlowConfigLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WorkFlowConfig.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("WfcId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(workFlowConfigLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(WorkFlowConfig.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("WfcId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(workFlowConfigLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WorkFlowConfig.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("WfcId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<WorkFlowConfig>() {
				@Override
				public void performAction(WorkFlowConfig workFlowConfig)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						workFlowConfig);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(WorkFlowConfig.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return workFlowConfigLocalService.deleteWorkFlowConfig((WorkFlowConfig)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return workFlowConfigPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the work flow config with the matching UUID and company.
	 *
	 * @param uuid the work flow config's UUID
	 * @param companyId the primary key of the company
	 * @return the matching work flow config
	 * @throws PortalException if a matching work flow config could not be found
	 */
	@Override
	public WorkFlowConfig getWorkFlowConfigByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException {
		return workFlowConfigPersistence.findByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns a range of all the work flow configs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.astra.workflowservice.model.impl.WorkFlowConfigModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of work flow configs
	 * @param end the upper bound of the range of work flow configs (not inclusive)
	 * @return the range of work flow configs
	 */
	@Override
	public List<WorkFlowConfig> getWorkFlowConfigs(int start, int end) {
		return workFlowConfigPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of work flow configs.
	 *
	 * @return the number of work flow configs
	 */
	@Override
	public int getWorkFlowConfigsCount() {
		return workFlowConfigPersistence.countAll();
	}

	/**
	 * Updates the work flow config in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param workFlowConfig the work flow config
	 * @return the work flow config that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WorkFlowConfig updateWorkFlowConfig(WorkFlowConfig workFlowConfig) {
		return workFlowConfigPersistence.update(workFlowConfig);
	}

	/**
	 * Returns the registration local service.
	 *
	 * @return the registration local service
	 */
	public com.astra.workflowservice.service.RegistrationLocalService getRegistrationLocalService() {
		return registrationLocalService;
	}

	/**
	 * Sets the registration local service.
	 *
	 * @param registrationLocalService the registration local service
	 */
	public void setRegistrationLocalService(
		com.astra.workflowservice.service.RegistrationLocalService registrationLocalService) {
		this.registrationLocalService = registrationLocalService;
	}

	/**
	 * Returns the registration persistence.
	 *
	 * @return the registration persistence
	 */
	public RegistrationPersistence getRegistrationPersistence() {
		return registrationPersistence;
	}

	/**
	 * Sets the registration persistence.
	 *
	 * @param registrationPersistence the registration persistence
	 */
	public void setRegistrationPersistence(
		RegistrationPersistence registrationPersistence) {
		this.registrationPersistence = registrationPersistence;
	}

	/**
	 * Returns the work flow config local service.
	 *
	 * @return the work flow config local service
	 */
	public WorkFlowConfigLocalService getWorkFlowConfigLocalService() {
		return workFlowConfigLocalService;
	}

	/**
	 * Sets the work flow config local service.
	 *
	 * @param workFlowConfigLocalService the work flow config local service
	 */
	public void setWorkFlowConfigLocalService(
		WorkFlowConfigLocalService workFlowConfigLocalService) {
		this.workFlowConfigLocalService = workFlowConfigLocalService;
	}

	/**
	 * Returns the work flow config persistence.
	 *
	 * @return the work flow config persistence
	 */
	public WorkFlowConfigPersistence getWorkFlowConfigPersistence() {
		return workFlowConfigPersistence;
	}

	/**
	 * Sets the work flow config persistence.
	 *
	 * @param workFlowConfigPersistence the work flow config persistence
	 */
	public void setWorkFlowConfigPersistence(
		WorkFlowConfigPersistence workFlowConfigPersistence) {
		this.workFlowConfigPersistence = workFlowConfigPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.astra.workflowservice.model.WorkFlowConfig",
			workFlowConfigLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.astra.workflowservice.model.WorkFlowConfig");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return WorkFlowConfigLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return WorkFlowConfig.class;
	}

	protected String getModelClassName() {
		return WorkFlowConfig.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = workFlowConfigPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.astra.workflowservice.service.RegistrationLocalService.class)
	protected com.astra.workflowservice.service.RegistrationLocalService registrationLocalService;
	@BeanReference(type = RegistrationPersistence.class)
	protected RegistrationPersistence registrationPersistence;
	@BeanReference(type = WorkFlowConfigLocalService.class)
	protected WorkFlowConfigLocalService workFlowConfigLocalService;
	@BeanReference(type = WorkFlowConfigPersistence.class)
	protected WorkFlowConfigPersistence workFlowConfigPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}